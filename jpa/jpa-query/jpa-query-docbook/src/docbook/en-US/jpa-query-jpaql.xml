<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-query-jpaql">
    <title>JPA Query Language</title>
    <para></para>
        
    <section id="jpa-query-jpaql-entity">
        <title>Simple Entity Query</title>

<programlisting language=""><![CDATA[select object(c) from Customer as c]]></programlisting>
        <para>Alternate, abbreviated form</para>                        
<programlisting language=""><![CDATA[select c from Customer c]]></programlisting>                        
  
        <itemizedlist>
            <listitem><para>"select" defines root query objects -- all path references must start from this set</para></listitem>
            <listitem><para>"from" defines source of root query terms</para></listitem>
            <listitem><para>"as" (optional) identifies a variable assignment of entity in from clause</para></listitem>
            <listitem><para>"object()" (optional) identifies what is returned for the path expressed in select clause (e.g., object(), count()) -- left over from EJBQL</para></listitem>
            <listitem><para>no "where" clause indicates all entities are selected</para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language="java"><![CDATA[
TypedQuery<Customer> query = em.createQuery(
        "select object(c) from Customer as c", 
        Customer.class);
List<Customer> results = query.getResultList();]]></programlisting>                        
        
        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from
        JPAQL_CUSTOMER customer0_
 -found result:firstName=cat, lastName=inhat
 -found result:firstName=thing, lastName=one
 -found result:firstName=thing, lastName=two]]></programlisting>                            
    </section>


    <section id="jpa-query-jpaql-nonentity">
        <title>Non-Entity Queries</title>
  
<programlisting language=""><![CDATA[select c.lastName from Customer c]]></programlisting>

        <itemizedlist>
            <listitem><para>Allows return of simple property</para></listitem>
            <listitem><para>"c.lastName" is called a "path"</para></listitem>
            <listitem><para>All paths based from root query terms</para></listitem>
            <listitem><para>Single path selects return typed list of values</para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language="java"><![CDATA[
TypedQuery<String> query = em.createQuery(
        "select c.lastName from Customer c", String.class);
List<String> results = query.getResultList();]]></programlisting>                        
        <itemizedlist>
            <listitem><para>Query result is a List&lt;String&gt; because "c.lastName" is a String</para></listitem>
        </itemizedlist>


        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        customer0_.LAST_NAME as col_0_0_ 
    from
        JPAQL_CUSTOMER customer0_
 -lastName=inhat
 -lastName=one
 -lastName=two]]></programlisting>                            
    </section>

    <section id="jpa-query-jpaql-multiselect">
        <title>Multi-select Query</title>

        <section id="jpa-query-jpaql-multiselect-array">
           <title>Multi-select Query with Object[]</title>
<programlisting language=""><![CDATA[select c.firstName, c.hireDate from Clerk c]]></programlisting>

            <itemizedlist>
                <listitem><para>Select specifies multiple terms</para></listitem>
                <listitem><para>Terms are expressed thru a path expression</para></listitem>
                <listitem><para>Terms must be based off paths from root terms in the FROM (or JOIN) clause</para></listitem>
            </itemizedlist>

            <para>In programming context</para>
<programlisting language=""><![CDATA[
TypedQuery<Object[]> query = em.createQuery(
        "select c.firstName, c.hireDate from Clerk c", Object[].class);
List<Object[]> results = query.getResultList();
assertTrue("no results", results.size() > 0);
for(Object[] result : results) {
    assertEquals("unexpected result length", 2, result.length);
    String firstName = (String) result[0];
    Date hireDate = (Date) result[1];
    log.info("firstName=" + firstName + " hireDate=" + hireDate);
}
]]></programlisting>                            
            <itemizedlist>
                <listitem><para>Query defined to return elements of select in Object[]</para></listitem>
            </itemizedlist>

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.FIRST_NAME as col_0_0_,
        clerk0_.HIRE_DATE as col_1_0_ 
    from
        JPAQL_CLERK clerk0_
 -firstName=Manny hireDate=1970-01-01
 -firstName=Moe hireDate=1970-01-01
 -firstName=Jack hireDate=1973-03-01]]></programlisting>                            
        </section>
            
        <section id="jpa-query-jpaql-multiselect-tuple">
           <title>Multi-select Query with Tuple</title>

<programlisting language=""><![CDATA[select c.firstName as firstName, c.hireDate as hireDate from Clerk c]]></programlisting>

        <itemizedlist>
            <listitem><para>Aliases may be assigned to select terms for named-access to results</para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language=""><![CDATA[
TypedQuery<Tuple> query = em.createQuery(
        "select c.firstName as firstName, c.hireDate as hireDate from Clerk c", Tuple.class);
List<Tuple> results = query.getResultList();
assertTrue("no results", results.size() > 0);
for(Tuple result : results) {
    assertEquals("unexpected result length", 2, result.getElements().size());
    String firstName = result.get("firstName", String.class);
    Date hireDate = result.get("hireDate", Date.class);
    log.info("firstName=" + firstName + " hireDate=" + hireDate);
}]]></programlisting>                            
        <itemizedlist>
            <listitem><para>Query defined to return instances of Tuple class</para></listitem>
            <listitem><para>Tuples provide access using</para>
                <itemizedlist>
                    <listitem><para>get(index) - simular to Object[]</para></listitem>
                    <listitem><para>get(index, Class&lt;T&gt; resultType) - typed access by index</para></listitem>
                    <listitem><para>get(alias) - access by alias</para></listitem>
                    <listitem><para>get(alias, Class&lt;T&gt; resultType) - typed access by alias</para></listitem>
                    <listitem><para>getElements() - access thru collection interface</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.FIRST_NAME as col_0_0_,
        clerk0_.HIRE_DATE as col_1_0_ 
    from
        JPAQL_CLERK clerk0_
 -firstName=Manny hireDate=1970-01-01
 -firstName=Moe hireDate=1970-01-01
 -firstName=Jack hireDate=1973-03-01]]></programlisting>                            
        </section>
            
        <section id="jpa-query-jpaql-multiselect-construct">
           <title>Multi-select Query with Constructor</title>
<programlisting language=""><![CDATA[
select new ejava.jpa.examples.query.Receipt(s.id, s.buyerId, s.date, s.amount)
from Sale s]]></programlisting>

        <itemizedlist>
            <listitem><para>Individual elements of select are matched up against class constructor</para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language="java"><![CDATA[
package ejava.jpa.examples.query;
...
public class Receipt {
    private long saleId;
    private long customerId;
    private Date date;
    private double amount;
    
    public Receipt(long saleId, long customerId, Date date, BigDecimal amount) {
        this(customerId, saleId, date, amount.doubleValue());
    }
    public Receipt(long saleId, long customerId, Date date, double amount) {
        this.customerId = customerId;
        this.saleId = saleId;
        this.date = date;
        this.amount = amount;
    }
...]]></programlisting>                        
    <itemizedlist>
        <listitem><para>Constructed class may be simple POJO -- no need to be an entity</para></listitem>
        <listitem><para>Instances are not managed</para></listitem>
        <listitem><para>Suitable for use as Data Transfer Objects (DTOs)</para></listitem>
    </itemizedlist>

<programlisting language="java"><![CDATA[
TypedQuery<Receipt> query = em.createQuery(
    String.format("select new %s(", Receipt.class.getName()) +
    "s.id,s.buyerId,s.date, s.amount) " +
    "from Sale s", Receipt.class);

List<Receipt> results = query.getResultList();
for(Receipt receipt : results) {
    assertNotNull("no receipt", receipt);
    log.info("receipt=" + receipt);
}]]></programlisting>
    <itemizedlist>
        <listitem><para>Each row returned as instance of provided class</para></listitem>
    </itemizedlist>
                            

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        sale0_.SALE_ID as col_0_0_,
        sale0_.BUYER_ID as col_1_0_,
        sale0_.date as col_2_0_,
        sale0_.amount as col_3_0_ 
    from
        JPAQL_SALE sale0_
 -receipt=sale=1, customer=1, date=1998-04-10 10:13:35, amount=$100.00
 -receipt=sale=2, customer=2, date=1999-06-11 14:15:10, amount=$150.00]]></programlisting>                            
        </section>    

  



    </section>

    <section id="jpa-query-jpaql-">
        <title></title>
        <para></para>
  
<programlisting language=""><![CDATA[
]]></programlisting>

        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language=""><![CDATA[
]]></programlisting>                            

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
]]></programlisting>                            
    </section>






    <section id="jpa-query-jpaql-summary">
       <title>Summary</title>
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>
    </section>    
</chapter>
  
