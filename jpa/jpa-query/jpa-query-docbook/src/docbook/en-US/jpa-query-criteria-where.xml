<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-query-criteria-where">
    <title>Criteria Where Clauses</title>
    <para></para>

    <section id="jpa-query-criteria-where-equals">
        <title>Equality Test</title>

        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Customer c 
where c.firstName='cat']]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
        CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
        
        Root<Customer> c = qdef.from(Customer.class);
        qdef.select(c)
            .where(cb.equal(c.get("firstName"), "cat"));
]]></programlisting>                        
        <itemizedlist>
            <listitem><para>Return entities where there is an equality match</para></listitem>
        </itemizedlist>

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from
        JPAQL_CUSTOMER customer0_ 
    where
        customer0_.FIRST_NAME=?
 -found result:firstName=cat, lastName=inhat]]></programlisting>                            


        <para>No need to escape JPAQL special characters</para>
<programlisting language=""><![CDATA[select c from Customer c 
where c.firstName='cat']]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
        CriteriaQuery<Store> qdef = cb.createQuery(Store.class);
        
        Root<Store> s = qdef.from(Store.class);
        qdef.select(s)
            .where(cb.equal(s.get("name"), "Big Al's"));
]]></programlisting>                        
        <itemizedlist>
            <listitem><para>Literal values automatically escaped</para></listitem>
        </itemizedlist>

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        store0_.STORE_ID as STORE1_0_,
        store0_.name as name0_ 
    from
        ORMQL_STORE store0_ 
    where
        store0_.name=?
...
 -found result:name=Big Al's, sales(2)={1, 2, }]]></programlisting>

    </section>


    <section id="jpa-query-criteria-where-like">
        <title>Like Test</title>
        
        <section id="jpa-query-criteria-where-like-literal">
            <title>Like Test Literal</title>

            <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Clerk c 
where c.firstName like 'M%']]></programlisting>

            <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Clerk> qdef = cb.createQuery(Clerk.class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(c)
    .where(cb.like(c.<String>get("firstName"), "M%"));
]]></programlisting>                        

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from
        JPAQL_CLERK clerk0_ 
    where
        clerk0_.FIRST_NAME like ?
...
 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }]]></programlisting>                            
         </section>    

        <section id="jpa-query-criteria-where-like-literalparam">
           <title>Like Test Literal Parameter</title>

            <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Clerk c
where c.firstName like :firstName]]></programlisting>

            <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Clerk> qdef = cb.createQuery(Clerk.class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(c)
    .where(cb.like(c.<String>get("firstName"), 
                   cb.parameter(String.class, "firstName")));
]]></programlisting>                        

            <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Clerk> qdef = cb.createQuery(Clerk.class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(c)
    .where(cb.like(c.<String>get("firstName"), 
                   cb.parameter(String.class, "firstName")));

TypedQuery<Clerk> query = em.createQuery(qdef)
        .setParameter("firstName", "M%");
List<Clerk> results = query.getResultList();
]]></programlisting>                        

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from
        JPAQL_CLERK clerk0_ 
    where
        clerk0_.FIRST_NAME like ?
 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }]]></programlisting>                            
        </section>    

        <section id="jpa-query-criteria-where-like-concat">
           <title>Like Test Concatenated String</title>

            <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Clerk c
where c.firstName like concat(:firstName,'%')]]></programlisting>

            <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Clerk> qdef = cb.createQuery(Clerk.class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(c)
    .where(cb.like(c.<String>get("firstName"),
                   cb.concat(cb.parameter(String.class, "firstName"), "%")));
]]></programlisting>                        

            <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Clerk> qdef = cb.createQuery(Clerk.class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(c)
    .where(cb.like(c.<String>get("firstName"),
                   cb.concat(cb.parameter(String.class, "firstName"), "%")));

TypedQuery<Clerk> query = em.createQuery(qdef)
        .setParameter("firstName", "M");
List<Clerk> results = query.getResultList();]]></programlisting>                        

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from
        JPAQL_CLERK clerk0_ 
    where
        clerk0_.FIRST_NAME like (?||?)
 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }
]]></programlisting>                            
        </section>    

        <section id="jpa-query-criteria-where-like-singlechar">
           <title>Like Test Single Character Wildcard</title>

            <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Clerk c
where c.firstName like '_anny']]></programlisting>

            <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Clerk> qdef = cb.createQuery(Clerk.class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(c)
    .where(cb.like(c.<String>get("firstName"),"_anny"));
]]></programlisting>                        

            <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Clerk> qdef = cb.createQuery(Clerk.class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(c)
    .where(cb.like(c.<String>get("firstName"),"_anny"));

TypedQuery<Clerk> query = em.createQuery(qdef);
List<Clerk> results = query.getResultList();]]></programlisting>                        

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from
        JPAQL_CLERK clerk0_ 
    where
        clerk0_.FIRST_NAME like ?

 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
]]></programlisting>                            
        </section>    
    </section>

    <section id="jpa-query-criteria-where-formulas">
        <title>Formulas</title>
        <para></para>
  

        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select s from Sale s 
where (s.amount * :tax) > :amount]]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Number> qdef = cb.createQuery(Number.class); 

Root<Sale> s = qdef.from(Sale.class);
qdef.select(cb.count(s))
    .where(cb.greaterThan(
        cb.prod(s.<BigDecimal>get("amount"), cb.parameter(BigDecimal.class, "tax")), 
        new BigDecimal(10.0)));]]></programlisting>                        
  
        <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Number> qdef = cb.createQuery(Number.class); 

//select count(s) from Sale s 
//where (s.amount * :tax) > :amount"
Root<Sale> s = qdef.from(Sale.class);
qdef.select(cb.count(s))
    .where(cb.greaterThan(
        cb.prod(s.<BigDecimal>get("amount"), cb.parameter(BigDecimal.class, "tax")), 
        new BigDecimal(10.0)));
TypedQuery<Number> query = em.createQuery(qdef);
        
//keep raising taxes until somebody pays $10.00 in tax
double tax = 0.05;
for (;query.setParameter("tax", new BigDecimal(tax))
           .getSingleResult().intValue()==0;
      tax += 0.01) {
    log.debug("tax=" + NumberFormat.getPercentInstance().format(tax));
}
log.info("raise taxes to: " + NumberFormat.getPercentInstance().format(tax));]]></programlisting>                            

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        count(*) as col_0_0_ 
    from
        JPAQL_SALE sale0_ 
    where
        sale0_.amount*?>10 limit ?
 -tax=5%
Hibernate: 
    select
        count(*) as col_0_0_ 
    from
        JPAQL_SALE sale0_ 
    where
        sale0_.amount*?>10 limit ?
 -tax=6%
Hibernate: 
    select
        count(*) as col_0_0_ 
    from
        JPAQL_SALE sale0_ 
    where
        sale0_.amount*?>10 limit ?
 -raise taxes to: 7%]]></programlisting>                            
    </section>


    <section id="jpa-query-criteria-where-logic">
        <title>Logic Operators</title>
  
        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Customer c
where (c.firstName='cat' AND c.lastName='inhat')
    OR c.firstName='thing']]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);

Root<Customer> c = qdef.from(Customer.class);
qdef.select(c)
    .where(cb.or(
            cb.and(cb.equal(c.get("firstName"), "cat"), 
                   cb.equal(c.get("lastName"), "inhat")),
            cb.equal(c.get("firstName"), "thing")));]]></programlisting>                        

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from
        JPAQL_CUSTOMER customer0_ 
    where
        customer0_.FIRST_NAME=? 
        and customer0_.LAST_NAME=? 
        or customer0_.FIRST_NAME=?
 -found result:firstName=cat, lastName=inhat
 -found result:firstName=thing, lastName=one
 -found result:firstName=thing, lastName=two]]></programlisting>                            

        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Customer c 
where (NOT (c.firstName='cat' AND c.lastName='inhat')) 
    OR c.firstName='thing']]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);

Root<Customer> c = qdef.from(Customer.class);
qdef.select(c)
    .where(cb.or(
            cb.not(cb.and(cb.equal(c.get("firstName"), "cat"), 
                          cb.equal(c.get("lastName"), "inhat"))),
            cb.equal(c.get("firstName"), "thing"))
        );]]></programlisting>                        

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from
        JPAQL_CUSTOMER customer0_ 
    where
        customer0_.FIRST_NAME<>? 
        or customer0_.LAST_NAME<>? 
        or customer0_.FIRST_NAME=?
 -found result:firstName=thing, lastName=one
 -found result:firstName=thing, lastName=two]]></programlisting>                            

    </section>



    <section id="jpa-query-criteria-where-">
        <title></title>

        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[
]]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
]]></programlisting>                        
  
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language="java"><![CDATA[
]]></programlisting>                        

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
]]></programlisting>                            
    </section>


    <section id="jpa-query-criteria-where-summary">
       <title>Summary</title>
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>
    </section>    
</chapter>
  
