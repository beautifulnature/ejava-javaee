<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-query-criteria">
    <title>JPA Criteria API</title>
    <para></para>
        
    <section id="jpa-query-criteria-template">
        <title>Criteria API Demo Template</title>
    
        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select ...]]></programlisting>

        <para>Boiler-plate code</para>
<programlisting language=""><![CDATA[
CriteriaBuilder cb = em.getCriteriaBuilder();

//example-specific criteria API definition
CriteriaQuery<T> qdef = ...

TypedQuery<T> query = em.createQuery(qdef);
List<T> objects = query.getResultList();
for(T o: objects) {
   log.info("found result:" + o);
}]]></programlisting>                        
        
    </section>

    <section id="jpa-query-criteria-entity">
        <title>Simple Entity Query</title>

        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Customer c]]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);

Root<Customer> c = qdef.from(Customer.class);        
qdef.select(c);]]></programlisting>                        
                        
  
        <itemizedlist>
            <listitem><para>"from"</para>
                <itemizedlist>
                    <listitem><para>defines source of root query terms</para></listitem>
                    <listitem><para>returns object leveraged in query body</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>"select" defines root query objects -- all path references must start from this set</para></listitem>
            <listitem><para>no "where" clause indicates all entities are selected</para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);

Root<Customer> c = qdef.from(Customer.class);        
qdef.select(c);

TypedQuery<Customer> query = em.createQuery(qdef);
List<Customer> results = query.getResultList();]]></programlisting>                        
        
        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from
        JPAQL_CUSTOMER customer0_
 -found result:firstName=cat, lastName=inhat
 -found result:firstName=thing, lastName=one
 -found result:firstName=thing, lastName=two]]></programlisting>                            
    </section>

    <section id="jpa-query-criteria-nonentity">
        <title>Non-Entity Query</title>

        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c.lastName from Customer c]]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<String> qdef = cb.createQuery(String.class);

Root<Customer> c = qdef.from(Customer.class);
qdef.select(c.<String>get("lastName"));
]]></programlisting>                        
  
        <itemizedlist>
            <listitem><para>Allows return of simple property</para></listitem>
            <listitem><para>c.get("lastName") is called a "path"</para></listitem>
            <listitem><para>All paths based from root query terms (thus requirement for Root&lt;Customer&gt; c object)</para></listitem>
            <listitem><para>Single path selects return typed list of values</para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<String> qdef = cb.createQuery(String.class);

Root<Customer> c = qdef.from(Customer.class);
qdef.select(c.<String>get("lastName"));

TypedQuery<String> query = em.createQuery(qdef);
List<String> results = query.getResultList();]]></programlisting>                        
        <itemizedlist>
            <listitem><para>Query result is a List&lt;String&gt; because "c.lastName" is a String</para></listitem>
        </itemizedlist>

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        customer0_.LAST_NAME as col_0_0_ 
    from
        JPAQL_CUSTOMER customer0_
 -lastName=inhat
 -lastName=one
 -lastName=two]]></programlisting>                            
    </section>

    <section id="jpa-query-criteria-multiselect">
        <title>Multi-select Query</title>

        <section id="jpa-query-criteria-multiselect-array">
            <title>Multi-select Query with Object[]</title>
            <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c.firstName, c.hireDate from Clerk c]]></programlisting>

            <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Object[]> qdef = cb.createQuery(Object[].class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(cb.array(c.get("firstName"), c.get("hireDate")));
]]></programlisting>                        
            <itemizedlist>
                <listitem><para>Select specifies multiple terms within array()</para></listitem>
                <listitem><para>Terms are expressed thru a path expression</para></listitem>
                <listitem><para>Terms must be based off paths from root terms in the FROM (or JOIN) clause -- thus why Root&lt;Clerk&gt; c was retained from cb.from() call</para></listitem>
            </itemizedlist>

            <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Object[]> qdef = cb.createQuery(Object[].class);

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(cb.array(c.get("firstName"), c.get("hireDate")));

TypedQuery<Object[]> query = em.createQuery(qdef);
List<Object[]> results = query.getResultList();
assertTrue("no results", results.size() > 0);
for(Object[] result : results) {
    assertEquals("unexpected result length", 2, result.length);
    String firstName = (String) result[0];
    Date hireDate = (Date) result[1];
    log.info("firstName=" + firstName + " hireDate=" + hireDate);
}]]></programlisting>                        
            <itemizedlist>
                <listitem><para>Query defined to return elements of select in Object[]</para></listitem>
            </itemizedlist>

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.FIRST_NAME as col_0_0_,
        clerk0_.HIRE_DATE as col_1_0_ 
    from
        JPAQL_CLERK clerk0_
 -firstName=Manny hireDate=1970-01-01
 -firstName=Moe hireDate=1970-01-01
 -firstName=Jack hireDate=1973-03-01
]]></programlisting>                            
        </section>           

        <section id="jpa-query-criteria-multiselect-tuple">
           <title>Multi-select Query with Tuple</title>
            <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c.firstName as firstName, c.hireDate as hireDate from Clerk c]]></programlisting>

            <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Tuple> qdef = cb.createTupleQuery();

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(cb.tuple(
        c.get("firstName").alias("firstName"), 
        c.get("hireDate").alias("hireDate")));
]]></programlisting>                        
        <itemizedlist>
            <listitem><para>Aliases may be assigned to select terms for named-access to results</para></listitem>
        </itemizedlist>

            <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Tuple> qdef = cb.createTupleQuery();

Root<Clerk> c = qdef.from(Clerk.class);
qdef.select(cb.tuple(
        c.get("firstName").alias("firstName"), 
        c.get("hireDate").alias("hireDate")));

TypedQuery<Tuple> query = em.createQuery(qdef);
List<Tuple> results = query.getResultList();
assertTrue("no results", results.size() > 0);
for(Tuple result : results) {
    assertEquals("unexpected result length", 2, result.getElements().size());
    String firstName = result.get("firstName", String.class);
    Date hireDate = result.get("hireDate", Date.class);
    log.info("firstName=" + firstName + " hireDate=" + hireDate);
}
]]></programlisting>                        
        <itemizedlist>
            <listitem><para>Query defined to return instances of Tuple class</para></listitem>
            <listitem><para>Tuples provide access using</para>
                <itemizedlist>
                    <listitem><para>get(index) - simular to Object[]</para></listitem>
                    <listitem><para>get(index, Class&lt;T&gt; resultType) - typed access by index</para></listitem>
                    <listitem><para>get(alias) - access by alias</para></listitem>
                    <listitem><para>get(alias, Class&lt;T&gt; resultType) - typed access by alias</para></listitem>
                    <listitem><para>getElements() - access thru collection interface</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.FIRST_NAME as col_0_0_,
        clerk0_.HIRE_DATE as col_1_0_ 
    from
        JPAQL_CLERK clerk0_
 -firstName=Manny hireDate=1970-01-01
 -firstName=Moe hireDate=1970-01-01
 -firstName=Jack hireDate=1973-03-01
]]></programlisting>                            
        </section>           

        <section id="jpa-query-criteria-multiselect-constructor">
           <title>Multi-select Query with Constructor</title>
            <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[
select new ejava.jpa.examples.query.Receipt(s.id,s.buyerId,s.date, s.amount)
from Sale s]]></programlisting>

            <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Receipt> qdef = cb.createQuery(Receipt.class);

Root<Sale> s = qdef.from(Sale.class);
qdef.select(cb.construct(
                Receipt.class, 
                s.get("id"), 
                s.get("buyerId"),
                s.get("date"),
                s.get("amount")));
]]></programlisting>                        
        <itemizedlist>
            <listitem><para>Individual elements of select() are matched up against class constructor</para></listitem>
        </itemizedlist>

            <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Receipt> qdef = cb.createQuery(Receipt.class);

Root<Sale> s = qdef.from(Sale.class);
qdef.select(cb.construct(
                Receipt.class, 
                s.get("id"), 
                s.get("buyerId"),
                s.get("date"),
                s.get("amount")));

TypedQuery<Receipt> query = em.createQuery(qdef);
List<Receipt> results = query.getResultList();
assertTrue("no results", results.size() > 0);
for(Receipt receipt : results) {
    assertNotNull("no receipt", receipt);
    log.info("receipt=" + receipt);
}        
]]></programlisting>                        
    <itemizedlist>
        <listitem><para>Constructed class may be simple POJO -- no need to be an entity</para></listitem>
        <listitem><para>Instances are not managed</para></listitem>
        <listitem><para>Suitable for use as Data Transfer Objects (DTOs)</para></listitem>
    </itemizedlist>

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        sale0_.SALE_ID as col_0_0_,
        sale0_.BUYER_ID as col_1_0_,
        sale0_.date as col_2_0_,
        sale0_.amount as col_3_0_ 
    from
        JPAQL_SALE sale0_
 -receipt=sale=1, customer=1, date=1998-04-10 10:13:35, amount=$100.00
 -receipt=sale=2, customer=2, date=1999-06-11 14:15:10, amount=$150.00
]]></programlisting>                            
        </section>           
    </section>



    <section id="jpa-query-criteria-paths">
       <title>Path Expressions</title>

        <section id="jpa-query-criteria-paths-single">
            <title>Single Element Path Expressions</title>  

            <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select s.id, s.store.name from Sale s]]></programlisting>

            <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
CriteriaQuery<Object[]> qdef = cb.createQuery(Object[].class);

Root<Sale> s = qdef.from(Sale.class);
qdef.select(cb.array(s.get("id"),
                     s.get("store").get("name")));
]]></programlisting>                          
            <itemizedlist>
                <listitem><para>Paths use call chaining to change contexts</para></listitem>
                <listitem><para>Paths that cross entity boundaries automatically add a join to SQL query</para></listitem>
                <listitem><para>Paths -- used this way -- must always express a single element. Must use JOINs for paths involving collections</para></listitem>
                <listitem><para>All paths based off root-level FROM (or JOIN) terms</para></listitem>
            </itemizedlist>
    
            <para>In programming context</para>
<programlisting language="java"><![CDATA[
CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Object[]> qdef = cb.createQuery(Object[].class);

Root<Sale> s = qdef.from(Sale.class);
qdef.select(cb.array(s.get("id"),
                     s.get("store").get("name")));

TypedQuery<Object[]> query = em.createQuery(qdef);
List<Object[]> results = query.getResultList();
assertTrue("no results", results.size() > 0);
for(Object[] result : results) {
    assertEquals("unexpected result length", 2, result.length);
    Long id = (Long) result[0];
    String name = (String) result[1];
    log.info("sale.id=" + id + ", sale.store.name=" + name);
}
]]></programlisting>                        

            <para>Runtime output</para>
<programlisting language=""><![CDATA[
    select
        sale0_.SALE_ID as col_0_0_,
        store1_.name as col_1_0_ 
    from
        JPAQL_SALE sale0_,
        ORMQL_STORE store1_ 
    where
        sale0_.SALE_STORE=store1_.STORE_ID
 -sale.id=1, sale.store.name=Big Al's
 -sale.id=2, sale.store.name=Big Al's]]></programlisting>                            
             <itemizedlist>
                <listitem><para>Automatic INNER JOIN formed between Sale and Store because of the cross-entity path</para></listitem>
            </itemizedlist>
        </section>
        
        <section id="jpa-query-criteria-paths-collections">
            <title>Collection Element Path Expressions</title>
            
            <section id="jpa-query-criteria-paths-collections-innerjoin">
                <title>INNER JOIN Collection Path Expressions</title>

                <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select sale.date from Clerk c JOIN c.sales sale]]></programlisting>

                <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
        CriteriaQuery<Date> qdef = cb.createQuery(Date.class);
        
        Root<Clerk> c = qdef.from(Clerk.class);
        Join<Clerk, Sale> sale = c.join("sales", JoinType.INNER);
        qdef.select(sale.<Date>get("date"));
]]></programlisting>                        
                <itemizedlist>
                    <listitem><para>Collection is brought in as a root term of the query through a JOIN expression</para></listitem>
                    <listitem><para>JOINs will match entities by their defined primary/foreign keys</para></listitem>
                    <listitem><para>INNER JOIN will return only those entities where there is a match</para></listitem>
                    <listitem><para>INNER JOIN is default JoinType when none specified</para></listitem>
                </itemizedlist>

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        sale2_.date as col_0_0_ 
    from
        JPAQL_CLERK clerk0_ 
    inner join
        JPAQL_SALE_CLERK_LINK sales1_ 
            on clerk0_.CLERK_ID=sales1_.CLERK_ID 
    inner join
        JPAQL_SALE sale2_ 
            on sales1_.SALE_ID=sale2_.SALE_ID

 -found result:1998-04-10 10:13:35.0
 -found result:1999-06-11 14:15:10.0
 -found result:1999-06-11 14:15:10.0]]></programlisting>                            
                <itemizedlist>
                    <listitem><para>(Many-to-Many) Link table used during JOIN</para></listitem>
                    <listitem><para>Tables automatically joined on primary keys</para></listitem>
                    <listitem><para>Only Sales sold by our Clerks are returned</para></listitem>
                </itemizedlist>
            </section>  



            <section id="jpa-query-criteria-paths-collections-leftjoin">
                <title>LEFT OUTER JOIN Collection Path Expressions</title>
                
                <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c.id, c.firstName, sale.amount 
from Clerk c 
LEFT JOIN c.sales sale]]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
        CriteriaQuery<Object[]> qdef = cb.createQuery(Object[].class);
        
        Root<Clerk> c = qdef.from(Clerk.class);
        Join<Clerk, Sale> sale = c.join("sales", JoinType.LEFT);
        qdef.select(cb.array(c.get("id"),
                             c.get("firstName"),
                             sale.get("amount")));
]]></programlisting>                        
                <itemizedlist>
                    <listitem><para>LEFT OUTER JOIN will return root with or without related entities</para></listitem>
                </itemizedlist>

                <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        clerk0_.CLERK_ID as col_0_0_,
        clerk0_.FIRST_NAME as col_1_0_,
        sale2_.amount as col_2_0_ 
    from
        JPAQL_CLERK clerk0_ 
    left outer join
        JPAQL_SALE_CLERK_LINK sales1_ 
            on clerk0_.CLERK_ID=sales1_.CLERK_ID 
    left outer join
        JPAQL_SALE sale2_ 
            on sales1_.SALE_ID=sale2_.SALE_ID
 -clerk.id=1, clerk.firstName=Manny, amount=100.00
 -clerk.id=1, clerk.firstName=Manny, amount=150.00
 -clerk.id=2, clerk.firstName=Moe, amount=150.00
 -clerk.id=3, clerk.firstName=Jack, amount=null]]></programlisting>                            
                <itemizedlist>
                    <listitem><para>(Many-to-Many) Link table used during JOIN</para></listitem>
                    <listitem><para>Tables automatically joined on primary keys</para></listitem>
                    <listitem><para>All clerks, with or without a Sale, are returned</para></listitem>
                </itemizedlist>
            </section>  

            <section id="jpa-query-criteria-paths-collections-crossjoin">
                <title>Explicit Collection Path Expressions</title>

                <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[select c from Sale s, Customer c 
where c.id = s.buyerId]]></programlisting>

                <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
        CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
        
        Root<Sale> s = qdef.from(Sale.class);
        Root<Customer> c = qdef.from(Customer.class);
        qdef.select(c)
            .where(cb.equal(c.get("id"), s.get("buyerId")));
]]></programlisting>                        
                <itemizedlist>
                    <listitem><para>Permits JOINs without relationship in entity model</para></listitem>
                </itemizedlist>

                <para>Runtime output</para>
<programlisting language=""><![CDATA[
Hibernate: 
    select
        customer1_.CUSTOMER_ID as CUSTOMER1_3_,
        customer1_.FIRST_NAME as FIRST2_3_,
        customer1_.LAST_NAME as LAST3_3_ 
    from
        JPAQL_SALE sale0_ cross 
    join
        JPAQL_CUSTOMER customer1_ 
    where
        customer1_.CUSTOMER_ID=sale0_.BUYER_ID
        
 -found result:firstName=cat, lastName=inhat
 -found result:firstName=thing, lastName=one]]></programlisting>                            
                <itemizedlist>
                    <listitem><para>Returns all Customers that are identified by a Sale</para></listitem>
                </itemizedlist>
            </section>  


        </section>

    </section>    




    <section id="jpa-query-criteria-">
        <title></title>

        <para>Equivalent JPAQL</para>
<programlisting language=""><![CDATA[
]]></programlisting>

        <para>Criteria API Definition</para>
<programlisting language="java"><![CDATA[
]]></programlisting>                        
  
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language="java"><![CDATA[
]]></programlisting>                        

        <para>Runtime output</para>
<programlisting language=""><![CDATA[
]]></programlisting>                            
    </section>


    <section id="jpa-query-criteria-summary">
       <title>Summary</title>
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>
    </section>    
</chapter>
  
