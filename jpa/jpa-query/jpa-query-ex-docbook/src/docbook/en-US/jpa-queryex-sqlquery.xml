<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-queryex-sqlquery">
    <title>SQL Queries</title>
    <para>In the previous chapter we formed queries based on JPAQL -- which are based on 
        entity and property names and the relationships defined within the entity class
        structure. In a real application, there is also a need to form queries that go 
        outside the boundaries of the entity class model -- but should still be pushed 
        to the database to perform. JPA provides us an escape hatch to execute raw SQL
        queries.</para>
        
    <section id="jpa-queryex-sqlquery-setup">
        <title>Setup</title>
        <para>In this section you will setup a JUnit test case to do work within this 
           chapter.</para>
  
       <orderedlist>
            <listitem><para>Create a JUnit test case in src/test called SQLQueryTest. Have this class
                extend QueryBase. Create an initial test method to verify the setup/teardown works 
                correctly.</para>
<programlisting language="java"><![CDATA[
package myorg.queryex;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.Test;

public class SQLQueryTest extends QueryBase {
    private static final Log log = LogFactory.getLog(SQLQueryTest.class);
    @Test
    public void test() {}
}]]></programlisting>                        
            </listitem>
            <listitem><para>Build the module and run the test case.</para>
<programlisting language=""><![CDATA[
$ mvn clean test -P\!h2db -Ph2srv -Dtest=myorg.queryex.SQLQueryTest
...
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
]]></programlisting>                        
            </listitem>
            <listitem><para>You may remove the sample @Test at this time since we will be adding more below.</para></listitem>
       </orderedlist>
    </section>

        
        
    <section id="jpa-queryex-sqlquery-query">
        <title>Create/Execute SQL Query</title>
        <para>In this section you will create a SQL Query using the entity manager. The 
            SQL Query need not have any relation to do with the actual entity model.
        </para>
  
        <orderedlist>
            <listitem><para>Add the following test method to your JUnit test case. This 
                test case will form a native SQL query, have it executed by the 
                entity manager, and be provided with its results. There is no need
                to open/close SQL Connections, create/close SQL Statements, or work 
                with SQL ResultSets. The results are provided in a List for getResultList()
                or a value in getSingleResult() that we must cast to the appropriate type.</para>
<programlisting language="java"><![CDATA[
@Test
public void testSQLQuery() {
    log.info("*** testSQLQuery ***");       
    @SuppressWarnings("unchecked")
    List<String> titles = em.createNativeQuery(
            "select title from queryex_movie " +
            "order by title ASC").getResultList();
    for (String title : titles) {
        log.debug(title);
    }
    assertEquals("unexpected number of titles", 7, titles.size());
}]]></programlisting>                        
            </listitem>
            <listitem><para>Run the new test method and observe the database query that 
                resulted.</para>
<programlisting language=""><![CDATA[
$ mvn clean test -P\!h2db -Ph2srv -Dtest=myorg.queryex.SQLQueryTest#testSQLQuery
...
 -*** testSQLQuery ***
Hibernate: 
    select
        title 
    from
        queryex_movie 
    order by
        title ASC
 -Animal House
 -Apollo 13
 -Diner
 -Footloose
 -Sleepers
 -Tremors
 -Wag The Dog
...
[INFO] BUILD SUCCESS]]></programlisting>
                <para>Notice the query issued to the database is exactly what 
                    you entered.</para>                        
            </listitem>
        </orderedlist>
        <para>You have completed issuing a native SQL query using the entity manager. 
            Native SQL queries support many of the same features as JPAQL queries</para>
            <itemizedlist>
                <listitem><para>Single/Multiple Results</para></listitem>
                <listitem><para>Parameters</para></listitem>
                <listitem><para>Named Queries</para></listitem>
            </itemizedlist>
        <para>SQL Queries, however, will never return a managed entity. The next
            section shows a nice feature where you can defined a result class
            to encapsulate the values returned from the query.</para>
    </section>

    <section id="jpa-queryex-sqlquery-resultclass">
       <title>SQL Query Result Class</title>
       <para></para>
       <orderedlist>
            <listitem><para></para>
<programlisting language="java"><![CDATA[
]]></programlisting>                        
            </listitem>
            <listitem><para></para>
<programlisting language=""><![CDATA[
]]></programlisting>                        
            </listitem>
       </orderedlist>
    </section>    

    <section id="jpa-queryex-sqlquery-xxx">
       <title>SQL Query Result Class</title>
       <para></para>
       <orderedlist>
            <listitem><para></para>
<programlisting language="java"><![CDATA[
]]></programlisting>                        
            </listitem>
            <listitem><para></para>
<programlisting language=""><![CDATA[
]]></programlisting>                        
            </listitem>
       </orderedlist>
    </section>    


    <section id="jpa-queryex-sqlquery-summary">
       <title>Summary</title>
       <para>In this chapter we
       </para>
    </section>    
</chapter>
