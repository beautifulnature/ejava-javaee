<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-inheritance-singletable">
    <title>Inheritance Strategy: Single Table</title>

    <section id="jpa-inheritance-singletable-overview">
        <title>Single Table Strategy Overview</title>
        <figure>
            <title>Single Table Inheritance Strategy</title>
            <graphic scale="100" fileref="images/jpa-inheritance-singletable.png"/>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Advantages</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Simplest to implement</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Single table to administer</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Performs better than other inheritance strategies</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>No complex joins</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Disadvantages</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Unused fields when sub-types have unique properties</para></listitem>
                    <listitem><para>Sub-type columns must be nullable</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Harder to enforce constraints within database</para></listitem>
                            <listitem><para>SQL "check" constraint can help</para>
<programlisting language=""><![CDATA[
check(TYPE != 'BREAD_TYPE' or (BAKEDON is not null and SLICES is not null))
check(TYPE != 'Soup' or (SOUPTYPE is not null and EXPIRATION is not null)
]]></programlisting>                        
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Not normalized</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>More suitable for hierarchies with sub-types that...</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Differ primarily in behavior only</para></listitem>
                    <listitem><para>Do not have unique data requirements</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="jpa-inheritance-singletable-schema">
        <title>Single Table Example Database Schema</title>

        <figure>
            <title>Single Table Example Database Schema</title>
<programlisting language=""><![CDATA[create table ORMINH_PRODUCT (
    TYPE varchar(32) not null,
    id bigint generated by default as identity,
    cost double not null,
    expiration date,
    soupType varchar(255),
    bakedOn date,
    slices integer,
    primary key (id)
)]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Single table</para></listitem>
            <listitem><para>No joins</para></listitem>
            <listitem><para>Unused columns</para></listitem>
        </itemizedlist>
    </section>

    <section id="jpa-inheritance-singletable-mapping">
        <title>Single Table Example Java Mapping</title>

        <figure>
            <title>Single Table Example Java Mapping</title>
<programlisting language="java"><![CDATA[@Entity @Table(name="ORMINH_PRODUCT")
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name="TYPE", //column in root table indicating type
    discriminatorType=DiscriminatorType.STRING,//data type of column
    length=32) //length of discriminator string
public abstract class Product {
    @Id @GeneratedValue
    private long id;
    private double cost;
...
    @Transient
    public abstract String getName();]]></programlisting>

<programlisting language="java"><![CDATA[
@Entity
@DiscriminatorValue("BREAD_TYPE") //value placed in root table to indicate type
public class Bread extends Product {
    private int slices;
    @Temporal(TemporalType.DATE)
    private Date bakedOn;
...
    @Transient
    public String getName() { return "Bread"; }]]></programlisting>                        
   
<programlisting language="java"><![CDATA[
@Entity
public class Soup extends Product {
    public enum SoupType {
        UNKNOWN("Unknown"),
        CHICKEN_NOODLE("Chicken Noodle"), 
        NEW_ENGLAND_CLAM_CHOWDER("New England Clam Chowder"), 
        TOMATO("Tomato");
        private String text;
        private SoupType(String text) { this.text = text; }
        public String text() { return text; }
    };

    @Enumerated(EnumType.STRING)
    private SoupType type = SoupType.UNKNOWN;
    @Temporal(TemporalType.DATE)
    private Date expiration;
...    
    @Transient
    public String getName() { return type.text() + "Soup"; }
]]></programlisting>                        
                            
        </figure>
    </section>

    <section id="jpa-inheritance-singletable-usage">
        <title>Single Table Example Usage</title>
        <figure>
            <title>Single Table Example Usage</title>
<programlisting language="java"><![CDATA[
]]></programlisting>                        
        </figure>
    </section>

        
        
    <section id="jpa-inheritance-singletable-">
        <title></title>
        <para/>
    </section>
</chapter>
  
