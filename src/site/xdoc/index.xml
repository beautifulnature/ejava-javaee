<?xml version="1.0"?>
<document>
  <properties>
    <title>Enterprise Java (605.784.31) Fall 2012</title>
    <author email="jcstaff@apl.jhu.edu">jcstaff@apl.jhu.edu</author>
  </properties>
  <body>
    <section name="Enterprise Java (605.784.31) Fall 2012">
      <p>
      This is the course home page for the Enterprise Java Course
      (605.784), taught at John's Hopkins University, Engineering
      Programs for Professionals.  
      This site will be populated as the
      semester progresses and topics are addressed. If you are looking
      for a version of the full content for ejava-javaee, refer to
      <a href="http://webdev.apl.jhu.edu/~jcs/legacy-ejava-javaee">
      http://webdev.apl.jhu.edu/~jcs/legacy-ejava-javaee</a>.
      </p>
      <p>
      Legal Disclaimer: The information and opinions expressed within the
      materials located on this site are the personal contributions of
      Jim Stafford. Content published here is not reviewed or approved by
      my employers (The Johns Hopkins University and SRA International)
      before it is posted and does not necessarily represent the views
      and opinions of my employers.
      </p>
      <subsection name="What's New" id="whatsnew">
      <ul>
      <!--
          <li>2012-05-02: Posted Async TODOs</li>
          <li>2012-04-25: Posted JMS materials</li>
          <li>2012-04-17: Posted Security Updates</li>
          <li>2012-04-10: Posted Web Tier TODOs</li>
          <li>2012-03-28: Posted More EJB TODOs</li>
          <li>2012-03-20: Posted EJB/Server-side Materials</li>
          <li>2012-03-14: Posted Final Project 1 TODOs</li>
          <li>2012-03-07: Posted JPA-QL TODOs</li>
          <li>2012-02-29: Posted ORM Relationship updates</li>
          <li>2012-02-21: Posted Core JPA TODOs</li>
          <li>2012-02-15: Posted EntityManager TODOs</li>
          <li>2012-02-06: Posted Data Tier Topics</li>
          -->
          <li>2012-09-04: Posted initial class site</li>
      </ul>
      </subsection>
      <subsection name="Class To Do" id="todo">
      <ul>
      <!--
      <li><ul>
          <li>Setup and deploy your JMS publisher code to eLeague
          session EJB</li>
          <li>Verify that the eLeague JMS JSE Subscriber from last
          week receives published messages from eLeague EJB.</li>
          <li>Setup and implement a JMS MDB in the eClub to receive 
          updates published by eLeague.</li>
          <li>Implement an EJBTimer to perform scheduled work within
          eLeague.</li>
          <li>Test, cleanup, document, and turn in project 3</li> 
      </ul></li>
      <li><ul>
          <li>Finish security configuration, implementation, and testing</li>

          <li>Edit the deploy/hornetq/hornetq-jms.xml file on your JBoss
          server to add your project destinations. Include a copy of this
          file in your project and reference
          to this file in your project README.</li>
          <li>Design your JMS message type(s). Write and test a utility
          class that publishes the messages. This class ideally
          would be placed in with the BLImpl classes. However, if
          it publishes DTO classes, the DTOs may have to get moved in
          with the BO project to satisfy dependency constraints.</li>
          <li>Implement a Java SE Client to receive and log the JMS
          messages. This client can be placed in BLImpl, must use a
          selector, and be launchable by the grader using an Ant script.
          The Ant script can be part of either the BLImpl or RMI Test
          project. See class examples on how write the Ant script.</li>
      </ul></li>
      <li><ul>
          <li>Complete your project 2, finish testing, and turn in.</li>

          <li>Start project 3</li>
          <li>Add user.properties and roles.properties to eLeague project</li>
          <li>Assign EJB to security-domain "other".
          The RMI Tests should fail access at this point.</li>

          <li>Specify required roles to access each EJB method</li>
          <li>Add a java.security.auth.login.config to the RMI Test client</li>
          <li>Add a LoginContext with a CallbackHandler. The RMI Tests should 
          be able to access the EJB methods they are authorized to access.
          You should have at least one test that verifies an unauthorized
          user is refused access.</li>
          <li>Assign WAR to security-domain "java:/jaas/other"</li>
          <li>Add security-constraint elements to the WAR web.xml. The 
          user should be prompted for a login at this point and be able to
          access web pages and EJB methods that they are authorized for
          and be refused access to what they are un-authorized to access</li>
          <li>Eliminate access to any information or option the user does
          not have access to see or use</li>
          <li>Eliminate the passing of userId information when the appropriate
          means is to obtain through the EJB or WARs security context.</li>
      </ul></li>
      <li><ul>
          <li>Go through Web UI parts of the JavaEE exercise.</li>
          <li>Look over Web UI parts of the ejbsessionBank.</li>
          <li>Add a WAR project to eLeague. Add in the controller,
          handler, and supporting JSP implementations.</li>
          <li>Add a WAR project to eClub. Add in the controller,
          handler, and supporting JSP implementations.
          This WAR may obtain functionality implemented by 
          eLeagueEJB. However, it should not directly communicate
          with eLeagueEJB. eClubEJB should act as a facade for 
          all behavior performed on behalf of eClubWAR</li>
      </ul></li>
      <li><ul>
          <li>Finish implementing EJB use cases for end-to-end testing.</li>
          <li>Add @Transaction declarations</li>
          <li>Implement the transaction test requirement. You may
          want to place logic for the transaction test within 
          the TestUtilEJB if you end up with undesirable business
          logic in order to demonstrate the rollback of a transaction.
          Remember, your entities must actually hit the DB and be rolled
          back as part of the transaction. Simply rejecting bad data does
          not satisfy the project transaction rollback demo requirement.</li>
      </ul></li>
      <li><ul>
          <li>Look over the specification for project 2.</li>
          <li>Complete through Part D of the 
          <a href="http://webdev.apl.jhu.edu/~jcs/ejava-javaee/ejava-javaee/course-docs/exercises/javaeeEx.html">
          Java EE exercise</a>.</li>
          <li>Apply the maven, EJB, EAR, RMI Test, and remote interface
          concepts from the exercise to your project 2.</li>
          <li>Design your remote interfaces and DTO classes</li>
          <li>Have an end-to-end thread through eLeagueTest, EJB, and project 1
          operational</li>
          <li>Begin adding the other session beans, remote interfaces,
          business logic integration, and RMI tests for project 2.</li>
      </ul></li>
      <li><ul>
          <li>Finish up project 1 and submit to the grader according
          to the submission criteria.</li>
          <li>Perform any desired post-submission refactoring of your 
          project 1 implementation prior to re-use within project 2.</li>
          <li>Look over the specification for project 2.</li>
          <li>The class examples have been updated to include the 
          server-side modules. Be be sure to have your jboss server 
          running when building prior to building them from this 
          point forward.</li>
          <li>Begin looking at ejbsessionBank example application; 
          which forms an EJB, EAR, RMI Test, as well as a WAR Client.
          These will be key component types within project 2.</li>
          <li>Start working through the Java EE exercise.
          It is highly recommended that you go through this since it
          takes you through many of the use cases and common issues
          related to project 2.</li>
      </ul></li>
      <li><ul>
          <li>Refactor or implement any necessary functionality using
          Queries and EJB-QL.</li>
          <li>Finish adding required business logic for end-to-end 
          testing.</li>
      </ul></li>
      <li><ul>
          <li>Enhance your Business Objects to include JPA relationships.
          Be sure to include proper deletion as a part of your cleanup
          in your test case. This now must take foreign key constraints
          into consideration (e.g., can't delete an Auction when you
          still have related Bids)</li>
          <li>Begin adding required business logic to satisfy the
          specified end-to-end scenario. Add unit tests to verify
          the functionality of the individual business logic methods.</li>
          <li>Implement your ingest capability. Provide some sort of 
          verification that the ingest worked. You don't have to test
          for the entire model ingested, but provide a brief set of 
          sanity checks that compares pre/post and selected information.
          </li>
          <li>Implement your populate() method using your ingest capability.
          Encapsulate it and your resetAll() within a TestUtilImpl class.
          Re-use this class as a part of your unit testing. You may want 
          to reference the following examples when implementing this class.
          <ul>
              <li><a href="https://github.com/jcstaff/ejava-javaee/blob/master/solutions/javaeeEx/partC/javaeeExImpl/src/main/java/myorg/javaeeex/blimpl/TestUtilImpl.java">TestUtilImpl.java</a></li>
              <li><a href="https://github.com/jcstaff/ejava-javaee/blob/master/solutions/javaeeEx/partC/javaeeExImpl/src/main/java/myorg/javaeeex/jpa/DBUtil.java">DBUtil.java</a></li>
          </ul>
          </li>
      </ul></li>
      <li><ul>
          <li>Create the remainder of your Business Objects for the
          project.</li>
          <li>Enhance your testing of the Business Objects to include
          anticipated use cases for the project. Please note that the 
          demo path of the project does not require that you update
          and manipulate your application in all ways. Use the demo
          script as a guide to keeping your project within bounds of
          what can be implemented in the timeframe that you have.</li>
          <li>Mature your JDBC DAO implementations to handle persisting
          the additional classes.</li>
          <li>Declare the Business Objects as Entities and map the classes
          to tables and columns in your database. Your JDBC and JPA
          DAOs should be using the same database tables at this point.
          You can attempt to use the JPA DAO and EntityManager to help
          test the JDBC DAO implementation.  Mark relationships and
          problem fields as @Transient at this point in time.</li>
          <b>
          <li>If you have not yet done so, please submit a copy of
          your project to me for early submission feedback. If you did so last
          week and I pointed out significant issues - please resubmit.
          In addition to the requirements from last week, this week's
          submission project should have BO classed defined that 
          correspond to the entire project. They should be mapped to
          the database in a way that is consistent with your JDBC design.
          Relationships are not part of this submission. 
          </li>
          </b>
      </ul></li>
      <li><ul>
          <li>Go through the EntityManager Exercise</li>
          <li>Look over the class project example implementation under the 
          projects/eSport/eLeague directory</li>
          <li>Add JPA/Hibernate infrastructure to your project DAO module.
          This should at least consist of a successful connection to
          the DB.  You are done with this goal when you have a separate
          JPA JUnit test for the DAO and the setUp() method is able to
          create an EntityManager.</li>
          <li>Define a few business object (BO) classes as being an
          @Entity and identify the primary key property with the @Id
          tag. Make sure you have a default constructor, but leave
          other things default for now. Annotate all collections with
          @Transient annotation. We are not ready to cover relationships
          just yet.</li>

          <li>Design and implement an initial JPA implementation for your DAO(s).</li>

          <li>Design and implement a set of unit tests for your JPA
          DAO(s). Note how the default schema for the @Entities may not
          match up with your DB schema at this point when you run
          the tests.</li>

          <li>Add additional JPA @Annotations to your class project
          business objects to properly map the @Entities to the database
          schema design you created last time (primarily a topic for
          next week)</li>

          <li>Refine your BOs, DB Schema, and DAO based on your understanding 
          to date.</li>

          <li>Move forward with your DB Schema design, BO classes, and JDBC DAO
          implementation if there is extra time. You can turn off your JPA 
          JUnit Test by adding an excludes definition to your surefire 
          configuration. Perform a google search on "surefire excludes" for
          details.</li>

          <b>
          <li>If you have not yet done so, please submit a copy of your
          project to me for early submission feedback. If you did so last
          week and I pointed out significant issues - please resubmit.
          You should have a project structure in place, at least one
          JDBC-based and one JPA-based JUnit DAO test case implemented
          with connectivity thru to the DB.  Concentrate of very few
          BO classes, tables, and DAOs at this point and focus more on
          the end-to-end assembly of the data tier project. This will be
          used as feedback to the class.</li>
          </b>

          <li>Continue to consider all BO, DB Schema, and DAO work as
          draft prototypes at this time to get something end-to-end
          running. You will refine over next several weeks.</li>
          <li>missed class?
             <ul>
                <li>see the 
                <a href="http://webdev.apl.jhu.edu/~jcs/rss/ejava-javaee-rss-2009-spring.xml">
                RSS Feed (http://webdev.apl.jhu.edu/~jcs/rss/ejava-javaee-rss-2009-spring.xml)</a> 
                for coverage of JPA materials</li>
             </ul>
          </li>
      </ul></li>
      <li><ul>
          <li>Go through the JDBC Exercise</li>
          <li>Look over the class project and post any questions.</li>
          <li>Establish your project directory structure and perform a build from the root.</li>
          <li>Design and implement a few business objects for your class project.</li>
          <li>Design and implement a set of unit tests for your business objects.</li>
          <li>Design and implement the test infrastructure for your
          DAO. This should at least consist of a successful connection to the DB.</li>
          <li>Design a draft DB schema for your implemented business objects. This should go in 
          your DAO project.</li>
          <li>Implement a way to create your schema in the DB as a part of your DAO testing.</li>
          <li>Design and implement an initial DAO interface and JDBC implementation for your business objects.
          You only need a create() method for the project.</li>
          <li>Consider all BO, DB Schema, and DAO work as draft prototypes at this time to get
          something end-to-end running. You will refine over next several weeks.</li>
          <b>
          <li>Send me a copy of your project, in a stable, known state,
          sometime this week; ideally by early Monday evening. You should have
          a project structure in place, at least one JDBC-based 
          JUnit DAO test case implemented with connectivity thru to the DB. 
          Concentrate of very few BO classes, tables, and DAOs at this point and 
          focus more on the end-to-end assembly of the data tier project for JDBC. 
          This will be used as feedback to the class.</li>
          </b>
      </ul></li>
      -->
      <li><ul>
          <li>register for newsgroup and setup e-mail handling (all
          e-mails will have ejava_class in subject)</li>
          <li>post at least 1 test message to newsgroup</li>
          <li>setup development environment by going through exercises 0 and 1</li>
          <li>post your weekly newsgroup contribution based on development environment setup</li>
      </ul></li>
      </ul>
      </subsection>

      <subsection name="Things you should have finished!" id="completed">
      <ul>
      <li><ul>
          <li>had a nice break!</li>
      </ul></li>
      </ul>
      </subsection>
    </section>
  </body>
</document>
