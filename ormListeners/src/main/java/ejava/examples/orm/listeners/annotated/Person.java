package ejava.examples.orm.listeners.annotated;

import javax.persistence.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class provides an example of an entity that owns a OneToOne
 * uni-directional relationship joined by a @GeneratedValue primary
 * key. Since the primary key is generated by the provider, we cannot
 * assign a value to the associated object until we have been persisted.
 * We will use an Entity Callbacks to assign the associated Residence object
 * the owners primary key when assigned.
 *  
 * @author jcstaff
 *
 */
@Entity @Table(name="ORMLISTEN_PERSON")
@EntityListeners(Listener.class)
public class Person {
    private static final Log log = LogFactory.getLog(Person.class);
    
    private long id;
    private String name;
    private Residence residence;
   
    protected Person() {}
    public Person(String name) {
        this.name = name;
    }
    public Person(long id, String name) {
        this.id = id;
        this.name = name;
    }
    
    @Id 
    //@GeneratedValue(strategy=GenerationType.SEQUENCE)
    //@GeneratedValue(strategy=GenerationType.TABLE) 
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    public long getId() {
        return id;
    }
    protected void setId(long id) {
        log.debug("Person.setId() called with:" + id);
        this.id = id;
        if (residence != null && residence.getId() == 0) { 
            residence.setId(id); 
        }
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    
    @OneToOne(optional=true, cascade=CascadeType.ALL)
    @PrimaryKeyJoinColumn
    public Residence getResidence() {
        return residence;
    }
    public void setResidence(Residence residence) {        
        this.residence = residence;
    }
    
    @PrePersist public void prePersist() {
        log.debug("prePersist event:" + this.toString());
    }
    @PostPersist public void postPersist() {
        log.debug("postPersist event:" + this.toString());
    }
    @PostLoad public void postLoad() {
        log.debug("postLoad event:" + this.toString());
    }
    @PreUpdate public void preUpdate() {
        log.debug("preUpdate event:" + this.toString());
    }
    @PostUpdate public void postUpdate() {
        log.debug("postUpdate event:" + this.toString());
    }
    @PreRemove public void preRemove() {
        log.debug("preRemove event:" + this.toString());
    }
    @PostRemove public void postRemove() {
        log.debug("postRemove event:" + this.toString());
    }
    
    public String toString() {
        StringBuilder text = new StringBuilder();
        text.append("person id=" + id);
        text.append(", name=" + name);
        text.append(", residence=" + residence);
        return text.toString();
    }
}
