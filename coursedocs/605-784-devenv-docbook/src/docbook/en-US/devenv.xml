<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

    
  <chapter id="jboss-setup">
    <title>JBoss Setup</title>    
    <para/>
    <section id="install-jboss">
        <title>Download and Install JBoss Application Server 7</title>
        <orderedlist>
            <listitem><para>Download JBoss AS 7.1.1.Final
                <ulink url="http://www.jboss.org/jbossas/downloads">http://www.jboss.org/jbossas/downloads</ulink></para>
            </listitem>
            <listitem><para>Install JBoss AS into a directory that does not
            have any spaces in its path.</para>
                <programlisting><![CDATA[
$ unzip ~/Downloads/jboss-as-7.1.1.Final.zip                
                
$ ls jboss-as-7.1.1.Final/
]]></programlisting>                        
            </listitem>
            <listitem><para>Test the installation by starting the default
            configuration installation.</para>
                <programlisting><![CDATA[
$ jboss-as-7.1.1.Final/bin/bin/standalone.sh
user@ubuntu:/opt$ ./jboss-as-7.1.1.Final/bin/standalone.sh 
=========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: /opt/jboss-as-7.1.1.Final

  JAVA: java

  JAVA_OPTS:  -server -XX:+TieredCompilation -Xms64m -Xmx512m -XX:MaxPermSize=256m -Djava.net.preferIPv4Stack=true -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true -Djboss.server.default.config=standalone.xml

=========================================================================

22:41:07,659 INFO  [org.jboss.modules] JBoss Modules version 1.1.1.GA
22:41:08,223 INFO  [org.jboss.msc] JBoss MSC version 1.0.2.GA
...
22:41:49,257 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on http://127.0.0.1:9990
22:41:49,258 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: JBoss AS 7.1.1.Final "Brontes" 
started in 7908ms - Started 133 of 208 services (74 services are passive or on-demand)
]]></programlisting>                        
            </listitem>
            <listitem><para>Verify you can access the server</para>
                <itemizedlist>
                    <listitem><para>Main Page:<ulink url="http://localhost:8080">http://localhost:8080</ulink></para></listitem>
                    <listitem><para>Admin Page:<ulink url="http://localhost:9990/console">http://localhost:9990/console</ulink>
                    This will fail until the admin account is added.</para></listitem>
                </itemizedlist>
            </listitem>
        </orderedlist>
    </section>
    
    <section id="configure-jboss-server">
        <title>Configure JBoss Server</title>
        <orderedlist>
            <listitem><para>Shutdown the server using Control-C</para></listitem>
            <listitem><para>Make a copy of the standalone.xml and use it as 
                a backup</para>
                <programlisting><![CDATA[
$ cp jboss-as-7.1.1.Final/standalone/configuration/standalone.xml jboss-as-7.1.1.Final/standalone/configuration/standalone-original.xml
]]></programlisting>
            <note>
                <para>The instructions state to backup the original and edit the 
                default server. We could have also chosen to make a copy of the 
                default server and edit one by a new name. In the later case,
                we would need to add "-c copyof-standalone.xml" to the startup
                command to point to the non-default server.</para>
            </note>                                    
            </listitem>
            <listitem><para>Add a logger for the class examples so the 
                server prints debug messages to the logs</para>
                <programlisting><![CDATA[
...
            </logger>
            <logger category="ejava">
                <level name="DEBUG"/>
            </logger>
            <root-logger>
...
]]></programlisting>
            </listitem>
        </orderedlist>        
    </section>
    
    <section id="add-jboss-admin">
        <title>Add JBoss Admin Account</title>
        <orderedlist>
            <listitem><para>Use the batch script to add an admin user to 
                the system.</para>
                <programlisting><![CDATA[
user@ubuntu:/opt$ ./jboss-as-7.1.1.Final/bin/add-user.sh 

What type of user do you wish to add? 
 a) Management User (mgmt-users.properties) 
 b) Application User (application-users.properties)
(a): a

Enter the details of the new user to add.
Realm (ManagementRealm) : 
Username : admin
Password : 
Re-enter Password : 
The username 'admin' is easy to guess
Are you sure you want to add user 'admin' yes/no? yes
About to add user 'admin' for realm 'ManagementRealm'
Is this correct yes/no? yes
Added user 'admin' to file '/opt/jboss-as-7.1.1.Final/standalone/configuration/mgmt-users.properties'
Added user 'admin' to file '/opt/jboss-as-7.1.1.Final/domain/configuration/mgmt-users.properties'
]]></programlisting>                        
            </listitem>
            <listitem><para>Retry logging into the Admin Application
                <ulink url="http://localhost:9990/console">http://localhost:9990/console</ulink>
            </para></listitem>
        </orderedlist>
    </section>
    
    <section id="enable-jboss-debug">
        <title>Enable JBoss Remote Debugging</title>
        <para>Prepare your server for remote debugging for later.</para>
        <orderedlist>
            <listitem><para>Uncomment the following line in either 
            bin/standalone.conf (Linux) or bin/standalone.conf.bat</para>
                <programlisting><![CDATA[
# Sample JPDA settings for remote socket debugging
JAVA_OPTS="$JAVA_OPTS -Xrunjdwp:transport=dt_socket,address=8989,server=y,suspend=n"
]]></programlisting>                        
            </listitem>
            <listitem><para>Restart the server and notice the additional listen
                output. Use control-C to stop the server.</para>
                <programlisting><![CDATA[
$ ./jboss-as-7.1.1.Final/bin/standalone.sh 
=========================================================================
...

Listening for transport dt_socket at address: 8787
23:01:50,460 INFO  [org.jboss.modules] JBoss Modules version 1.1.1.GA
23:01:51,688 INFO  [org.jboss.msc] JBoss MSC version 1.0.2.GA
]]></programlisting>                        
            </listitem>
        </orderedlist>
    </section>
    
    <section id="define-jboss-maven-props">
        <title>Define JBoss Maven Properties in settings.xml</title>
        <orderedlist>
            <listitem><para>Add the following profile and property definitions
                to your HOME/.m2/settings.xml</para>
                <programlisting><![CDATA[
        <profile>
            <id>jboss7</id>
            <properties>
                <jboss7.host>localhost</jboss7.host>
                <jboss7.servlet.port>8080</jboss7.servlet.port>
                <jboss7.mgmt.host>${jboss7.host}</jboss7.mgmt.host>
                <jboss7.home>/opt/jboss-as-7.1.1.Final</jboss7.home>
            </properties>
        </profile>
        ...
    <activeProfiles>
...
        <activeProfile>jboss7</activeProfile>
    </activeProfiles>
</settings>
]]></programlisting>                        
            </listitem>
        </orderedlist>
    </section>
    
    <section id="update-jboss-resteasy-version">
        <title>Update JBoss RESTEasy Version to Current</title>
        <itemizedlist>
            <listitem><para>JBoss 7 dependencies are packaged in the JBOSS_HOME/modules directory</para></listitem>
            <listitem><para>JBoss 7.x is shipped with a certain version of RESTEasy</para></listitem>
            <listitem><para>RESTEasy and other JBoss components/libraries continue to make bug fixes and evolve -- many times faster than JBoss can re-release</para></listitem>
            <listitem><para>Replace the 2.3.2.Final versions of the RESTEasy modules with the current release</para>
            <orderedlist>
                <listitem><para>Confirm you make a local copy of ejava-ws/issues/jboss-modules built</para>
<programlisting language=""><![CDATA[
$ cd issues/jboss-modules/
$ mvn clean install
...
[INFO] Installing /home/user/proj/ejava-ws/issues/jboss-modules/target/jboss-modules-1.0-SNAPSHOT-archive.zip to /home/user/.m2/repository/ejava/issues/jboss-modules/1.0-SNAPSHOT/jboss-modules-1.0-SNAPSHOT-archive.zip
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
]]></programlisting>        
                </listitem>
                <listitem><para>Shutdown your JBoss server</para></listitem>
                <listitem><para>Backup the installed version of RESTEasy</para>
<programlisting language=""><![CDATA[
$ cd /opt/jboss-as-7.1.1.Final
$ zip -r resteasy-modules-2.3.2.Final.zip modules/org/jboss/resteasy/
]]></programlisting>        
                </listitem>
                <listitem><para>Replace the current version of RESTEasy with the version we built</para>
<programlisting language=""><![CDATA[
$ rm -rf modules/org/jboss/resteasy/
unzip /home/user/.m2/repository/ejava/issues/jboss-modules/1.0-SNAPSHOT/jboss-modules-1.0-SNAPSHOT-archive.zip
]]></programlisting>        

<programlisting language=""><![CDATA[
modules/org/jboss/resteasy/
|-- resteasy-atom-provider
|   `-- main
|       |-- module.xml
|       `-- resteasy-atom-provider-2.3.3.Final.jar
|-- resteasy-cdi
|   `-- main
|       |-- module.xml
|       `-- resteasy-cdi-2.3.3.Final.jar
...
]]></programlisting>        
                </listitem>
                <listitem><para>Restart JBoss</para></listitem>
            </orderedlist>           
            </listitem>
        </itemizedlist>                   
    </section>
  </chapter>

  <chapter id="eclipse-setup">
    <title>Eclipse Setup</title>
    <para/>
    
    <section id="install-eclipse">
        <title>Download and Install Eclipse Indigo 3.7.x</title>
        <para/>
        <orderedlist>
            <listitem><para>Download Eclipse IDE for JavaEE Developers <ulink url="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</ulink></para></listitem>
            <listitem><para>Unzip the downloaded archive.</para>
                <programlisting><![CDATA[
$ tar xzf ~/Downloads/eclipse-jee-indigo-SR2-linux-gtk.tar.gz 

$ ls eclipse
about_files  artifacts.xml  dropins  eclipse.ini   features  libcairo-swt.so  p2       readme
about.html   configuration  eclipse  epl-v10.html  icon.xpm  notice.html      plugins
]]></programlisting>                        
            </listitem>
            <listitem><para>Create a shortcut for starting Eclipse</para></listitem>
            <listitem><para>Start Eclipse</para></listitem>
        </orderedlist>
    </section>
    
    <section id="setup-m2e">
        <title>Setup Maven Eclipse Integration (m2e)</title>
        <para>m2e is a plugin installed into Eclipse that configures Eclipse
        based on the Maven pom.xml configuration. When adjusting your builds,
        you should always define changes within the Maven pom.xml and rely on
        m2e to translate that into Eclipse. Any changes added directly to 
        Eclipse will not be seen by the command-line build.</para>
        <orderedlist>
            <listitem><para><code>Help-&gt;Install New Software->Add...</code></para></listitem>
            <listitem><para>Enter</para>
                <itemizedlist>
                    <listitem><para>Name: m2e</para></listitem>
                    <listitem><para>URL: <ulink url="http://download.eclipse.org/technology/m2e/releases">http://download.eclipse.org/technology/m2e/releases</ulink></para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Complete the installation steps for Maven Integration for Eclipse</para></listitem>
            <listitem><para>Register your Maven installation with m2e</para>
                <orderedlist>
                    <listitem><para><code>Window-&gt;Preferences-&gt;Maven-&gt;Installations-&gt;Add...</code></para></listitem>
                    <listitem><para>Navigate and select the MAVEN_HOME directory installed earlier</para></listitem>
                    <listitem><para>Re-select the internal Maven instance as the default</para></listitem>
                </orderedlist>
            </listitem>
            <listitem><para>Add the Java Package Explorer to the JavaEE Perspective.
                    I find this easier to work with than the Project 
                    Explorer used by default in the JavaEE perspective.</para>
                <orderedlist>
                    <listitem><para>Select Window-&gt;Show View-&gt;Other-&gt;Java-&gt;Package Explorer.</para></listitem>
                    <listitem><para>Drag the Package Explorer to the panel with the Project Explorer</para></listitem>
                    <listitem><para>Select Top Level Elements-&gt;Working Sets from the down-facing triangle on the Package Explorer.</para></listitem>
                    <listitem><para>Create a New Java Working Set and call it "gettingStarted"</para></listitem>
                    <listitem><para>Press OK</para></listitem>
                </orderedlist>
            </listitem>
            <listitem><para>Import the <code>exercises/simple-bank-war6</code> Exercise into Eclipse as a Maven Project</para>
                <orderedlist>
                    <listitem><para>Right click on "gettingStarted" in the Package 
                        Explorer and select Import...-&gt;Maven-&gt;Existing Maven Projects</para></listitem>
                    <listitem><para>Browse to the project area where you performed 
                        the Git checkout earlier and select the gettingStarted folder.</para></listitem>
                    <listitem><para>Select Next to have the current project
                        added to the selected working set.</para>
                    <note>
                        <para>There will be an extra panel that appears the 
                        first time you import a project with a new maven plugin.
                        Allow Eclipse to setup any that it knows about, discover 
                        ones that may be new, or resolve later for those that
                        it cannot find. There will be unsigned content warnings
                        for most of the plugins. Eclipse will want to restart
                        after installing any new plugins.</para>
                    </note>
                    </listitem>
                    <listitem><para>Verify your JBoss Server is running</para></listitem>
                    <listitem><para>Build and test the application using 
                       Run As-&gt;Maven Install by right clicking on the 
                       "gettingStarted" project folder.</para></listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
    
    
    <section id="setup-egit">
        <title>Setup EGit Eclipse Team Provider</title>
        <para>You can use the command line Git to functionally clone the 
            remote repository and update your local copy. However, having
            Git integrated into Eclipse allows the plugin to make Eclipse
            transition easier between one checked out branch to another or 
            correctly react to an updated branch. To do this -- install the 
            EGit plugin.</para>
            <orderedlist>
                <listitem><para>Open the Eclipse Marketplace panel using 
                    <code>Help-&gt;Eclipse Marketplace</code></para>
                </listitem>
                <listitem><para>Type EGit into the seach field and press Go</para></listitem>
                <listitem><para>Click Install for the <code>EGit - Git Team Provider</code>.
                    This will end up selecting both EGit and JGit. JGit is the 
                    underlying pure Java interface for Git. EGit is the portion
                    that integrates the capability into Eclipse.</para></listitem>
                <listitem><para>Complete the installation process</para></listitem>
                <listitem><para>Right click on the <code>simple-bank-war6</code>
                   project imported earlier and select <code>Team-&gt;Share Project...-&gt;Git-&gt;Use of create repository in parent folder of project-&gt;Finish</code></para></listitem>
                <listitem><para><code>[(branch-name)]</code> should not be displayed 
                    to the right of the project name</para></listitem>
            </orderedlist>
    </section>
    
    <section id="setup-jbosstools">
        <title>Setup JBoss Eclipse Integration</title>
        <para>Add the following repository to your Eclipse instance and
           install the plugin</para>
        <orderedlist>
            <listitem><para><code>Help-&gt;Install New Software->Add...</code></para></listitem>
            <listitem><para>Enter</para>
                <itemizedlist>
                    <listitem><para>Name: jboss-tools</para></listitem>
                    <listitem><para>URL: <ulink url="http://download.jboss.org/jbosstools/updates/development/indigo/">http://download.jboss.org/jbosstools/updates/development/indigo/</ulink></para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Complete the installation steps for JBoss Tools. There
                are a lot of tools in the repository. Not all of them are
                needed for class and some do not yet seem functional or obvious 
                how to use them without more investigation. You can opt for 
                installing all or choose the following minimal set.</para>
                <itemizedlist>
                    <listitem><para>JBoss Web and JavaEE Development</para>
                        <itemizedlist>
                            <listitem><para>JBoss AS Tools</para></listitem>
                            <listitem><para>JBoss JAX-RS Tools</para></listitem>
                            <listitem><para>JBoss WebServices Tools</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
                <note>
                    <para>You will receive a warning about the content within the 
                    plugin being unsigned.</para>
                </note>
            </listitem>
            <listitem><para>Define a Server Instance for JBoss AS 7</para>
                <orderedlist>
                    <listitem><para>Open the JavaEE Perspective</para></listitem>
                    <listitem><para>Select "new server wizard..." in the Servers panel</para></listitem>
                    <listitem><para>Select JBossAS 7.1</para></listitem>
                    <listitem><para>Set HOME to your jboss-as-7.1.1.Final directory
                       using the Browse button on the next panel</para></listitem>
                    <listitem><para>Name the server "standalone" and leave the 
                       to match the default "standalone.xml" configuration file.</para></listitem>
                    <listitem><para>Set the JRE to the JDK instance you installed earlier</para></listitem>
                    <listitem><para>Review options. Note that I generally start my 
                        server externally so that standard output does not compete 
                        with my other actions within Eclipse. However, there are
                        pros and cons to both methods and I will start you with
                        internally launched here.</para></listitem>
                    <listitem><para>Start the server by right clicking on it
                        and selecting Start</para></listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
    
    <section id="setup-tcpmonitor">
        <title>Setup TCP/IP Monitor</title>
        <para>TCP/IP Monitor is an active web proxy tool that you insert between 
        your client and server. One end of the communication usually remains
        unchanged while the other gets adjusted to account for the extra
        hop in communication. This is a functional replacement for the legacy
        tcpmon tool and should come with Eclipse.</para>
        <orderedlist>
            <listitem><para>Open up TCP/IP Monitor using
                <code>Window-&gt;Show View-&gt;Other...-&gt;Debug-&gt;TCP/IP Monitor</code> 
            </para>
            </listitem>
        </orderedlist>
    </section>
    
    <section id="setup-tcpdump">
        <title>Setup tcpdump</title>
        <subtitle>(Linux Users Only)</subtitle>
        <para>tcpdump is a passive network monitoring tool that, with root
        access, can listen for TCP packets exchanged between client and server.
        The nice thing about using tcpdump is that it requires no change of 
        the client or server. If you have a linux system and root access to
        that system, I would recommend you set this up. It is not technically
        an Eclipse plugin, but I find it helpful to run it within an Eclipse
        console.</para>
        <note>
            <para>Windows users -- if you locate a tcpdump equivalent for
               windows please let me know. Until then you can functionally
               use the active tcpmon proxy.</para>
        </note>
        <orderedlist>
            <listitem><para><code>Open up a terminal within Eclipse using
            <code>Window-&gt;Show View-&gt;Other-&gt;Terminal-&gt;Terminal</code></code></para></listitem>
            <listitem><para>Click the Connect icon on the top right of the terminal panel</para></listitem>
            <listitem><para>SSH to localhost</para></listitem>
            <listitem><para>Run tcpdump at the shell prompt</para>
                <programlisting><![CDATA[
$ sudo tcpdump -A -s0 -i lo port 8080
[sudo] password for user: 
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes
]]></programlisting>                        
            </listitem>
            <listitem><para>If you get a "port 22: Connection refused" error
               verify that you have openssh-server installed.</para>
                <programlisting><![CDATA[
$ sudo apt-get install openssh-server
]]></programlisting>                        
            </listitem>
            <listitem><para>I created the following script in my PATH so
                that I only had to remember the port# when launching the
                tcpdump utility.</para>
                <programlisting><![CDATA[
$ cat /home/user/bin/tcp-dump 
#!/bin/sh

port=8080
if [ $# -eq 1 ]; then
    port=$1
fi
cmd="sudo tcpdump -A -s0 -i lo port $port"
echo $cmd
$cmd

$ sudo ~/bin/tcp-dump 8080
sudo tcpdump -A -s0 -i lo port 8080
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes
]]></programlisting>                        
            </listitem>
            
        </orderedlist>
    </section>
    
    <section id="setup-eclipse-targets">
        <title>Setup Eclipse Run Configurations</title>
        <para>You will perform many development scenarios within Eclipse
           and will benefit greatly by having a few run configurations 
           setup and readily accessible. We will start with a few key items
           here and add more later.</para>
           
         <section id="add-mvn-deploy">
            <title>Deploy to JBoss Eclipse Shortcut</title>
            <para>This configuration is useful to deploy your entire Maven
                application prior to running JUnit tests. It is very similar 
                to the "Run on Server" capability but it leverages the 
                Maven build cycle to complete.</para>
            <orderedlist>
                <listitem><para>Select the "simple-bank-war6" project in the 
                    Package Explorer panel or by clicking on any file within 
                    that project</para>
                </listitem>
                <listitem><para>Open the configuration management pop-up by 
                selecting 
                <code>RunAs-&gt;Run Configurations...-&gt;</code></para></listitem>
                <listitem><para>Double click <code>Maven Build</code> to create
                    a new Launch Configuration</para></listitem>
                <listitem><para>Fill in the form and press Run</para>
                    <itemizedlist>
                        <listitem><para>Name: mvn deploy</para></listitem>
                        <listitem><para>Base Directory:${project_loc}</para></listitem>
                        <listitem><para>Goals: clean pre-integration-test</para></listitem>
                        <listitem><para>Parameter: skipTests=true</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>You should observe the following</para>
                <programlisting><![CDATA[
...
[INFO] --- cargo-maven2-plugin:1.2.0:redeploy (cargo-deploy) @ simple-bank-war6 ---
[INFO] [DeployerRedeployMojo] Resolved container artifact org.codehaus.cargo:cargo-core-container-jboss:jar:1.2.0 for container jboss71x
Apr 24, 2012 12:54:43 AM org.xnio.Xnio <clinit>
INFO: XNIO Version 3.0.3.GA
Apr 24, 2012 12:54:43 AM org.xnio.nio.NioXnio <clinit>
INFO: XNIO NIO Implementation Version 3.0.3.GA
Apr 24, 2012 12:54:43 AM org.jboss.remoting3.EndpointImpl <clinit>
INFO: JBoss Remoting version 3.2.2.GA
[INFO] [Boss7xRemoteDeployer] The undeployment phase of the redeploy action has failed: org.codehaus.cargo.util.CargoException: Cannot undeploy deployable org.codehaus.cargo.container.jboss.deployable.JBossWAR[simple-bank-war6.war]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 10.416s                
]]></programlisting>                        
                </listitem>
                <listitem><para>With the application deployed to JBoss run all
                   of the tests directly within Eclipse/JUnit by right clicking
                   on the project and selecting RunAs-&gt;JUnit Test. All 
                   tests should run and pass. You can open up the results and
                   execute any single testMethod individually.</para>
                <figure>
                    <title>JUnit Results</title>
                    <graphic scalefit="1" fileref="images/junit-simple-bank.png"/>
                </figure>        
                </listitem>
                <listitem><para>If you had tcpdump running you should have also 
                    seen activity on the interface</para>
                <programlisting lang="xml"><![CDATA[
PUT /simple-bank-war6/bank HTTP/1.1
Content-Type: application/xml
Content-Length: 232
Host: localhost:8080
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:bank xmlns:ns2="http://dmv.ejava.info">
    <ns2:link>
        <rel>self</rel>
    </ns2:link>
    <name>Forbes Bank</name>
    <totalAssets>0.0</totalAssets>
</ns2:bank>

...
204 No Content
Server: Apache-Coyote/1.1
Date: Tue, 24 Apr 2012 08:12:23 GMT
]]></programlisting>                        
                </listitem>
            </orderedlist>
         </section>
    </section>
  </chapter>

<!-- 
  <chapter id="setup-chrome">
    <title>Setup Chrome Browser</title>
    
    <section id="install-chrome">
        <title>Download and Install the Chrome Browser</title>
        <itemizedlist>
            <listitem><para>Linux Users: Install Chrome from your package manager.</para></listitem>
            <listitem><para>Windows Users: Download Chrome Browser
                <ulink url="http://www.google.com/chrome">http://www.google.com/chrome</ulink>
                and use the installer</para>
            </listitem>
        </itemizedlist>
    </section>
    
    <section id="install-postman">
        <title>Install Postman REST Client</title>
        <para>This is an optional REST Client tool. However it requires you to
        login with your google credentials.</para>
        <orderedlist>
            <listitem><para>Navigate to the 
            <ulink url="https://chrome.google.com/webstore/detail/fdmmgilgnpjigdojojpjoooidkmcomcm">Postman REST Client</ulink>
            market site within the Chrome Browser.</para></listitem>
            <listitem><para>Install the plugin</para></listitem>
        </orderedlist>
    </section>
  </chapter>
 -->  
</book>
