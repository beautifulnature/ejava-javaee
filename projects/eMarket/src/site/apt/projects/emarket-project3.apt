Project3: eMarket Secure and Asynchronous N-Tier Application

    2013-01-27 - DRAFT

* Goals

    * Secure access to EJB and Web applications

    * Provide for asynchronous processing.

* Objectives

    * Re-use the eSales and eBidbot implementations from projects 1 and 2.

    * Define users and roles for both applications.

    * Define access controls and implement authentication mechanisms for 
    both applications.

    * Implement a publish/subscribe capability between the eSales, eBidbot
    and stand-alone client applications.

    * Trigger certain behaviors based on timers. 

* Technical Overview

    The project will build on the core implementation from Projects 1 and
    2. We will mostly extend existing projects with security and
    asynchronous logic. 

    Java EE defines authentication and authorization to be independent
    of the overall API and capability. JBoss and other application
    servers provide simple, default mechanisms that are easy to
    demonstrate and more sophisticated mechanisms that are realistic for
    deployments. Switching between the two requires no change to 
    JavaEE-compliant application code.
    We will use the simple, default/"other" security-domain defined
    within the standard JBoss installation. This uses the RealmUsersRoles
    login-module -- which is configured by two property files and
    pre-populated by the class server files installed at the start 
    of the semester during development environment setup:

*----------+-----------------+
| <<File>> | <<Description>> |
*----------+-----------------+
${jboss.server.config.dir}/application-users.properties | defines username=password lines that list the login username and hashed password
*-------+--------+
${jboss.server.config.dir}/application-roles.properties | defines username=role1,role2 lines that list the login username and assigned roles
*-------+--------+

    We are going to have a couple types of users. Some of the users will
    have zero, one, or more of these roles. Because of the static nature of
    our authentication, all users will have a login configured before
    the application is even deployed to the server.

*----------+-----------------+
| <<Role>> | <<Description>> |
*----------+-----------------+
(anonymous) | these users can view auctions and create an account.
*-------+--------+
esales-admin | these users will be able to perform management and test functions on eSales.
*-------+--------+
esales-user | these users can create and auction, and bid on auctions. This role is also required to subscribe to JMS auction events.
*-------+--------+
esales-sys | role required to perform internal auction actions like JMS publishing.
*-------+--------+
esales-trusted | these users can bid on auctions on behalf of a specified user.
*-------+--------+
ebidbot-admin | these users will be able to perform management and test functions on eBidbot.
*-------+--------+
ebidbot-user | these users can and manage their orders.
*-------+--------+

    If a user has a login for one application, they will use the same
    account to access the other application (e.g., user3 will have both
    esales-user and ebidbot-user roles).

*-----------+------------+
| <<Login>> | <<Roles>>  |
*-----------+------------+
known | (no roles)
*-------+--------+
admin1 | esales-admin
*-------+--------+
admin2 | ebidbot-admin
*-------+--------+
syssales1 | esales-sys
*-------+--------+
sysbidbot1 | esales-trusted
*-------+--------+
user1 | esales-user
*-------+--------+
user2 | esales-user
*-------+--------+
user3 | esales-user,ebidbot-user
*-------+--------+

    Some actions are open to any users; authenticated or not.
    Authentication will be performed using a JNDI login.  All users
    will have a password of "password".

    eBidbot will run-as an esales-trusted user and pass the userId
    for the eSales bidder with the placed bid.

        [Note:] To clarify, your application will have a static set of logins
        and will ingest a set of accounts. A user with a login and no account
        can login, but won't be able to do anything meaningful. A user with an
        account and no login won't be able to access the system. Normally the
        login would be created at the same time as the account.  Except for
        your JBoss configuration and your "Create Account" logic, no other
        part of your project should be aware of this tradeoff made for class
        project simplicity.

        []

    For some asynchronous activity, we will implement an Auction
    Topic with eSales that will be used to provide updates to auction
    information.  eBidbot will listen to this topic using a Message Driven
    Bean to keep orders up to date and to specifically know when they
    are closed.  A stand-alone client will also be used to subscribe to
    auction events. The topic(s) will be pre-defined in your application
    server along with users and roles. However, you will have to design
    the type, structure, and payload of the messages on the topic(s).

    eSales and eBidbot will use EJB Timers to help perform periodic
    business logic, like checking for completed auctions or making bids.

* Technical Details

    [[1]] Provide all functionality from Projects 1 and 2.

===

    [[1]] Enhance eSales with access restrictions.

        * Assign the EJB to the "other" security domain.

        * Restrict access to the EJB methods seller/buyer account-specific
        methods to to users within the esales role. Also restrict them to
        only working with their own account and derived the account name
        from their login.

        * Allow any user to perform read operations.

        * Restrict any administrative functions to the esales-admin role.

===

    [[1]] Extend your existing RMI Test project and RMI client(s) to
    address new authentication requirements.

        * Add a valid login to your existing tests to re-enable them under
        the newly secured environment.

        * Add a new unit test that verifies the access controls of the
        protected and open methods. This means that -- after fixing access
        issues in the previous bullet -- you purposely attempt to violate
        access restrictioons from a new JUnit test to show a test of 
        access control.
    
===

    [[1]] Enhance eBidbot with access restrictions and the ability
    to log into eSales.

        * Assign the EJB to the "other" security domain.

        * Restrict access to the OrderMgmt to users in the ebidbot role
        once they get beyond creating an account.

        * run-as an esales-trusted user when making bids on behalf of 
        a user. This may require the use of a "helper" EJB to encapsulate
        the scope of the run-as role/identity.

===

    [[1]] Extend your existing RMI Test project and RMI client(s) to
    address new authentication requirements.

        * Add a valid login to your existing tests to re-enable them under
        the new secure environment.

        * Add a new unit test that verifies the access controls of the
        protected and open methods. Same comment as above -- after
        fixing proper access to Mayberry you should have at least
        one test that demonstrates how the application is preventing
        unauthorized access.

===

    [[1]] Enhance eSalesWAR with access restrictions.

        * Assign the WAR to the "other" security domain.

        * Restrict access beyond the main page to users with
        the esales role.  You may use FORM or BASIC authentication.
        (I suggest FORM for easy logout/login as new user).

        * Permit only users to only ask the EJB tier for account
        information that is associated with their login. For example,
        an esales-user/non esales-trusted user should only be allowed
        to enter a bid for the account they authenticated against.

===

[../images/emarket-async.jpg] eMarket Async

    [[1]] Extend your eSales EJB implementations to publish changes to 
    Auctions.

        * Use the emarket-esales-auction topic 
        (JNDI name: topic/ejava/projects/emarket/esales-auction)

        * Design your JMS Message. You can use any JMS Type and JMS/custom
        properties you wish.  However, you need to account for the fact
        that subscribers will be filtering on such things as the category
        or state of an auction.

        * Have your eSales EJBs publish JMS Messages to the topic when 
        the Auction changes state (created, bid, close).

===

    [[1]] Add a Java SE JMS subscriber to consume events about Auctions 
    pertaining to a specific category.

        * Implement a Java SE JMS subscriber that listens for Auctions with
        a category matching a JMS Selector.  This must be a JMS selector, not
        client-side Java logic. All this client has to do is log the
        information from the message.

        * Simply print the fact that the process was called and the
        contents reported in the message.

        * You should launch this subscriber using an Ant wrapper acript.

===

    [[1]] Implement a Message Driven Bean within eBidbot to subscribe to 
    auction closed events. 

        * Use a JMS Selector for the MDB to limit the types of messages
        consumed.

        * Update any orders as being closed and with results based on the
        contents of the JMS message.

===

    [[1]] Implement an EJB Timer that will allow eSales to automatically
    wake-up and expire auctions.

===

    [[1]] Implement an EJB Timer that will allow eBidbot to periodically
    wake-up and check on the open auctions that it has bid orders for.

* Testing

    [[1]] Provide JUnit tests that verify the EJB functionality of 
    eSales accessed through its remote interface using new
    access control restrictions.

    [[1]] Provide JUnit tests that verify the EJB functionality of 
    eBidbot using its new access control restrictions and ability to
    authenticate with eSales.

    [[1]] Implement the scripted use case below as an automated JUnit
    test and manually driven actions through the Web UI. All command
    line implementations must be wrapped in an Ant runtime script to
    encapulsate the classpath details in a portable manner (see the
    class jmsNotifier project for an example of using an Ant runtime script).
    The <<full>> JSE subscriber need not be part of the automated end-to-end
    JUnit test.

        [[1]] eSales initializes the EJB Timer to check for expired 
        auctions

        [[1]] eBidbot initializes the EJB Timer to check auctions
        associated with its bids.

        [[1]] admin1 resets all eSales tables (using the eSalesTestUtilEJB)

        [[1]] admin1 populates the eDmv tables (using the ESalesIngestor)

        [[1]] admin2 resets the eBidbot tables (using the
        EBidbotTestUtilEJB)

        [[1]] admin2 populates the eBidbot tables (using the
        EBidTestUtilEJB) if necessary. Suggest adding account for user3
        at this point.

        [[1]] user1 creates auction 

        [[1]] user2 gets a list of open auctions

        [[1]] user2 places bid on an auction

        [[1]] user2 views the current status of the auction they are
        bidding on

        [[1]] user3 gets a list of open auctions

        [[1]] user3 views the current status of the auction that was bid by
        user2

        [[1]] user3 places order with eBidbot

        [[1]] eBidbot EJB wakes up from an EJB Timer

        [[1]] eBidbot EJB places bid for user3 

        [[1]] user2 places another bid on auction

        [[1]] eBidbot EJB wakes up again from an EJBTimer

        [[1]] eBidbot EJB sees they have been raised and places another
        bid for user3

        [[1]] eSales EJB wakes up from an EJBTimer and closes the auction

        [[1]] eSales EJB publishes a message to the topic that informs
        everyone of the closing and that user3 has win.

        [[1]] The eBidbot MDB receives the message and updates the order.

        [[1]] The stand-alone client recieves the message if it matches
        their JMS selector for a specific category.

        [[1]] user3 checks their order with eBidbot and finds out they won
        
[../images/emarket-async-auction.jpg] eMarket Async Auction


* Grading

    Your project will be graded on completeness and quality of product. In
    order for you to recieve full credit in each area, it must be a)
    complete, b) done well, and c) tested.  The breakdown of grading 
    will be as follows:

        * README provided that describes where each requirement satisfied: 10pts

        * projects cleanly builds with Maven: 15pts

        * Project 1 and 2 functionality: 5pts

        * EJB Security: 10pts

        * Client Security Login: 10pts

        * WAR Security: 10pts

        * EJB JMS Publisher: 10pts

        * EJB MDB Subscriber: 10pts

        * Java SE JMS Listener: 10pts

        * EJB Timers: 10pts

    Each area will be judged according to the following breakdown. For
    areas where testing does not apply (e.g., README and build), those 
    points will be assigned to quality:

        * complete: 60%

        * quality of implementation supplied: 30%

        * testing: 10%

* Submission Guidelines

    Please follow the 
    {{{../../../coursedocs/projects.html#Submission_Guidelines}
    project submission guidelines}}
    posted in the course overview.
