Project1: eMarket Data Access Tier and Initial Business Logic

    10/19/2008 - fixed link at bottom

* Goals

    * Build the data access tier and initial business logic for an
    application.

    * Gain experience with JDBC and Java Persistence API technologies.

    * Gain experience designing and testing project implementations around
    layered boundaries.

* Objectives

    * Design a relational schema for your project.

    * Design a set of business objects to represent the data in the system.

    * Incorporate JDBC technology for bulk database operations.

    * Incorporate the Java Persistence API for mapping objects to 
    the database schema.

    * Provide a layer of business logic that coordinates interaction with
    the data access objects.

    * Test our implementations.

* Business Description

    eSales is planning an on-line auction site to allow sellers to auction
    items and buyers to place bids and ultimately purchase products. At the
    same time, eBidbot is planning an on-line automated bidding site that
    will help bidders make bids with eSales. 

    Sellers can start an auction using the eSales on-line auction site.
    They specify a title, category, description, asking price, start/stop
    time, and any images.  Using the eSales buyer interface, buyers can
    manually bid on auctions until they close.

    With eBidbot, buyers also have the option of using an independent
    site to place their bids. Buyers place orders with eBidbot, providing
    them the auction and min/max bidding parameters. eBidbot will become 
    a trusted client of eSales and be able to make bids on behalf of the 
    actual buyer.

    Both eSales and eBidbot have come to you to develop the initial phase
    of their applications. They are expecting the core capability of their
    applications as a final output, but are willing to accept some command
    line and initial proof-of-concept user interfaces in that time-frame.
    There will be a specific set of use cases to implement and you will be
    informed as to which can be done in command line or Web UI form.

* Technical Overview

    The work done during this project will focus on the business objects
    (BOs), the data access objects (DAOs) of the data access tier,
    and some initial business logic (BL). There will be two sets of DAO
    implementations; one based on the JDBC API and a second based the one
    the Java Persistence API (JPA). There will only be a single version
    of the business logic implementation (BLImpl). How you partition the
    implementations into separate physical sub-projects is up to you.
    A suggested starting point is provided at the end of this project 
    description.

    The business objects encapsulate the core business data and rules of
    the applications. You will design the business objects and then map
    them to the database using JDBC and JPA. You will only be asked to
    implement a create capability with JDBC to be used with ingest. You
    will be required to implement full CRUD capability with JPA. You will
    be required to encapsulate all object to relational (O/R) mapping
    within the DAOs, descriptor files, and business object annotations.
    You will be given a set of 
    {{{https://ejava.info:8443/repos/class/trunk/ejava-javaee/projects/eMarket/eMarketData/eSalesTestUtil/src/main/resources/xml/}
    test data}} to initially populate your
    applications as a part of testing.

    The business logic will handle the initial ingest of test data and
    runtime business functions of the applications. At this point in time,
    all actions are localized to the DAOs and any external interfaces we can
    either host or simulate. We can implement the full business
    functionality of eSales, but will not have enough of the remote eSales
    interface in place to test much of the eBidbot business logic.

    The test acceptance for the first eSales project will be a set of
    unit tests and at least one functional test that takes the business
    logic, data access tier, and business objects through an end-to-end
    eSales use case; starting from the seller initiating an auction and
    ending with a buyer placing a winning bid. The test acceptance for 
    eBidbot will be restricted to unit tests.

* Assembly Overview

    Since the work is for separate applications, we will need to establish
    two separate application projects for this work; eSales and eBidbot.
    The development can physically share resources (e.g., same database and
    application server), but should be easily separated. It is suggested
    that you form a root for the overall eMarket work to coordinate
    integration testing, and then group the lower-level work under two
    child projects; eSales and eBidbot. 
    
        [Note:] The root eMarket project should be very thin and should
        not have a dependency on the instructor's class examples. Doing
        so will add unnecessary web site publishing complications to your
        project that are only needed by posted class examples.

    See the Getting Started section towards the end of this specification
    for a more detailed sample project layout.

    [Note:] Since the class will be producing parallel implementations for
    the applications and submitting them for evaluation, it is asked
    that you replace the "e" in eMarket, eSales, and eBidbot with a
    unique name that corresponds to your newsgroup or college login
    (ex. ejavaguyMarket, ejavaguySales, ejavaguyBidbot -or- jcstaffMarket,
    jcstaffSales, jcstaffBidbot). You should also use this same pattern for
    java packages (ex. ejavaguy.sales, ejavaguy.bidbot -or-
    jcstaff.sales, jcstaff.bidbot), JNDI names, DB tables, etc.

    [Note:] There should be no use of System.out.println() in the code and all
    implementations must use the jakarta commons logging API with the 
    log4j logging provider.  You may leave debug in your code, but this 
    should be able to be turned on/off with the proper logging priority
    changes in the log4j.xml configuration.

* Technical Details

    [Note:] Project development can take either a database-first or
    business-object first approach. The database-first approach simulates 
    integration with a legacy database or development of an application
    with a very database-centric solution. The business object-first
    approach simulates a green-field implementation that has more modest
    database requirements. Whichever technique you chose is up to you, but
    the two must integrate in the end.

    [Note:] There are a lot of technical details presented with this 
    specification. This is done to provide clarity and a starting point for
    design discussion. However, it is not done so to specify specific class
    or method naming, project layout, or order of work. You are free to
    make many technical adjustments to the ideas presented.

    []

    [[1]] Design a database schema that accounts for the following
    information. 

        [[A]] eSales Database Schema 

[../images/esales-db-schema.jpg] eSales Database Schema 

            [[1]] ESALES_ACCT - design a table to store singleton account
            information that will not be shared with external users.

                * USER_ID - the user login for the account must be
                maintained by the database so that we can associate the
                account with a specific user after they login. This
                information is unique and cannot be changed, so it can also
                be used as a primary key field.

                * FIRST_NAME

                * MIDDLE_NAME

                * LAST_NAME

                * START_DATE

                * END_DATE - we will never remove a user account once
                the application is in operation. The database just needs
                some type of key to indicate they are no longer active.

            [[1]] ESALES_POC - since we want to protect personal
            information, the public contact information can be placed in a
            separate table so it can be more freely shared. This has a 1:1
            relationship with ESALES_ACCT and could be done as a primary
            key join.

                * USER_ID (1:1 relationship with ESALES_ACCT)

                * EMAIL - valid e-mail address to contact user. This field 
                should be unique.

            [[1]] ESALES_ADDRESS - users can provide various types of
            addresses for use at the site. Each will have a name that
            defines its purpose. Since billing is not a part of the
            initial project, the only address we are concerned with is a
            shipping address. Items are also shipped to addresses. Note
            that an address for a shipped item may need a way to keep a
            user's change-of-address from modifying the historical fact
            of where it was shipped. This may mean that address fields
            cannot be changed, changes once referenced, or copied for
            use by the shipping side of the application.

                * ID - there is no single natural field within address that 
                forms a primary key, so a generate value can be used.

                * NAME - identifies the type of address (e.g., "SHIPPING")

                * TO - identifies the recipient at the address.

                * STREET

                * CITY

                * STATE

                * ZIP

            [[1]] ESALES_ACCT_ADDRESS_LINK - There is a 1:N relationship
            between accounts and addresses. If we want addresses to stay
            independent of the private account information, we can form a
            foreign key relationship through a secondary link table. Since
            this is a 1:N relationship, the foreign key pair can be
            constrained to be unique by the database. Otherwise, we can simply 
            put a foreign key in the address table.

                * USER_ID - (N:1 relation to ESALES_ACCT)

                * ADDRESS_ID - (1:1 relation to ESALES_ADDRESS)

            [[1]] ESALES_AUCTIONITEM - This will anchor the information
            associated with an auction. Auctions will progress from bidding
            to sale. Once the bidding is over, the winning bid information
            can be retained within this table and the incremental bid
            history purged. Be sure to design in an easy way to determine 
            if an auction item is expired or officially over; even if it 
            did not sell or ship yet. Note that end-of-auction processing
            will be looking for auctions that have expired, but not 
            officially closed.  Buyers and bidders will be looking for 
            auctions that have not closed. You may have to adjust the
            schema suggested below to accommodate.

                * ID - there is no natural field for forming a primary
                key value within this table.

                * TITLE

                * CATEGORY - just a text name for now. There will be no
                defined set of categories.

                * DESCRIPTION - this will be a straight text narrative.

                * START_TIME

                * END_TIME - this is a date in the future when the auction
                is taking place. 

                * ASKING_PRICE - this forms a minimum bid value.

                * PURCHASE_PRICE - this comes from the AMOUNT of the
                winning ESALES_BID before it is purged.

                * BUYER_ID - (N:1 relation to ESALES_USER) this comes
                from the BIDDER_ID of the winning ESALES_BID before it
                is purged.

                * SELLER_ID - (N:1 relation to ESALES_USER)

                * SHIPTO_ID - (1:1 or N:1 relation to ADDRESS) We should
                probably copy the buyer's shipping address since a later
                update of the user's shipping address should not modify
                a historical record of where this item was shipped to. No
                bid deal during this overall project.

            [[1]] ESALES_BID - bids for an active auction should be
            retained for viewing. Once the bidding is over, however, the
            loosing bid information is no longer needed. The winning bid
            can be kept around or copied into the auction as part of a sale
            record.

                * ID - there is no natural field that represents a primary
                key 

                * BIDTIME

                * AMOUNT

                * ITEM_ID - (N:1 relation with ESALES_AUCTIONITEM)

                * BIDDER_ID - (N:1 relation with ESALES_USER)


            [[1]] ESALES_IMAGE - auctions can have 0..N images associated
            with them. 

                * ID

                * IMAGE

            [[1]] ESALES_ITEM_IMAGE_LINK - this could be optionally
            expressed as a foreign key within the image table.

                * ITEM_ID (N:1 relation to ESALES_AUCTION)

                * IMAGE_ID (1:1 relation to ESALES_IMAGE)

                []

            []
 
        [[A]] eBidbot Database Schema

[../images/ebidbot-db-schema.jpg] eBidbot Database Schema

            [[1]] ESALES_BIDACCT - design a table to store eBidbot user
            account information. No need for names here, we just want a
            userId of some sort and their eSales credentials (they trust
            us). For simplicity, make the eBidbot SALES_ACCOUNT column 
            have an equal value to the USER_ID column and rely on the fact 
            that their userIds will be the same. eBidbot will be a trusted
            user of eSales, but we have no way (within the scope of the 
            project) to verify the eSales account ID provided by the user
            unless it is the same as the eBidbot login.

                * USER_ID - this user's login will be used as a primary key.

                * SALES_ACCOUNT - bidder's login name for eSales

            [[1]] EBIDBOT_ORDER - design a table to hold eBidbot
            information associated with an order. This application will use
            the information to know the specific auction, bid parameters,
            and final results (cached from eSales result).

                * ID

                * AUCTION_ID - logically, this is a N:1 relationship to 
                ESALES_AUCTIONTIME. However, there should be no physical
                database references between the two applications. All
                integration will come at the higher application levels.

                * START_BID - whether we jump in with this bid or wait
                until it reaches this value is up to you.

                * MAX_BID - don't bid any more that this amount.

                * COMPLETE - know if auction is complete for order.

                * RESULT - know if we won or not.

                * FINAL_BID - know purchase price for winner. The buyer
                will owe this amount if the result says he won.

                * USER_ID - (N:1 relation to EBIDBOT_BIDACCT)

        []

===

    [[1]] Design a set of business objects to represent the data in the 
    system.

        [[A]] eSales Business Objects

[../images/esales-business-objects.jpg] eSales Business Objects

        []

            [[1]] Account - design a class that encapsulates the singleton
            private information for a user. This class will reference other
            objects in the system, but will not be referenced by others.

                * userId:String - use login name. This could be optionally
                dropped in favor of using the identical property within the 
                referenced POC object.

                * firstName:String

                * middleName:String

                * lastName:String

                * startDate:Date

                * endDate:Date

                * addresses:Map\<String, Address\> - addresses can be
                keyed by their name.

                * poc:POC

            [[1]] Address - design a class that holds addressing
            information. This will primarily be used as a shipping address.

                * id:long

                * name:String - indicates type of address. This should be
                unique per account.

                * to:String - the recipient at the address

                * street:String

                * city:String

                * state:String

                * zip:String

            [[1]] POC - design a way for public point of contact 
            information to be exposed for a user.

                * userId:String

                * email:String

                * auctions:Collection<AuctionItem> - provides direct
                navigation to auctions the user was a seller. This property
                could be dropped in favor of a uni-directional mapping from 
                the AuctionItem side.

                * bids:Collection<Bid> - provides direct navigation to bids
                the user has placed on open auctions. This property could
                be dropped in favor of a uni-directional mapping from
                Bid.

                * purchases:Collection<AuctionItem> - provides direct
                navigation to auctions the user has won. This property
                could be dropped in favor of a uni-directional mapping from
                AuctionItem.

            [[1]] Bid - design a way to record bid information while an
            auction is still open.

                * id:long

                * amount:double

                * timestamp:Date

                * bidder:POC

                * auction:AuctionItem

            [[1]] AuctionItem - design a class to encapsulate the
            information for an auction. AuctionItems will need to know
            if they are still open, expired but not yet completed, or
            closed. When searching for an auction to bid on, you should
            only see items that are still officially open.

                * id:long

                * title:String

                * category:Enum - the full list of categories is still TBD,
                but a candidate set will be provided with the test data.

                * description:String

                * startTime:Date

                * endTime:Date

                * askingPrice:double - no bid should be allowed below this
                value.

                * purchasePrice:double - filled in from winning bid
                when auction is complete.

                * bids:List<Collection> - bids are retained as long as the
                auction is active. They can be maintained in an ordered
                list sorted by bid amount to make locating the highest bid 
                easier to find.

                * buyer:POC - filled in when auction is complete from
                from winning bid when auction is complete.

                * shipTo:Address - address item is to be shipped to. This
                is filled in with the shipping address of the user when
                the auction is complete.

                * seller:POC 

                * images:List<Image> - auctions can have zero or more 
                images associated with them.

            [[1]] Image - design a class to house the binary image for an
            auction item.

                * id:long 

                * image:byte[]

        [[A]] eSales Business Objects

[../images/ebidbot-business-objects.jpg] eBidbot Business Objects

            [[1]] BidAccount - design a class that encapsulates the bidder
            information for automated bidding.

                * userId:String - account login for eBidbot

                * salesAccount:String - account login for eSales

                * salesPassword:String - account password for eSales

                * orders:Collection<Order>

            [[1]] BidOrder - design a class that defines the parameters
            for making a bid against a specific auction and its results.

                * auctionId:long - eSales auction Id

                * startBid:double - starting bid for user. You can
                determine when they should start with this value; right
                away or wait.

                * maxBid:double - no bids should be made above this value.

                * complete - cache the active/complete state of the auction 
                to help limit activity for application and cache results.

                * result - provide information that indicates whether the
                bidder won or not.

                * finalBid - cache the winning bid amount from eSales.

        []

===
    [[1]] Design and implement a mechanism to ingest a starting state for
    eSales based on a provided data file and parser.  You will implement
    two primary classes to support this requirement; JDBC Ingest DAO
    and an Ingestor.

[../images/esales-ingest-dao.jpg] eSales Ingest and JDBC DAO

        [[a]] Design and implement a set of DAOs that can be used to
        ingest eSales business data into the database using the JDBC API
        and the database schema you designed as a part of a separate
        requirement. These DAOs can optionally implement a common
        interface with the DAOs you implement in another requirement or
        can be unique in how they achieve what can be thought of as a
        performance goal (rather than working within business rules).
        The JDBC Ingest DAO need only support create/insert operations.

        [[b]] Design and implement an Ingestor that will use an externally
        provided parser to obtain business data for eSales and use the JDBC
        Ingest DAO to populate the database.

        []

===

    [[1]] Design and implement a DAO layer that will map the business
    objects between the object model and the database using the Java
    Persistence API (JPA). These DAOs will support all standard CRUD
    operations and can optionally implement the same interface as other
    potential DAO implementations. The implementation can make liberal use
    of JPA @Annotations, descriptor files, or a combination of both. Your
    interface should encapsulate the fact that an EntityManager is being
    used and the same EntityManager should be shared among other DAOs in
    the same Thread. Using either (a crude form of) dependency injection
    or ThreadLocal can be quite useful here. However, you will find
    that dependency injection works easiest in most cases. Your DAOs
    should not attempt to control the transaction or they will <NOT>
    be portable to the EJB tier.

[../images/emarket-daos.jpg] eMarket JPA DAOs

        [[a]] AccountDAO/JPAAccountDAO - encapsulates the use of JPA
        when mapping account and closely associated business objects
        to/from the database.

        [[b]] AuctionDAO/JPAAuctionDAO - encapsulates the use of JPA when
        mapping auction and closely associated business objects to/from the
        database.

        [[c]] BidAccountDAO/JPABidAccountDAO - encapsulates the use of
        JPA when mapping BidAccount and closely associated business objects
        to/from the database.

        []
===

    [[1]] Design an initial business interface and business logic for
    the eSales application. The core O/R mapping work will be done
    by the DAOs.  However, it is the ultimate responsibility of these
    business logic implementations that either it or the business objects
    enforce the business rules of the application. The DAOs only perform
    O/R mapping and do not enforce such things as a minimum bid. The
    business logic is assumed to work within the context of a single,
    externally controlled transaction. Do not attempt to control the
    transaction of the EntityManager within these objects or you will
    <NOT> be portable to the EJB tier. You need only implement the behavior
    required to implement the end-to-end use case listed in the testing
    section. Some of the anticipated methods are listed below.

[../images/esales-business-logic.jpg] eSales Business Logic

        [[a]] AccountMgmt/AccountMgmtImpl - encapsulates the actions
        required to create, get, update and close an account.

            * createAccount - you will need to at least create a seller and
            two or more buyer accounts. 

        [[a]] SellerMgmt/SellerMgmtImpl - encapsulates the actions required
        to create and get auctions for a seller.

            * createAuction  - creates a new auction for a seller. All
            dates and properties of the auction need to be of consistent
            and legal values.

            * getUserAuctions - returns a collection of auctions associated
            with a seller. This can be used to determine if the auction has
            been added.

            * getAuction - returns a specific auction by ID. This can
            be used to track the state of a specific auction for a seller.

        [[a]] BuyerMgmt/BuyerMgmtImpl - encapsulates the actions required
        to get and bid on auctions. 

            * getOpenAuctions - returns a collection of auctions that 
            have not ended. This can be used to pick a specific auction
            to bid on.

            * placeBid - creates a bid for a specific user and auction. The
            auction must be open, the user must exist, and the bid amount 
            must be greater than any pre-existing bid.

            * getAuction - returns a specific auction by ID. This can be
            used to track the state of a specific auction for a buyer.

        [[a]] TestSupport/TestSupport - a useful tool during testing that
        encapsulates how to get the application back into a known state
        prior to running a test or to inspect values not normally exposed
        through the normal business interfaces.

            * getAccounts - get all accounts in the system.

            * removeAccount - sanely remove an account from the system.
            This may require removing the account from any current bids,
            etc. in order to satisfy referential integrity.

            * getAuctions - get all auctions in the system.

            * removeAuction - sanely remove an auction from the system.
            This may require removing bids, images, and other objects that
            may have references to this object.

            * clearAll -  sanely take the state of the system down to a
            coldstart.

        [[a]] Ingestor - the Ingestor written as a part of a separate
        requirement is also logically considered part of this tier.
        
            * ingest - point an externally provided parser at a set of test 
            data and use the DAOs to populate the system to a known state.

===

* Testing

    [[1]] Provide a JUnit test for your business objects that test the 
    manipulation of the structure. An example test might be the addition
    of a bid for a closed auction. There should be a separate project 
    and test for both eSales and eBidbot. This test should be packaged with
    the business objects.

    [[1]] Provide a JUnit test for your JPA DAOs. This should test the 
    implementation for the fundamental CRUD operations for each type of
    object. It is understood that some of the objects will be handled by
    cascades, so you might not have a set of methods handling each type of
    business object.  This test should be packaged with the DAOs.

    [[1]] Provide a Junit test for the JDBC DAOs. Verify they can 
    functionally create new objects within the eSales system. This test
    should be packaged with the DAOs.

    [[1]] Provide a JUnit test program for your Ingestor. This test should
    be able to reference a known data file and ingest records into the
    database using the JDBC DAOs. This test should be packaged with the 
    business logic implementation.

    [[1]] Provide a set of JUnit test programs for the core business logic
    implementation objects for eSales; AccountMgmtImpl, SellerMgmtImpl,
    and BuyerMgmtImpl. You should test enough of their implementations to
    be able to demonstrate a reasonable set of behavior for the following 
    with a specific JUnit test. This test should be packaged with the
    business logic implementation.

        * ingest data (using Ingestor and JDBC DAOs)

        * createAccount for seller, buyer1, and buyer2 (using
        AccountMgmtImpl and JPA DAOs)

        * createAuction (using SellerMgmtImpl and JPA DAOs)

        * getUserAuctions (using SellerMgmtImpl and JPA DAOs)

        * getAuction (using SellerMgmtImpl and JPA DAOs)

        * getOpenAuctions (using BuyerMgmtImpl and JPA DAOs)

        * placeBid for buyer1 (using BuyerMgmtImpl and JPA DAOs)

        * placeBid for buyer2 (using BuyerMgmtImpl and JPA DAOs)

        * getAuction (using BuyerMgmtImpl and JPA DAOs)

* Getting Started

    The following sketch of two directory structures can be used as a
    starting point for your overall application. The first is a simplified
    project layout that collapses the number of sub-projects into a single
    "Impl" project. It is suggested that you use this layout if you
    are new to maven and want the simplest configuration possible. The
    second is a more robust layout and is closer to a multi-developer
    environment.  Use the later structure if you want to better simulate a
    work environment where the work of multiple developers needs clearer
    separation. 
    
        [Note:] All "e"Market, "e"Sals, and "e"Bidbot names
        should be changed to your specific name mangler. The same type of
        modification needs to occur for the java package names.

        [Note:] Other than a README, it is not anticipated that you
        will have any artifacts at the eMarket layer. It should be
        used only as a convenience wrapper to perform goals across both
        projects. All details will be specified at the eSales and eBidbot
        levels and below; with the leaf-level projects being your default
        choice for detailed information (e.g., DB drivers, etc.)

        []

    []
---
eMarket/
|-- eBidbot
|   |-- eBidbotImpl
|   |   |-- pom.xml
|   |   `-- src
|   |       |-- main
|   |       |   `-- ebidbot
|   |       |       |-- blimpl
|   |       |       |-- bl
|   |       |       |-- bo
|   |       |       |-- dao
|   |       |       `-- jpa
|   |       `-- test
|   |           |-- ebidbot
|   |           |   |-- blimpl
|   |           |   |-- bo
|   |           |   |-- jpa
|   |           `-- resources
|   |               `-- META-INF
|   |                   `-- persistence.xml
|   `-- pom.xml
|-- eSales
|   |-- eSalesImpl
|   |   |-- pom.xml
|   |   `-- src
|   |       |-- main
|   |       |   |-- java
|   |       |   |   `-- esales
|   |       |   |       |-- blimpl
|   |       |           |-- bl
|   |       |           |-- bo
|   |       |   |       |-- dao
|   |       |   |       |-- jdbc
|   |       |   |       `-- jpa
|   |       |   `-- resources
|   |       |       `-- META-INF
|   |       |           `-- persistence.xml
|   |       `-- test
|   |           `-- java
|   |               `-- esales
|   |                   |-- blimpl
|   |                   |-- bo
|   |                   |-- jdbc
|   |                   `-- jpa
|   `-- pom.xml
`-- pom.xml
---
---
eMarket/
|-- eBidbot
|   |-- eBidbotBLImpl
|   |   |-- pom.xml
|   |   `-- src
|   |       |-- main
|   |       |   |-- java
|   |       |   |   `-- ebidbot
|   |       |   |       `-- blimpl
|   |       |   `-- resources
|   |       |       `-- META-INF
|   |       |           `-- persistence.xml
|   |       `-- test
|   |           `-- java
|   |               `-- ebidbot
|   |                   `-- blimpl
|   |-- eBidbotBO
|   |   |-- pom.xml
|   |   `-- src
|   |       |-- main
|   |       |   `-- ebidbot
|   |       |       |-- bl
|   |       |       `-- bo
|   |       `-- test
|   |           `-- ebidbot
|   |               `-- bo
|   |-- eBidbotDAO
|   |   |-- pom.xml
|   |   `-- src
|   |       |-- main
|   |       |   |-- java
|   |       |   |   `-- ebidbot
|   |       |   |       |-- dao
|   |       |   |       `-- jpa
|   |       |   `-- resources
|   |       |       `-- META-INF
|   |       |           `-- persistence.xml
|   |       `-- test
|   |           `-- java
|   |               `-- ebidbot
|   |                   `-- jpa
|   `-- pom.xml
|-- eSales
|   |-- eSalesBLImpl
|   |   |-- pom.xml
|   |   `-- src
|   |       |-- main
|   |       |   |-- java
|   |       |   |   `-- esales
|   |       |   |       `-- blimpl
|   |       |   `-- resources
|   |       |       `-- META-INF
|   |       |           `-- persistence.xml
|   |       `-- test
|   |           `-- java
|   |               `-- esales
|   |                   `-- blimpl
|   |-- eSalesBO
|   |   |-- pom.xml
|   |   `-- src
|   |       |-- main
|   |       |   `-- java
|   |       |       `-- esales
|   |       |           |-- bl
|   |       |           `-- bo
|   |       `-- test
|   |           `-- java
|   |               `-- esales
|   |                   `-- bo
|   `-- eSalesDAO
|   |   |-- pom.xml
|   |   `-- src
|   |       |-- main
|   |       |   |-- java
|   |       |   |   `-- esales
|   |       |   |       |-- dao
|   |       |   |       |-- jdbc
|   |       |   |       `-- jpa
|   |       |   `-- resources
|   |       |       `-- META-INF
|   |       |           `-- persistence.xml
|   |       `-- test
|   |           `-- java
|   |               `-- esales
|   |                   |-- jdbc
|   |                   `-- jpa
|   `-- pom.xml
`-- pom.xml
---

* Grading

    Your project will be graded on completeness and quality of product. In
    order for you to receive full credit in each area, it must be a)
    complete, b) done well, and c) tested.  The breakdown of grading 
    will be as follows:

        * README provided that describes where each requirement satisfied: 10pts

        * projects cleanly builds with Maven or Ant: 15pts

        * business objects: 15pts

        * JDBC DAO: 15pts

        * JPA DAO and JPA O/R Mapping: 25pts

        * Ingestor: 10pts

        * Business Logic: 10pts

    Each area will be judged according to the following breakdown. For
    areas where testing does not apply (e.g., README and build), those 
    points will be assigned to quality:

        * complete: 60%

        * quality of implementation supplied: 30%

        * testing: 10%

* Submission Guidelines

    Please follow the 
    {{{../../../course-docs/projects.html#Submission_Guidelines}
    project submission guidelines}}
    posted in the course overview.

