Project2: eMarket N-Tier Application

    03/31/2010 - added clarity to transaction demonstration requirement

* Goals

    * Continue to re-use and update the implementations from the previously
    implemented data access tier and initial business logic.

    * Deploy data access tier and business logic as an EJB component

    * Provide a remote interface and client to business logic

    * Provide a local interface and Web client to business logic

    * Provide a Web tier 

* Objectives

    * Expand the current project development architecture to include EJB,
    WAR, EAR, and Test sub-projects for eSales.

    * Expand the current project development architecture to include EJB,
    WAR, EAR, and Test sub-projects for eBidbot.

    * Re-host the data access tiers and initial business logic from 
    Project 1 within the new EJB and WEB tiers.

    * Design the data transfer objects (DTOs) to be used to communicate
    with clients using the remote interface.

    * Create the EAR sub-projects to host the Java EE components.

    * Create the Test sub-projects to deploy and run tests using the
    remote EJB interface.

    * Create and test the WAR sub-projects to host the user interface.
    This component will ultimately be deployed within the EAR to 
    the application server and may use local interfaces of the EJB to
    access business logic. 

* Technical Overview

    [Note:] This project and the final project rely heavily on the
    components from Project 1. You are encouraged to make sure your
    implementation of Project 1 is sound and well tested prior to doing too
    much work on Project 2. You should continue to maintain your JUnit
    tests for the earlier components while working on these higher level
    tiers.

    []

    The project will continue along two parallel paths; eSales and eBidbot.
    However, this time we will add several new project types; EJB, EAR,
    WAR, and Test. These new sub-projects will become siblings to your
    existing BO, DAO, and BLImpl sub-projects. The new projects will 
    depend on your legacy work. The remote interface of the EJB will also
    require specific design of what gets externalized to the client. The
    remote clients do not share the same address space we had in Project 1
    and we cannot afford to serialize the entire contents of a database
    full of related information. Data Transfer Objects (DTOs) will be part
    of the EJB remote interface design.

    You have finished a significant amount of eSales during Project 1; the
    O/R mapping and core business logic of a non-trivial business model.
    You will now host the data access tier and business logic within an
    EJB component.  This EJB component will supply the EntityManager,
    control transaction boundaries, provide local interaction for the
    Web Tier, and a RMI interface for remote clients. Security will be
    addressed in the next project. To limit the scope of the project, the
    Web UI requirements will be limited to only a few of the Buyer
    interaction use cases. The EJB and WAR will be deployed as a part of an
    EAR by a Test project. The Test project will host RMI testing of the
    EJB methods that are to be used eSales remote clients, including
    eBidbot business logic. 

    eBidbot will require additional work as well. With a remote interface
    for eSales in hand and the ability to either simulate or operate with a
    live instance, we can now begin to implement much of the business logic
    that will also be hosted within an EJB. The development of a Web UI for
    eBidbot is not required at this time. All functionality is permitted to
    be demonstrated through RMI calls to the EJB.

    You may develop your Web tier in an alternate environment, such as
    Jetty. However, it must operate within the EAR that is deployed and
    runs within JBoss.

* Assembly Overview

    You will be adding several sibling projects to both eSales and eBidbot.
    See suggestions for the layout towards the bottom of this specification.
    Once you add a new project, make sure to add a reference to it in the 
    parent pom.xml. Spelling and case count. Ignoring case of characters 
    (e.g. eBidbot versus eBidBot) will make your project non-portable to
    Unix file systems. 

    [Note:] As with the previous project, the use of the name eMarket,
    eSales, and eBidbot within the project specification are to be taken as
    placeholders. Please make an effort to uniquely name your directories,
    components, Java packages, JNDI names, etc. to help logically separate
    the parallel project implementations.

    [Note:] There should be no use of System.out.println() in the code
    and all implementations must use the jakarta commons logging API
    with the log4j logging provider.  You may leave debug in your code,
    but this should be able to be turned on/off with the proper logging
    priority changes in the log4j.xml configuration.


* Technical Details

    [[1]] Continue to provide all functionality from Project 1; especially
    the unit tests as upgrades to your earlier logic is revisited.

===

    [[1]] Create an EJB tier to host your eSales business logic and
    data access tiers. Each of the EJBs provided will provide the
    necessary dependency injection and initialization for the business
    objects. Transaction scope will be added as a part of a separate
    requirement. Security will be added in the next project. The main
    construction, deployment, and remote interfaces of the EJB will be
    the focus of this requirement.  You will have to address the data
    that gets serialized to the client in a set of Data Transfer Objects
    (DTOs).

        [[A]] EJBs - The EJBs will be used to inject and initialize
        implementation objects and provide a remote interface.

[../images/esales-ejbtier.jpg] eSales EJB Tier

            [[a]] AccountMgmtEJB - this EJB will primarily host the 
            AccountMgmtImpl business logic. An AccountMgmtRemote interface 
            and bean implementation will need to be designed for this EJB.

            [[a]] SellerMgmtEJB - this EJB will primarily host the 
            SellerMgmtImpl business logic. A SellerMgmtRemote interface and
            bean implementation will need to be designed for this EJB.

            [[a]] BuyerMgmtEJB - this EJB will primarily host the 
            BuyerMgmtImpl business logic. A BuyerMgmtRemote interface and bean 
            implementation will need to be designed for this EJB.

            [[a]] TestSupportEJB - this support EJB will primarily host the
            TestSupportImpl business logic to support remote testing
            requirements. A TestSupportRemote interface and bean implementation
            will need to be designed for this EJB.

        [[A]] DTOs - The DTOs will be used to serialize the state of the
        business objects between the EJB and client when using the remote
        interface.

[../images/esales-dtos.jpg] eSales DTOs

            [[a]] AccountDTO - This class is meant to primarily be
            an aggregation of the state found in the Account and related POC
            business objects.

            [[a]] AddressDTO - This class is meant to be a representation
            of the state found in the Address business object. Depending
            on how the Address business object is designed, there may
            not be a need for this stand-in.

            [[a]] AuctionDTO - This class is meant to be a representation
            of the state found in the AuctionItem and POC business objects.

            [[b]] BidDTO - This class is meant to be a representation of
            the state found in the Bid and related POC business objects.

        [[A]] EAR - Create an EAR to host the eSales server-side
        components; including the EJB component just developed.

        [[A]] Test - Create a Test project that will deploy the EAR to the
        application server and run through a set of JUnit test using the
        remote interface of the EJB. 

===
    
    [[1]] Implement and test the eBidbot business logic using the remote
    interface of eSales.

[../images/ebidbot-ejbtier.jpg] eBidbot Business Logic and EJB Tiers

        [[A]] OrderMgmt/OrderMgmtImpl - encapsulates the functionality
        required to create an automated bidding account, place an order,
        and check the status of that order. You should be able to test this
        component using the running eSales application or implement a stub
        that implements the BuyerMgmtRemote interface.

===

    [[1]] Create an EJB tier to host your eBidbot business logic and
    data access tiers. The EJB(s) provided will provide the
    necessary dependency injection and initialization for the business
    objects. Transaction scope will be added as a part of a separate
    requirement. Security will be added in the next project. The main
    construction, deployment, and remote interfaces of the EJB will be
    the focus of this requirement.  You will have to address the data
    that gets serialized to the client in a set of Data Transfer Objects
    (DTOs).

        [[A]] EJBs - The EJBs will be used to inject and initialize
        implementation objects and provide a remote interface.

[../images/ebidbot-ejbtier.jpg] eBidbot Business Logic and EJB Tiers


            [[a]] OrderMgmtEJB - this EJB will primarily host the 
            OrderMgmtImpl business logic. An OrderMgmtRemote interface 
            and bean implementation will need to be designed for this EJB.

        [[A]] DTOs - The DTOs are be used to serialize the state of the
        business objects between the EJB and client when using the remote
        interface. However, the simplicity of the business objects used
        will allow us to take another approach for DTOs in this remote
        interface. The EJB Tier will create new instances of the classes
        to clear them of any persistence provider classes before
        serializing them to the client. This is a design option and not 
        a requirement.

        [[A]] EAR - Create an EAR to host the eBidbot server-side
        components; including the EJB component just developed.

        [[A]] Test - Create a Test project that will deploy the EAR to the
        application server and run through a set of JUnit test using the
        remote interface of the EJB. 

===

[../images/emarket-client.jpg] eMarket Clients

    [[1]] Add a Web UI to the eSales application. This may use either
    the remote interface (already implemented and tested with RMI Test
    project) or the local interface of the EJB. The remote will bne a
    distinct interface that is designed to handle remote clients. The
    local interface can be identical to the interface implemented for
    the business logic. The WAR for the Web UI must be deployed as part
    of the eSales EAR. The Web UI must have the following functionality.

        * Anonymous User

            * List open auctions

            * Get details for specific auction.

            * createAccount (using AccountMgmtEJB)

        * Test Admin

            * reset All tables

            * populate tables (using Ingestor)

        * Seller

            * createAuction (using SellerMgmtEJB)

            * getUserAuctions (using SellerMgmtEJB)

            * getAuction (using SellerMgmtEJB)

        * Buyer

            * Place bid (using BuyerMgmtEJB)

===

    [[1]] Add a WebUI to the eBidbot application. This may use either 
    the remote interface (already implemented and tested with RMI Test
    project) or the local interface of the EJB. The WAR for the Web UI 
    must be deployed as part of the eBidbot EAR. The Web UI must have 
    the following functionality.

        * Admin

            * createAccount (using OrderMgmtEJB)

        * Bidder

            * placeOrder (using OrderMgmtEJB)

===

    [[1]] Add transaction properties to the EJBs. 

        [[A]] Transaction Scope - all session bean methods in these two
        applications should require a transaction.

        [[A]] Transaction Integrity - add transaction rollback logic to
        EJBs that detect a bid could not be executed because it was either
        too low or was for a closed auction. i

        [[A]] Create a demonstration of 
        transactions and the capability of rollback by implementing a 
        scenario that adds something to the database and then a *follow-on*
        rollback causes the changes to be undone.

        [Note] To satisfy the transaction demonstration requirement, you
        must actually store something in the database and then later in 
        the transaction roll it back based on some decision. If you make
        the decision before you store the information -- you are not
        satisfying the requirement. It is common for students to 
        implement a wrapper around an existing method that takes a 
        collection and populate the collection with good data up front
        and bad data at the end. The good data that got successfully
        processed should get rolled back once the bad data is 
        processed. Create remote methods that can tell your RMI client
        that this actually occured.

        []

* Testing

    [[1]] Provide JUnit tests that verify the EJB functionality of 
    eSales accessed through its remote interface. Theses tests should be
    packaged in the eSales RMI Test project.

    [[1]] Provide JUnit tests that verify the business logic functionality
    of eBidbot.

    [[1]] Provide JUnit tests that verify the EJB functionality of 
    eBidbot accessed through its remote interface. Theses tests should be
    packaged in the eBidbot RMI Test project.

    [[1]] Perform and document an end-to-end use case to do the following. 
    
    [Note:]Any actions, if any, that must be executed from the command
    line must be wrapped inside an <<RUN>> script similar to ones
    demonstrated in class (see the example eSalesBLImpl  project for an
    example of using an Ant script to encapsulate command-line details).

    []

        * reset database

        * ingest data

        * createAccount for seller, buyer1, and buyer2 in eSales 

        * createAccount for buyer2 in eBidbot

        * createAuction for seller

        * getUserAuctions for seller

        * getAuction for the one created in earlier step

        * getOpenAuctions 

        * placeBid for buyer1 

        * getAuctions for buyer1

        * placeOrder for buyer2 in eBidbot (stimulate a bid)

        * getAuction to verify bids were placed for buyer1 and buyer2

* Getting Started

    The following sketch of directory structure can be used as a starting
    point for your overall application. It assumes you already have a BO,
    DAO, and BLImpl set of projects in place. Note that all "e"Market,
    "e"Sales, and "e"Bidbot names should be changed to your specific
    name mangler. The same type of modification needs to occur for the
    java package names.

---
`-- eMarket
    |-- eBidbot
    |   |-- eBidbotBO
    |   |-- eBidbotDAO
    |   |-- eBidbotBLImpl
    |   |-- eBidBotEAR
    |   |   `-- pom.xml
    |   |-- eBidbotEJB
    |   |   |-- pom.ml
    |   |   `-- src
    |   |       `-- main
    |   |           |-- java
    |   |           |   `-- ebidbot
    |   |           |       `-- ejb
    |   |           `-- resources
    |   |               |-- META-INF
    |   |               |   `-- persistence.xml
    |   |               |-- ejb-jar.xml
    |   |               `-- jboss.xml
    |   `-- eBidbotTest
    |       |-- pom.ml
    |       `-- src
    |           `-- test
    |               |-- java
    |               |   `-- ebidbot
    |               |       `-- ejbclient
    |               `-- resources
    |                   |-- eBidbot-ant.xml
    |                   |-- eBidbot.properties
    |                   `-- jndi.properties
    |-- eSales
    |   |-- eSalesBLImpl
    |   |-- eSalesBO
    |   |-- eSalesDAO
    |   |-- eSalesEAR
    |   |   `-- pom.xml
    |   |-- eSalesEJB
    |   |   |-- pom.xml
    |   |   `-- src
    |   |       `-- main
    |   |           |-- java
    |   |           |   `-- esales
    |   |           |       `-- ejb
    |   |           `-- resources
    |   |               |-- META-INF
    |   |               |   `-- persistence.xml
    |   |               |-- ejb-jar.xml
    |   |               `-- jboss.xml
    |   |-- eSalesTest
    |   |   |-- pom.xml
    |   |   `-- src
    |   |       `-- test
    |   |           |-- java
    |   |           |   `-- esales
    |   |           |       `-- ejbclient
    |   |           `-- resources
    |   |               |-- eSales-ant.xml
    |   |               |-- eSales.properties
    |   |               `-- jndi.properties
    |   `-- eSalesWAR
    |       |-- pom.xml
    |       `-- src
    |           `-- main
    |               |-- java
    |               |   `-- esales
    |               |       `-- web
    |               |-- resources
    |               `-- webapp
    |                   |-- WEB-INF
    |                   |   |-- content
    |                   |   `-- web.xml
    |                   `-- index.jsp
    `-- pom.xml
---


* Grading

    Your project will be graded on completeness and quality of product. In
    order for you to receive full credit in each area, it must be a)
    complete, b) done well, and c) tested.  The breakdown of grading 
    will be as follows:

        * README provided that describes where each requirement satisfied: 10pts

        * projects cleanly builds with Maven or Ant: 15pts

        * Project 1 functionality: 10pts

        * EJB Tier, remote interface, and EAR deployment: 30pts

        * Web UI integration: 15pts

        * Client access: 10pts

        * Transactions: 10pts

    Each area will be judged according to the following breakdown. For
    areas where testing does not apply (e.g., README and build), those 
    points will be assigned to quality:

        * complete: 60%

        * quality of implementation supplied: 30%

        * testing: 10%

* Submission Guidelines

    Please follow the 
    {{{../../../coursedocs/projects.html#Submission_Guidelines}
    project submission guidelines}}
    posted in the course overview.
