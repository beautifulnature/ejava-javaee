<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
        <groupId>ejava.javaee.projects.eDataShare.eDmv</groupId>
        <artifactId>eDmv</artifactId>
        <version>3.0.2012.2-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>eDmvDAO</artifactId>

    <name>eDMV DAO</name>
    <description>
        This project provides a sparse example of how to setup a JDBC and JPA
        DAO for use in the class project. It also provides a quick
        test/demo of the ingest data.
    </description>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>eDmvBO</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.0-api</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <scope>test</scope>
        </dependency>        
    </dependencies>

    <build>
         <!--tell the resource plugin to perform filtering on resources 
             to fill in JDBC URL, etc. -->
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <argLine>${surefire.argLine}</argLine>
                    <systemPropertyVariables>
                        <jdbc.driver>${jdbc.driver}</jdbc.driver>
                        <jdbc.url>${jdbc.url}</jdbc.url>
                        <jdbc.user>${jdbc.user}</jdbc.user>
                        <jdbc.password>${jdbc.password}</jdbc.password>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <!-- this is an example of creating a reusable test archive -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                        <configuration>
                            <!-- include or exclude as appropriate -->
                            <includes>
                                <include>META-INF/persistence.xml</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile> <!-- defines our default database -->
            <id>h2db</id>
            <activation>
                <property>
                    <name>jdbcdb</name>
                    <value>h2</value>
                </property>
            </activation>
            <properties>
                  <jdbc.driver>org.h2.Driver</jdbc.driver>
                  <jdbc.url>jdbc:h2:${basedir}/target/h2db/ejava</jdbc.url>
                  <jdbc.user>sa</jdbc.user>
                  <jdbc.password/>
                  <hibernate.dialect>
                      org.hibernate.dialect.H2Dialect
                  </hibernate.dialect>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>

        <profile> <!-- defines our default persistence provider -->
            <id>hibernate</id>
            <activation>
                <property> <!-- use this property to name alt persistence provider -->
                    <name>!jpa</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-entitymanager</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>

        <profile>
          <id>testing</id>
          <activation>
            <property>
              <name>!skipTests</name>
            </property>
          </activation>
          
          <build>
            <plugins>
              <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>        
                <version>1.4</version>
                
                <dependencies>
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>${h2db.version}</version>
                    </dependency>
                </dependencies>
                
                <configuration>
                    <username>${jdbc.user}</username>
                    <password>${jdbc.password}</password>
                    <driver>${jdbc.driver}</driver>
                    <url>${jdbc.url}</url>          
                </configuration>
                
                <executions>
                  <execution>
                      <id>drop-db-before-test</id>
                      <phase>process-test-resources</phase>
                      <goals>
                          <goal>execute</goal>
                      </goals>    
                      <configuration>              
                          <autocommit>true</autocommit>
                          <fileset>
                              <basedir>${basedir}/target</basedir>
                              <includes>
                                  <include>classes/ddl/*drop.ddl</include>                  
                              </includes>
                          </fileset>
                          <!-- the tables may not exist when tests are run -->
                          <onError>continue</onError>
                      </configuration>        
                  </execution>
                  
                  <execution>
                      <id>create-db-before-test</id>
                      <phase>process-test-resources</phase>
                      <goals>
                          <goal>execute</goal>
                      </goals>    
                      <configuration>              
                          <autocommit>true</autocommit>
                          <fileset>
                          <basedir>${basedir}/target</basedir>
                              <includes>
                                  <include>classes/ddl/*create.ddl</include>                  
                              </includes>
                          </fileset>
                          <print>true</print>
                      </configuration>        
                  </execution>
                  
                  <execution>
                      <id>populate-db-before-test</id>
                      <phase>process-test-resources</phase>
                      <goals>
                          <goal>execute</goal>
                      </goals>    
                      <configuration>              
                          <autocommit>true</autocommit>
                          <fileset>
                              <basedir>${basedir}/target</basedir>
                              <includes>
                                  <include>test-classes/ddl/*populate*.ddl</include>                  
                              </includes>
                          </fileset>
                      </configuration>        
                  </execution>
                  
                  <!--
                <execution>
                    <id>drop-db-after-test</id>
                    <phase>test</phase>
                    <goals>
                        <goal>execute</goal>
                    </goals>    
                    <configuration>              
                        <autocommit>true</autocommit>
                        <fileset>
                            <basedir>${basedir}/target</basedir>
                            <includes>
                                <include>classes/ddl/*drop.ddl</include>                  
                            </includes>
                        </fileset>
                    </configuration>        
                </execution>
                -->
                </executions>
              </plugin>          

                <!-- this useful plugin can be used to automatically generate the
                     DB schema from the Java entity classes. Whether you use it
                     or not - it is very useful in sanity checking your JPA mappings

                     Change the persistenceunit element to match your persistence unit
                     name if you copy this.
                     -->
                <plugin>
                    <artifactId>hibernate3-maven-plugin</artifactId>
                    <groupId>org.codehaus.mojo</groupId>
                    <configuration>
                        <hibernatetool destdir="target/classes/ddl">
                            <classpath>
                                <path location="${project.build.directory}/test-classes"/>
                            </classpath>
                            <jpaconfiguration persistenceunit="eDmvBO-test"
                                propertyfile="${basedir}/target/test-classes/hibernate.properties"/>
                        </hibernatetool>
                    </configuration>
                    <executions>
                        <execution>
                            <id>generate-drop-ddl</id>
                            <phase>process-test-resources</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <hibernatetool>
                                    <hbm2ddl export="false" create="false" drop="true" format="true" 
                                        outputfilename="${project.artifactId}-dropJPA.ddl"/>
                                </hibernatetool>
                            </configuration>
                        </execution>
                        <execution>
                            <id>generate-create-ddl</id>
                            <phase>process-test-resources</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <hibernatetool>
                                    <hbm2ddl export="false" create="true" drop="false" format="true" 
                                        outputfilename="${project.artifactId}-createJPA.ddl"/>
                                </hibernatetool>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>        
          </build>
        </profile>
    </profiles>
</project>
