Exercise 1: First Simple Application

* Part E: Leverage IDE using Eclipse 

** Objectives

    * {{{Section_A}Register JDK as a valid JRE instance}}

    * {{{Section_B}Import a project into Eclipse}}
    using maven-eclipse-plugin goals

    * {{{Section_C}Setup Eclipse to be able to execute Maven project goals}}

    * {{{Section_D}Setup environment to enable interactive debugging}} 

** Steps

    [Note:] Maven/Eclipse integration is probably the most volatile 
    aspects of the environment. 
    The Maven side is handled by the
    {{{http://maven.apache.org/plugins/maven-eclipse-plugin/}
    Apache Maven Eclipse Plugin}}.
    The Eclipse side is handled by a set of competing plug-ins that
    get installed into Eclipse; m2eclipse/M2E and q4e/IAM.  The 
    {{{http://m2eclipse.codehaus.org/} m2eclipse plugin}}
    is going through
    considerable changes and is in the process of becoming an 
    {{{http://www.eclipse.org/m2e/} Eclipse project (M2E)}}
    There is an alternative offered by
    {{{http://code.google.com/p/q4e/} Google's q4e}}
    , which is soon to be
    {{{http://www.eclipse.org/iam/} Eclipse IAM}}. A comparison of 
    the various options is located on the 
    {{{http://docs.codehaus.org/display/MAVENUSER/Eclipse+Integration}
    Codehaus Wiki}}. We will be using a combination of the Maven
    Eclipse Plugin and m2eclipse. The current documentation for
    m2eclipse makes no mention of using the Eclipse Plugin, but
    I found that it was necessary to get "src" directories correctly
    specified during project import. The m2eclipse plugin now no 
    longer supports normal project imports and external tools. It 
    must be imported specifically as a maven project and all actions
    are invoked through the Run... capability.

    []


*** {Section A}: Register your JDK as a JRE option for running maven 
    plugin commands.

    [[1]] Register your JDK with Eclipse as a valid JRE option. Eclipse
    will, by default, launch external commands using the default JRE.
    Maven wants this to be a JDK, since it invokes the compiler.

        * Window -> Preferences -> Java -> Installed JREs 

        * Select "Add.." for a Standard VM

        * Select your JDK instance for the JRE Home. This was 
        c:/apps/jdk1.5.0_17 on my system.

        * You may optionally set this as the default. However, we
        will specifically point to this later.

*** {Section B}: Importing a Maven project into Eclipse

        [Note:] If you haven't already done so, download and install
        {{{http://www.eclipse.org/}Eclipse}} as described in
        {{{ex0.html#Part H}Exercise 0}}. 

        [Note:] In this section, we'll use the maven-eclipse-plugin
        to generate a set of .project and .classpath files that are
        used by Eclipse to import the project. You will continue
        to maintain the project configuration through the pom.xml.
        When you make changes to the pom.xml file, just re-run the 
        plugin and hit refresh within Eclipse to see the changes. 
        
        [Note:] Any changes to the project dependencies you make within
        Eclipse are not updated in the pom.xml. Use the pom.xml file
        to specify all project dependencies and refresh your Eclipse
        project to see the changes.

        [Note:] Documentation on this plugin is located at the
        {{{http://maven.apache.org/plugins/maven-eclipse-plugin/overview.html}
        Maven Eclipse Plugin Site}}


    [[1]] Go to the project base directory an execute the eclipse:m2eclipse
    goal. Note that this is different from the older eclipse:eclipse goal.
    
        [Note:] You'll see a download of the eclipse-plugin and a large 
        number of dependencies the first time you execute the
        plugin. If it fails on any of the downloads, re-execute.

        [Note:] Maven downloads only occur when a dependency is not located
        in your local repository. Although some failures do happen during
        download, download attempts will end as you have successfully
        executed a majority of the goals associated with the examples
        in class. I work on many of these examples disconnected from the
        internet on my laptop. However, I am careful to execute targets
        ahead of time to make sure I have what I need before I disconnect.

        []

---
$ mvn eclipse:m2eclipse
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'eclipse'.
[INFO] ------------------------------------------------------------------------
[INFO] Building My First Simple Project
[INFO]    task-segment: [eclipse:m2eclipse]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing eclipse:m2eclipse
[INFO] No goals needed for project - skipping
[INFO] [eclipse:m2eclipse]
[INFO] Using source status cache: c:\proj\ejava-javaee\working\solutions\ex1\target\mvn-eclipse-cache.properties
[INFO] Using as WTP server : null
[INFO] Wrote settings to C:\proj\ejava-javaee\working\solutions\ex1\.settings\org.eclipse.jdt.core.prefs
[INFO] Wrote Eclipse project for "ex1" to c:\proj\ejava-javaee\working\solutions\ex1.
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Sun Jan 25 16:46:08 EST 2009
[INFO] Final Memory: 6M/11M
[INFO] ------------------------------------------------------------------------


$ cat .classpath
<classpath>
  <classpathentry kind="src" path="src/main/java"/>
  <classpathentry kind="src" path="src/test/java" output="target/test-classes"/>
  <classpathentry kind="src" path="src/test/resources" output="target/test-classes" excluding="**/*.java"/>
  <classpathentry kind="output" path="target/classes"/>
  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
  <classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER"/>
</classpath>


$ cat .project
<projectDescription>
  <name>ex1</name>
  <comment/>
  <projects/>
  <buildSpec>
    <buildCommand>
      <name>org.eclipse.jdt.core.javabuilder</name>
    </buildCommand>
    <buildCommand>
      <name>org.maven.ide.eclipse.maven2Builder</name>
    </buildCommand>
  </buildSpec>
  <natures>
    <nature>org.eclipse.jdt.core.javanature</nature>
    <nature>org.maven.ide.eclipse.maven2Nature</nature>
  </natures>
</projectDescription>
---


    [[1]] Inside Eclipse, import the project using

        * File->Import

        * Select General->Maven Projects into Workspace

        * Browse to the project directory. The next panel should show 
        a list of projects that include "ex1".

        * There may be a noticeable delay while it rebuilds the 
        workspace.
        
        * Once imported, you should be able to open a suitable Perspecive 
        and browse the files of the project.

    []

[images/first_project_imported_into_eclipse.png] First Project Imported Into Eclipse

            [Note:] If the references to commons-logging, log4j, and
            junit are labelled as unresolved, check that you used the
            "Maven Projects" import and not the "Existing Project into
            Workspace" import. Also check the value for Local 
            Repository under Window->Preferences-> Maven->Installations.


*** {Section C}: Setup Eclipse to be able to execute Maven project goals


    [[1]] Right-click on the pom.xml file and execute Run As->"Maven install".
    You can also get back to this window through the Run As option on the 
    toolbar once you have the project selective. 

    [[1]] Refresh the project directory to be able to see any new target 
    artifacts, including the surefire-repots. 

        [Note:] You can full screen any display by double clicking its tab.

        [Note:] You can create a separate window for any display by
        dragging its tab away from the main window. I find this helpful
        when I want to watch the console output during a debugging session.
        This is especially cool when you have dual monitors. If your window 
        configuration ever gets messed up, you can use Window->"Reset
        Perspective" to get it back to a sane state.

        []

[images/ex1_separate_eclipse_windows.png] Separate Eclipse Windows

    [[1]] Notice that most maven goals are provided on the Run As pull-down
    menu. However, some are not and I do not know how the list is determined.
    If you need a goal accessible that is not listed, then do the following.

        * Right click on the pom.xml file and select Run As -> Run Configurations.

        * Double-click on the Maven Build type. A New_configuration shows
        up.

        * Change the name to "mvn debug"

        * Set the Base Directory to the variable $\{project_loc\}

        * Set Goals to "test"

        * Set Profiles to "debugger". This should match the profile
        added in your settings.xml. See next step.

        * Verify that you are using a JDK 5 instance under the JRE tab.

        * press Apply and Close


*** {Section D}: Setup environment to enable interactive debugging

        [Note:] Although it is possible to run JUnit directly from within
        Eclipse and have test-level granularity, doing so will leave many
        of the test configuration properties defined within Maven left 
        behind. For that reason, I will show you how to run the debugger
        running under a normal Maven configuration. When doing this, you 
        need to realize that there will be 2 processes; the "remote"
        application being launched/tested and the "local" debugger that is
        commanding the remote JVM through its actions.

    [[1]] Add the following profile entry to your .m2/settings.xml or pom.xml
    file. I would normally place this in my settings.xml file since it
    is specific to the build site. This entry will conditionally set the
    Maven sirefire.argLine if the "debugger" system property is present.
    surefire.argLine is a property name we made up. Nothing significant 
    will happen yet.

---
<settings xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

...
    
    <profiles>
        <profile>
            <id>debugger</id>
            <activation>
                <property>
                    <name>debugger</name>
                </property>
            </activation>
            <properties>
                <surefire.argLine>-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent -Djava.compiler=NONE</surefire.argLine>
            </properties>                                  
        </profile>        
    </profiles>
---

        [Note:] Profiles are activated by a specific reference in
        activeProfiles, passing -P\<profile name\> on the command line,
        or through a test of a property. We will use the presence of the
        the "debugger" system property (e.g., -Ddebugger=xxx).

        [Note:] Use "!debugger" if you want to test the absence of a 
        property.

    [[1]] Add the following to your pom.xml.

---
<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

   ...

  <build>
    <plugins>

        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
                <argLine>${surefire.argLine}</argLine>
            </configuration>
        </plugin>

    </plugins>      
  </build>
</project>
---

    [[1]] Test the profile and plugin adjustments by executing 
    "mvn test -Pdebugger" from your base directory command line. This
    should be the same behavior if you ran the "mvn debug" Run As
    configuration from Eclipse. However, run only one at a time, since they 
    attempt to listen on a hard coded port number.

---
$ mvn test -Pdebugger
[INFO] Scanning for projects...
[INFO] -----------------------------------------------------------------
[INFO] Building My First Simple Project
[INFO]    task-segment: [test]
[INFO] -----------------------------------------------------------------

...

[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test]
[INFO] Surefire report directory: c:\jhu\784\ex1\target\surefire-reports
Listening for transport dt_socket at address: 8000
---

    [[1]] Set up the debugger in client mode. This does not 
    accept a variable project location, so we'll have to set one up
    to physically point to the project of interest.

        * With your pom.xml selected, select Debug As->Debug Configurations.

        * Double click Remote Java Application.

        * Most of the important values are filled in with acceptable
        default values. Verify the Port# is the same as what the 
        application is waiting for a connect on (8000).

        * Click "Debug". The paused application should run to completion.
        This configuration will be saved under the name "ex1".

    [[1]] Add a breakpoint and relaunch the program.

        * Open up AppTest.java and set a breakpoint for 
        log.info() in testApp(). One way to do this is to double click on
        the left margin.

        * Run the remote portion of the application within Eclipse by
        selecting pom.xml -> Debug As -> Debug Configurations... ->
        "mvn debug". This was created in the previous section.

        * Run the debugger in client mode using the configuration from
        the previous step.  You can get to it by selecting the pom.xml -> 
        Debug As -> Debug Configurations... and select "ex1". If you cannot 
        locate it, it can be recreated by double-clicking on Remote Java 
        Application.

        * This time the application will
        pause at the breakpoint and Eclipse will open the debugger.

        * Use the debugger perspective to look at variables and step
        through the execution of the code.

        []

[images/ex1_eclipse_debugger.png] Eclipse Debugger

* Summary    

    In this part of the exercise, you were able to integrate your Maven 
    and Eclipse environments. This allows you to leverage the Maven plugins
    as your core build system and leverage Eclipse for creating Java files
    and providin.

    As mentioned, Eclipse will be the primary demonstration environment 
    in class, but you may use other IDEs, like NetBeans, to match personal
    preferences.
