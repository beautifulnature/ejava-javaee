Java EE Exercise 

* Create Custom JNDI Name

* Objectives

    * Take control of the JNDI name used for our deployed EJBs
    by specifying deployment descriptor values.

        * {{{Default_Name} 
            Control the default root JNDI name used
        }}

        * {{{Custom_Name}
            Control the complete JNDI name used
        }} 


* {Default Name} Control the default root JNDI name used

    As you witnessed in part A of the exercise, the default JNDI name
    was derived from the EAR and EJB names. The EAR name was a function
    of its artifactId and version number. To take a first step in customizing
    the JNDI name, we might just want version number to not be part of
    the JNDI name. Lets do that here.

    [[1]] Build and deploy you application from partA and note the 
    JNDI name for the application. Use the jmx-console to view 
    the actual name.

        * Navigate to http://localhost:8080/jmx-console/ in your browser

        * Click on service=JNDIView

        * Click on Invoke under list()

        * Note the JNDI names for the RegistrarEJB under the Global
        JNDI Namespace. 

---
Global JNDI Namespace

  +- javaeeExEAR-1.0-SNAPSHOT (class: org.jnp.interfaces.NamingContext)
  |   +- RegistrarEJB (class: org.jnp.interfaces.NamingContext)
  |   |   +- local (proxy: $Proxy69 implements interface myorg.javaeeex.ejb.RegistrarLocal,interface org.jboss.ejb3.JBossProxy)
  |   |   +- remote (proxy: $Proxy67 implements interface myorg.javaeeex.ejb.RegistrarRemote,interface org.jboss.ejb3.JBossProxy)
---

    [[[1]] As an intermediate step, assign a finalName to the EAR so
    that it does not use the version in the EAR and JNDI name.

---
    </dependencies>

    <build>
        <finalName>javaeeEx</finalName>
    </build>

    <profiles>
---

    [[1]] Build and install the application from the root. 

    [Note:] Although the objects will be de-registered from the JNDI tree when you
    change the JNDI name, the naming contexts (aka directories) will remain
    (empty) until you reboot the application server.

    []

---
Global JNDI Namespace

  +- javaeeExEAR-1.0-SNAPSHOT (class: org.jnp.interfaces.NamingContext)
  |   +- RegistrarEJB (class: org.jnp.interfaces.NamingContext)

...

 +- javaeeEx (class: org.jnp.interfaces.NamingContext)
  |   +- RegistrarEJB (class: org.jnp.interfaces.NamingContext)
  |   |   +- local (proxy: $Proxy76 implements interface myorg.javaeeex.ejb.RegistrarLocal,interface org.jboss.ejb3.JBossProxy)
  |   |   +- remote (proxy: $Proxy75 implements interface myorg.javaeeex.ejb.RegistrarRemote,interface org.jboss.ejb3.JBossProxy)
---

---
Tests in error:
  testPing(myorg.javaeeex.ejbclient.RegistrarTest)

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
---

---
$ more `find . -name "*.txt" | grep surefire`
 -------------------------------------------------------------------------------
Test set: myorg.javaeeex.ejbclient.RegistrarTest
 -------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.297 sec  FAILURE!
testPing(myorg.javaeeex.ejbclient.RegistrarTest)  Time elapsed: 0.172 sec  ERROR!
javax.naming.NameNotFoundException: remote not bound
---

    [[1]] Now update the Test/pom.xml surefire configuration to this new
    JNDI name and rebuild.

---
                    <systemProperties>
                        <property>
                          <name>jndi.name.registrar</name>
                          <!--
                          <value>
                              javaeeExEAR-1.0-SNAPSHOT/RegistrarEJB/remote
                          </value>
                          -->
                          <value>
                              javaeeEx/RegistrarEJB/remote
                          </value>
---
---
 T E S T S
 -------------------------------------------------------
$mvn clean install

...


Running myorg.javaeeex.ejbclient.RegistrarTest
 -getting jndi initial context
 -jndi={jnp.parsedName=, java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory, java.naming.provider.url=l
ocalhost:1099, java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces}
 -jndi name:javaeeEx/RegistrarEJB/remote
 -*** testPing ***
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.375 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] [jar:jar]
[WARNING] JAR will be empty - no content was marked for inclusion!
[INFO] Building jar: C:\proj\ejava-javaee\working\solutions\javaeeEx\partB\javaeeExTest\target\javaeeExTest-1.0-SNAPSHOT
.jar
[INFO] [install:install]
[INFO] Installing C:\proj\ejava-javaee\working\solutions\javaeeEx\partB\javaeeExTest\target\javaeeExTest-1.0-SNAPSHOT.ja
r to c:\proj\repository.test\myorg\javaee\javaeeExTest\1.0-SNAPSHOT\javaeeExTest-1.0-SNAPSHOT.jar
[INFO]
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] ------------------------------------------------------------------------
[INFO] Java EE Exercise ...................................... SUCCESS [2.375s]
[INFO] Java EE Exercise EJB .................................. SUCCESS [1.375s]
[INFO] Java EE Exercise EAR .................................. SUCCESS [0.406s]
[INFO] Java EE Exercise Remote Test .......................... SUCCESS [3.859s]
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
---

* {Custom Name} Control the complete JNDI name used

    Although the above approach was a decent step at making the JNDI name
    not so version-specific, there are many times when we'll want to 
    manually control the entire JNDI name used. We can do this by adding
    a deployment descriptor.


    [[1]] Now lets add a vender-specific, META-INF/jboss.xml deployment
    descriptor file to specify a custom JNDI name.

    [Note:] Your server will throw an obscure NullPointerException if
    you specify a JNDI name for the remote or locate interface in the
    jboss.xml and your EJB has not implemented those interfaces. Check
    the implements clause of the EJB and make sure you don't specify in
    the jboss.xml file what is not being implemented in the EJB.

    []

---
$ mkdir -p javaeeExEJB/src/main/resource/META-INF
---
---
$ cat javaeeExEJB/src/main/resource/META-INF/jboss.xml
<?xml version="1.0" encoding="UTF-8"?>
<!-- replace with this declaration when using jboss5
<jboss
    xmlns="http://www.jboss.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation ="http://www.jboss.com/xml/ns/javaee http://www.jboss.org/j2ee/schema/jboss_5_0.xsd"
    version="5.0">
-->
<jboss xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.jboss.org/j2ee/schema http://www.jboss.org/j2ee/schema/jboss_5_0.xsd"
    version="5.0">

    <enterprise-beans>
        <session>
            <ejb-name>RegistrarEJB</ejb-name>
            <jndi-name>/myorg/javaeeEx/RegistrarEJB/remote</jndi-name>
            <local-jndi-name>/myorg/javaeeEx/RegistrarEJB/local
            </local-jndi-name>
        </session>
    </enterprise-beans>
</jboss>

---

    [[1]] Rebuild from the root, observe the JNDI name change. Note too that the 
    RMI Test will fail until we update the surefire configuration with our
    totally custom name.

---
+- myorg (class: org.jnp.interfaces.NamingContext)
  |   +- javaeeEx (class: org.jnp.interfaces.NamingContext)
  |   |   +- RegistrarEJB (class: org.jnp.interfaces.NamingContext)
  |   |   |   +- local (proxy: $Proxy108 implements interface myorg.javaeeex.ejb.RegistrarLocal,interface org.jboss.ejb3.JBossProxy)
  |   |   |   +- remote (proxy: $Proxy107 implements interface myorg.javaeeex.ejb.RegistrarRemote,interface org.jboss.ejb3.JBossProxy)
---

    [[1]] Update the surefire configuration for the JNDI name.

---
                    <systemProperties>
                        <property>
                          <name>jndi.name.registrar</name>
                          <!--
                          <value>
                              javaeeExEAR-1.0-SNAPSHOT/RegistrarEJB/remote
                          </value>
                          <value>
                              javaeeEx/RegistrarEJB/remote
                          </value>
                          -->
                          <value>
                              myorg/javaeeEx/RegistrarEJB/remote
                          </value>
                        </property>
                    </systemProperties>
---

    [[1]] Rebuild the application and things should now work again with the 
    custom JNDI name.

---
$ mvn clean install

...

Running myorg.javaeeex.ejbclient.RegistrarTest
 -getting jndi initial context
 -jndi={jnp.parsedName=, java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory, java.naming.provider.url=l
ocalhost:1099, java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces}
 -jndi name:myorg/javaeeEx/RegistrarEJB/remote
 -*** testPing ***
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.375 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] [jar:jar]
[WARNING] JAR will be empty - no content was marked for inclusion!
[INFO] Building jar: C:\proj\ejava-javaee\working\solutions\javaeeEx\partB\javaeeExTest\target\javaeeExTest-1.0-SNAPSHOT
.jar
[INFO] [install:install]
[INFO] Installing C:\proj\ejava-javaee\working\solutions\javaeeEx\partB\javaeeExTest\target\javaeeExTest-1.0-SNAPSHOT.ja
r to c:\proj\repository.test\myorg\javaee\javaeeExTest\1.0-SNAPSHOT\javaeeExTest-1.0-SNAPSHOT.jar
[INFO]
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] ------------------------------------------------------------------------
[INFO] Java EE Exercise ...................................... SUCCESS [2.390s]
[INFO] Java EE Exercise EJB .................................. SUCCESS [1.391s]
[INFO] Java EE Exercise EAR .................................. SUCCESS [2.234s]
[INFO] Java EE Exercise Remote Test .......................... SUCCESS [1.907s]
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
---

    [[1]] We have the same structure that we ended with in partA. However, we have added
    the jboss.xml file to specify the custom JNDI name.

---
partB/
|-- javaeeExEAR
|   `-- pom.xml
|-- javaeeExEJB
|   |-- pom.xml
|   `-- src
|       `-- main
|           |-- java
|           |   `-- myorg
|           |       `-- javaeeex
|           |           `-- ejb
|           |               |-- RegistrarEJB.java
|           |               |-- RegistrarLocal.java
|           |               `-- RegistrarRemote.java
|           `-- resources
|               `-- META-INF
|                   `-- jboss.xml
|-- javaeeExTest
|   |-- pom.xml
|   `-- src
|       `-- test
|           |-- java
|           |   `-- myorg
|           |       `-- javaeeex
|           |           `-- ejbclient
|           |               `-- RegistrarTest.java
|           `-- resources
|               |-- jndi.properties
|               `-- log4j.xml
`-- pom.xml
---

    []

    []

** Summary

    * In this exercise, we leveraged two ways to gain control of the 
    JNDI name.

        * we used the finalName to remove the version number from the
        EAR name within Maven that was being used by the provider as 
        a basis for an automatically generated JNDI name.

        * we used a META-INF/jboss.xml file to manually specifiy a 
        fully customized JNDI name.

