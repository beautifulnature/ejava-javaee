Java EE Exercise 

* Create Custom JNDI Name

* Objectives

    * {{{Control the JNDI name used for an EJBs}
        Control the JNDI name used for an EJB}}
        by specifying deployment descriptor values.

* {Control the JNDI name used for an EJB}

    The default JNDI name used for the EJB is vendor-dependent in JavaEE 5
    and will be take a standard form in JavaEE 6. However, we can control
    the JNDI name and make it be what we want by specifying it within the 
    application's deployment descriptor.

    [[1]] Lets add a vender-specific, META-INF/jboss.xml deployment
    descriptor file to specify a custom JNDI name.

    [Note:] Your server will throw an obscure NullPointerException if
    you specify a JNDI name for the remote or locate interface in the
    jboss.xml and your EJB has not implemented those interfaces. Check
    the implements clause of the EJB and make sure you don't specify in
    the jboss.xml file what is not being implemented in the EJB.

    []

---
$ mkdir -p javaeeExEJB/src/main/resources/META-INF
---
---
$ cat javaeeExEJB/src/main/resources/META-INF/jboss.xml
<?xml version="1.0" encoding="UTF-8"?>
<jboss
    xmlns="http://www.jboss.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation ="http://www.jboss.com/xml/ns/javaee http://www.jboss.org/j2ee/schema/jboss_5_0.xsd"
    version="3.0">

    <enterprise-beans>
        <session>
            <ejb-name>RegistrarEJB</ejb-name>
            <jndi-name>/myorg/javaeeEx/RegistrarEJB/remote</jndi-name>
            <local-jndi-name>/myorg/javaeeEx/RegistrarEJB/local
            </local-jndi-name>
        </session>
    </enterprise-beans>
</jboss>

---

    [[1]] Rebuild from the root, observe the JNDI name change. Note too that the 
    RMI Test will fail until we update the surefire configuration with our
    totally custom name.

---
 +- myorg (class: org.jnp.interfaces.NamingContext)
  |   +- javaeeEx (class: org.jnp.interfaces.NamingContext)
  |   |   +- RegistrarEJB (class: org.jnp.interfaces.NamingContext)
  |   |   |   +- local (class: Proxy for: myorg.javaeeex.ejb.RegistrarLocal)
  |   |   |   +- remote (class: Proxy for: myorg.javaeeex.ejb.RegistrarRemote)
---

    [[1]] Update the surefire configuration for the JNDI name.

---
        <systemPropertyVariables>
            <jndi.name.registrar>myorg/javaeeEx/RegistrarEJB/remote</jndi.name.registrar>
        </systemPropertyVariables>
---

    [[1]] Rebuild the application and things should now work again with the 
    custom JNDI name.

---
$ mvn clean install

...

 T E S T S
 -------------------------------------------------------
Running myorg.javaeeex.ejbclient.RegistrarTest
 -getting jndi initial context
 -jndi={jnp.parsedName=, java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory, java.naming.provider.url=127.0.0.4:1099, java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces}
 -jndi name:myorg/javaeeEx/RegistrarEJB/remote
 -*** testPing ***
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.123 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-jar-plugin:2.3.1:jar (default-jar) @ javaeeExTest ---
[WARNING] JAR will be empty - no content was marked for inclusion!
[INFO] Building jar: /home/jcstaff/solutions/javaeeEx/javaeeExTest/target/javaeeExTest-1.0-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.3.1:install (default-install) @ javaeeExTest ---
[INFO] Installing /home/jcstaff/solutions/javaeeEx/javaeeExTest/target/javaeeExTest-1.0-SNAPSHOT.jar to /home/jcstaff/.m2/repository/myorg/javaee/javaeeExTest/1.0-SNAPSHOT/javaeeExTest-1.0-SNAPSHOT.jar
[INFO] Installing /home/jcstaff/solutions/javaeeEx/javaeeExTest/pom.xml to /home/jcstaff/.m2/repository/myorg/javaee/javaeeExTest/1.0-SNAPSHOT/javaeeExTest-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Java EE Exercise .................................. SUCCESS [1.490s]
[INFO] Java EE Exercise EJB .............................. SUCCESS [7.798s]
[INFO] Java EE Exercise EAR .............................. SUCCESS [1.772s]
[INFO] Java EE Exercise Remote Test ...................... SUCCESS [36.721s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS

---

    [[1]] We have the same structure that we ended with in partA. However, we have added
    the jboss.xml file to specify the custom JNDI name.

---
partB/
|-- javaeeExEAR
|   `-- pom.xml
|-- javaeeExEJB
|   |-- pom.xml
|   `-- src
|       `-- main
|           |-- java
|           |   `-- myorg
|           |       `-- javaeeex
|           |           `-- ejb
|           |               |-- RegistrarEJB.java
|           |               |-- RegistrarLocal.java
|           |               `-- RegistrarRemote.java
|           `-- resources
|               `-- META-INF
|                   `-- jboss.xml
|-- javaeeExTest
|   |-- pom.xml
|   `-- src
|       `-- test
|           |-- java
|           |   `-- myorg
|           |       `-- javaeeex
|           |           `-- ejbclient
|           |               `-- RegistrarTest.java
|           `-- resources
|               |-- jndi.properties
|               `-- log4j.xml
`-- pom.xml
---

    []

    []

** Summary

    * In this exercise, we manually specified the EJB JNDI names so
    that we were not dependent on the provider-specific name selected
    by the vendor. More specifically, we used a META-INF/jboss.xml file
    to manually specifiy a fully customized JNDI name.

