Java EE Exercise 

Part F: Securing the Web Tier

    This exercise will step you through the setup of security within 
    the web tier. We will re-integrate the web tier with the newly
    secured EJB tier and then add some layers of security on the web tier
    itself. Although it is very critical to have the EJB tier ensure
    security policies are being applied. The web tier also has a duty
    to aid in implementing the business rules of the application and
    extend the security protections to users intergrated through the web
    tier.

* Objectives

    * Demonstrate the web tier is currently unauthorized to invoke
      certain methods of the EJB.

        * {{{Demonstrate_WAR_Not_Configured_for_Security}
            Demonstrate WAR Not Configured for Security
        }}


    * Re-integrate with the newley Secured EJB

        * {{{Associate_the_WAR_with_a_Security_Domain}
            Associate the WAR with a Security Domain
        }}

        * {{{Implement_FORM_Login}
             Implement FORM Login
        }}    

    * Add confidentiality

        * {{{Implement_HTTPS_Access}
             Implement HTTPS Access
        }}    
        

* {Demonstrate WAR Not Configured for Security}

    [[1]] Lets first demonstrate that our web tier is no longer authorized
    to access certain EJB methods by building and deploying the application
    and then accessing the "Get All People" from the Admin page.

        * execute "mvn clean install -rf :javaeeExEJB"

        * navigate to the main page of the web application deployed
        to JBoss {{http:/localhost:8080/javaeeEx}} 

        * select {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin}}

        * select {{{http://localhost:8080/javaeeEx/model/admin/handler?command=Get+All+People&index=0&count=10}
        Get All People}}

        []

        [Note:] The web application may display a confusing error at this point
        due to an error in a URL reference to ErrorPage.jsp. We will fix that next.

---
Command Error

A request was made, but the command was not recognized
. command=Get All People
Go to Main Page
---

        []

        * review the server output

        []
---
...
16:20:06,223 DEBUG [myorg.javaeeex.web.RegistrarHandlerServlet] command=Get All People
16:21:12,993 ERROR [myorg.javaeeex.web.RegistrarHandlerServlet] error in EJB.getAllPeople: javax.ejb.EJBAccessException: Caller unauthorized
        at org.jboss.ejb3.security.RoleBasedAuthorizationInterceptorv2.invoke(RoleBasedAuthorizationInterceptorv2.java:199) [:1.7.17]
...
---

        You can see from the server output that the call from the 
        servlet was not authorized but the exception was not properly 
        handled by the logic. Our definition of DISPLAY_EXCEPTION_URL
        was incorrectly set to ErrorPage.jsp, which expected an 
        exception variable to be set. Since it was not set, a 
        NullPointerException was thrown and the outter doGet went into
        page not found error logic.

---
$ cat ./javaeeExWAR/src/main/java/myorg/javaeeex/web/RegistrarHandlerServlet.java
...
    private abstract class Handler {
        ...
        protected static final String DISPLAY_EXCEPTION_URL =
            "/WEB-INF/content/ErrorPage.jsp";
        ...
        public void handle(HttpServletRequest request,
                HttpServletResponse response)
                throws ServletException, IOException {
            try {
                doHandle(request, response);
            }
            catch (Exception ex) {
                log.error("error in " + action, ex);
                request.setAttribute(EXCEPTION_PARAM, ex);
                RequestDispatcher rd = getServletContext().getRequestDispatcher(
                    DISPLAY_EXCEPTION_URL);
                rd.forward(request, response);
            }
        }
---

        []

        []

    [[1]] Update the definition of DISPLAY_EXCEPTION_URL to reference
    the DisplayException.jsp

---
$ cat ./javaeeExWAR/src/main/java/myorg/javaeeex/web/RegistrarHandlerServlet.java
...
        protected static final String DISPLAY_EXCEPTION_URL =
            "/WEB-INF/content/DisplayException.jsp";
---

    [[1]] Rebuild and redeploy the application and refresh the page in
    error in the browser.

---
$ mvn clean install -rf :javaeeExEJB
...
---
---
//web page after refresh
General Exception Page

An error was reported by the application. More detailed information may follow.

.
javax.ejb.EJBAccessException: Caller unauthorized at org.jboss.ejb3.security.RoleBasedAuthorizationInterceptorv2.invoke(RoleBasedAuthorizationInterceptorv2.java:199) at 
---

    Notice how we were immediately rejected with no chance to login. This
    is an indication that our WAR is not yet configured to implement
    a security login. However, since some of our EJB methods are configured for
    anonymous callers -- we can invoke some methods successfully without 
    effort.

---
$ cat javaeeExEJB/src/main/resources/META-INF/jboss.xml
...
    <security-domain>other</security-domain>
    <unauthenticated-principal>guest</unauthenticated-principal>
---
---
$ cat 

@Stateless
@RolesAllowed({"user"})
public class RegistrarEJB implements RegistrarLocal, RegistrarRemote {
...
    @PermitAll
    public void ping() {
        log.debug("ping called");
        log.debug("caller=" + ctx.getCallerPrincipal().getName());
    }
...
---

    [[1]] Invoke one of the EJB methods that accepts anonymous callers.

        * Select {{{http://localhost:8080/javaeeEx/model/handler?command=Ping}
        invoke anonymous EJB.ping()}} from the main menu.

        []

---
Result: ping() complete
Go to Main Page
---


* {Associate the WAR with a Security Domain}

    In this section we will associate the web tier with a security domain and
    provide the capabilty to authicate with the server.

    [[1]] Associate the WAR with the "other" application policy using a 
    WEB-INF/jboss-web.xml

    [Note:] This is the same domain used by the EJB. However, for some
    reason, the web tier uses a full JNDI reference and the EJB tier
    uses just the name.  The application policy will not be displayed
    in the JNDI tree of the JMX console until used.

    []

---
$ cat javaeeExWAR/src/main/webapp/WEB-INF/jboss-web.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE jboss-web PUBLIC
  "-//JBoss//DTD Web Application 2.4//EN"
  "http://www.jboss.org/j2ee/dtd/jboss-web_4_0.dtd">
  
<jboss-web>
      <security-domain>java:/jaas/other</security-domain>      
</jboss-web>
---

    [[1]] Declare a login-config and the security roles we will
    use within this applicaton.

---
$ cat javaeeExWAR/src/main/webapp/WEB-INF/web.xml

...
    <login-config>
        <auth-method>BASIC</auth-method>
        <realm-name>javaeeEx</realm-name>
    </login-config>

    <security-role>
        <role-name>admin</role-name>
    </security-role>
</web-app>
---

    [[1]] Declare a security-constraint for the servlet
    when accessed thru the admin URL. For this to work we must provide
    a url-pattern that matches what will be used for the AdminHandler
    and a role defined in our application-policy. The transport-guarantee
    is used to trigger the use of HTTPS for URLs matching this 
    pattern.

---
$ cat javaeeExWAR/src/main/webapp/WEB-INF/web.xml

...
    <servlet-mapping> 
        <servlet-name>AdminHandler</servlet-name> 
        <url-pattern>/model/admin/handler</url-pattern> 
    </servlet-mapping> 
...
    </filter-mapping>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>admin-access</web-resource-name>
            <url-pattern>/model/admin/handler</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>admin</role-name>
        </auth-constraint>
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <login-config>
...
---

    [[1]] Rebuild and deploy the application.

---
$ mvn clean install -rf :javaeeExEJB
...
[INFO] Reactor Summary:
[INFO] 
[INFO] Java EE Exercise EJB .............................. SUCCESS [5.469s]
[INFO] Java EE Exercise WAR .............................. SUCCESS [2.917s]
[INFO] Java EE Exercise EAR .............................. SUCCESS [1.551s]
[INFO] Java EE Exercise Remote Test ...................... SUCCESS [35.084s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
---

    [[1]] Attempt to get all people as an authorized user. 

        * Access the {{{http://localhost:8080/javaeeEx/}Main Page}}

        * Click on {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin Page}}

        * Click on {{{http://localhost:8080/javaeeEx/model/admin/handler?command=Get+All+People&index=0&count=10}Get All People}}. You should get a browser pop-up requesting User Name and Password for the javaeeEx Realm.

        * Log in with credentials admin2/password. This user was assigned both 
        the user role (required by the EJB) and the admin role (required
        by the web tier). You should see the People Display

    [[1]] Attempt to get all people as an unauthorized user. This should fail
    shortly after logging in.

        * Exit and restart the browser.

        * Access {{{http://localhost:8080/javaeeEx/model/admin/handler?command=Get+All+People&index=0&count=10}Get All People}} again. You should get a browser pop-up requesting User Name and Password for the javaeeEx Realm.

        * Log in with credentials admin1/password. This user was assigned
        only the admin role (required by the web tier) but does not have
        the user role. You should see an error about the user being unauthorized.

    [[1]] Extend the security configuration to cover the Admin page. Add the
    following to the web.xml. Prior to adding this, any user could access the
    Admin JSP page and then receive a challenge once directed to the 
    backend servlet URL. With this change, they will be challenged before
    they get to the JSP since we are adding the url-pattern of the JSP.

---
$ cat javaeeExWAR/src/main/webapp/WEB-INF/web.xml

...
        <web-resource-collection>
            <web-resource-name>admin-access</web-resource-name>
            <url-pattern>/admin/*</url-pattern>
            <url-pattern>/model/admin/handler</url-pattern>
        </web-resource-collection>
...
---

    [[1]] Rebuild and deploy the application.

---
$ mvn clean install -rf :javaeeExEJB
...
[INFO] Reactor Summary:
[INFO] 
[INFO] Java EE Exercise EJB .............................. SUCCESS [5.469s]
[INFO] Java EE Exercise WAR .............................. SUCCESS [2.917s]
[INFO] Java EE Exercise EAR .............................. SUCCESS [1.551s]
[INFO] Java EE Exercise Remote Test ...................... SUCCESS [35.084s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
---

    [[1]] Attempt to access the Admin JSP page as you did prior to this step.

        * Access the {{{http://localhost:8080/javaeeEx/}Main Page}}

        * Click on {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin Page}}. 
        At this point you must provide admin login credentials to go any further 
        in the application.

* {Implement FORM Login}

    You currently have enough to implement some basic security. However, with the 
    BASIC login-config we don't have much of a chance to interact with the user
    (e.g., what if they have forgotten their credentials) and it is also 
    impossible to logout without closing the browser. We will fix this issue
    by implementing a FORM login-config and by adding a logout feature.

    [[1]] Create a JSP for handling login requests. This form must have the 
    following properties. Anything else (e.g., tables, extra information)
    is optional.

        * an action called "j_security_check"

        * a text input type called "j_username"

        * a password input type called "j_password"

---
$ cat javaeeExWAR/src/main/webapp/WEB-INF/content/Login.jsp

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">

<html>
  <head><title>JavaEE Exercise Login Form</title></head>
  <body>
    <h1>Login Required</h1>
    <form action="j_security_check" method="POST">
       <table border="0" width="30%" cellspacing="3" cellpadding="2">
          <tr>
             <td><b>User Name</b></td>
             <td><input type="text" size="20" name="j_username"></td>
          </tr>
          <tr>
             <td><b>Password</b></td>
             <td><input type="password" size="10" name="j_password"></td>
          </tr>
          <tr>
             <td><p><input type="submit" value="Login"></td>
          </tr>
       </table>
    </form>
  </body>
</html>
---

    [[1]] Create another JSP to handle login failures. We will 
    be more foreward in telling them the credentials this time 
    around.

---
$ cat javaeeExWAR/src/main/webapp/WEB-INF/content/LoginFailure.jsp

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">

<html>
  <head><title>SecurePing Login Form</title></head>
  <body>
    <h1>Login Failure</h1>
    <form action="j_security_check" method="POST">
       <table border="0" width="30%" cellspacing="3" cellpadding="2">
          <tr>
             <td><b>User Name</b></td>
             <td><input type="text" size="20" name="j_username"></td>
          </tr>
          <tr>
             <td><b>Password</b></td>
             <td><input type="password" size="10" name="j_password"></td>
          </tr>
          <tr>
             <td><p><input type="submit" value="Login"></td>
          </tr>
       </table>
    </form>
    <p/>
    Test accounts:
     <ul>
        <li>admin1/password - an admin that is only an admin</li>
        <li>admin2/password - an admin that is also a user</li>
        <li>user1/password</li>
        <li>known/password - someone who has a login, but no permissions</li>
     </ul>
  </body>
</html>
---

    [[1]] Switch the WAR over to FORM login by editing the web.xml as
    follows.

---
$ cat javaeeExWAR/src/main/webapp/WEB-INF/web.xml

...
    <login-config>
        <!--
            <auth-method>BASIC</auth-method>
            <realm-name>javaeeEx</realm-name>
        -->
        <auth-method>FORM</auth-method>
        <form-login-config>
            <form-login-page>/WEB-INF/content/Login.jsp</form-login-page>
            <form-error-page>/WEB-INF/content/LoginFailure.jsp</form-error-page>
        </form-login-config>
    </login-config>
---

    [[1]] Rebuild and deploy the application.

---
$ mvn clean install -rf :javaeeExEJB
...
[INFO] Reactor Summary:
[INFO] 
[INFO] Java EE Exercise EJB .............................. SUCCESS [5.469s]
[INFO] Java EE Exercise WAR .............................. SUCCESS [2.917s]
[INFO] Java EE Exercise EAR .............................. SUCCESS [1.551s]
[INFO] Java EE Exercise Remote Test ...................... SUCCESS [35.084s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
---

    [[1]] Attempt to access the Admin JSP page as you did prior to this step.

        * Access the {{{http://localhost:8080/javaeeEx/}Main Page}}

        * Click on {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin Page}}. 
        At this point you should see a JSP page with the FORM login instead of the 
        BASIC popup.

        * Click Login without providing valid credentials. You should now see the 
        LoginFailure JSP page with some hints as to how to login.

        * Login as one or more of the listed login to demonstrate that the FORM
        login has done its job.

    [[1]] Create a Logout Action within the Servlet. To logout -- the servlet will
    invalidate the session and then redirect the caller to the main page.

---
$ cat javaeeExWAR/src/main/java/myorg/javaeeex/web/RegistrarHandlerServlet.java

...
    private abstract class Handler {
        ...
        protected static final String MAIN_MENU_URL =
            "/index.jsp";
    ...

    private class Logout extends Handler {
        @Override
        public void doHandle(HttpServletRequest request,
                HttpServletResponse response) throws Exception {
            request.getSession().invalidate();
            
            response.sendRedirect(request.getContextPath() + MAIN_MENU_URL);
        }
    }
---

    [[1]] Register the action with the controller. We can register this
    action for all roles by placing it outside the role tests.

---
$ cat javaeeExWAR/src/main/java/myorg/javaeeex/web/RegistrarHandlerServlet.java

...

public class RegistrarHandlerServlet extends HttpServlet {
    ...
    public static final String LOGOUT_COMMAND = "logout";

    ...
    public void init() throws ServletException {
        ...
            if (ADMIN_TYPE.equals(handlerType)) {
                ...
            }
            else if (ANONYMOUS_TYPE.equals(handlerType)) {
                ...
            }
            handlers.put(LOGOUT_COMMAND, new Logout());
---

    [[1]] Add a logout command to the main page.

---
$ cat javaeeExWAR/src/main/webapp/index.jsp

...
        <li><a href="model/handler?command=logout">Logout</a></li>
...
---

    [[1]] Rebuild and deploy the application.

---
$ mvn clean install -rf :javaeeExEJB
...
[INFO] Reactor Summary:
[INFO] 
[INFO] Java EE Exercise EJB .............................. SUCCESS [5.469s]
[INFO] Java EE Exercise WAR .............................. SUCCESS [2.917s]
[INFO] Java EE Exercise EAR .............................. SUCCESS [1.551s]
[INFO] Java EE Exercise Remote Test ...................... SUCCESS [35.084s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
---

    [[1]] Attempt to access the Admin JSP page as you did prior to this step.

        * Access the {{{http://localhost:8080/javaeeEx/}Main Page}}

        * Click on {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin Page}}. 

        * Login as admin1. 

        * Click on the {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin Page}}.
        You should see an exception page showing you are unauthorized.

        * Navigate back to the {{{http://localhost:8080/javaeeEx/}Main Page}}

        * Click on {{{http://localhost:8080/javaeeEx/model/handler?command=logout}
        Logout}}

        * Click on {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin Page}} again. 
        You should again see the login form since you have previously logged out.

        * Login as admin2. 

        * Click on the {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin Page}}.
        The action should successfully complete.


* {Implement HTTPS Access}

    You implemented authentication in the previous sections by prompting the user for
    username and password information using one of two techniques; BASIC or FORM. 
    Although this is functionally sufficient to authenticate the user, it presents a 
    security problem because the credentials are passed to the server in the clear
    (actually they are obfuscated but still not encrypted). In this section we will
    add access to admin functions via HTTPS.

    [[1]] Update the security-constraint for the admin-access to require 
    a CONFIDENTIAL transport-guarantee. This will trigger the server to 
    use HTTPS protocol and transfer the credentials over SSL.

---
$ cat javaeeExWAR/src/main/webapp/WEB-INF/web.xml

...
        <user-data-constraint>
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>
        </user-data-constraint>
...
---

    [[1]] Rebuild and deploy the application.

---
$ mvn clean install -rf :javaeeExEJB
...
[INFO] Reactor Summary:
[INFO] 
[INFO] Java EE Exercise EJB .............................. SUCCESS [5.469s]
[INFO] Java EE Exercise WAR .............................. SUCCESS [2.917s]
[INFO] Java EE Exercise EAR .............................. SUCCESS [1.551s]
[INFO] Java EE Exercise Remote Test ...................... SUCCESS [35.084s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
---

    [[1]] Attempt to access the Admin JSP page.

        * Access the {{{http://localhost:8080/javaeeEx/}Main Page}}

        * Click on {{{http://localhost:8080/javaeeEx/admin/admin_menu.jsp}Admin Page}}. 
        One of two things should have occured. If you have HTTPS enabled for your
        server, you are seeing the FORM login using an encrypted connection. If you
        do not have HTTPS configured for the server, you are seeing an error page
        reporting a connection was refused by the server for port 8443.

    [[1]] If you have not yet configured your server for HTTPS do so now using the
    following {{{./jboss-https.html} instructions}}. After restarting JBoss, redeploy
    the application and re-navigate to the protected URL. You should now see the 
    successful shift to SSH for the admin pages.

    [[1]] Update the Logout Handler to redirect the user to a straight http://
    URL to turn off use of SSL after logging out.

---
$ cat javaeeExWAR/src/main/java/myorg/javaeeex/web/RegistrarHandlerServlet.java

...
public class RegistrarHandlerServlet extends HttpServlet {
    ...
    @Resource(name="httpPort")
    Integer httpPort = 8080;
...
    private class Logout extends Handler {
    ...
            //switch back to straight HTTP            
            String contextPath = new StringBuilder()
                .append("http://")
                .append(request.getServerName())
                .append(":")
                .append(httpPort)
                .append(request.getContextPath())
                .toString();            
            
            response.sendRedirect(contextPath + MAIN_MENU_URL);
...
---

    [[1]] Verify that navigation reverts back to HTTP when you click on
    logout at this point.


* Summary

    In this exercise we enabled security within the web tier to not only better 
    secure access to out application but to re-enable functionality to authorized
    users and better enforce the secuity policies of the application.

        * re-integrated with the secured EJB such that the client of the WAR could
        authenticate and become authorized to access EJB methods.

        * implement BASIC and FORM-based logins

        * implement NONE and CONFIDENTIAL transport level privacy using HTTP and HTTPS

    The following is an overview of the primary modules accessed during this exercise.

---
javaeeExWAR/
|-- pom.xml
`-- src
    |-- main
    |   |-- java
    |   |   `-- myorg
    |   |       `-- javaeeex
    |   |           `-- web
    |   |               |-- JPAFilter.java
    |   |               `-- RegistrarHandlerServlet.java
    |   `-- webapp
    |       |-- admin
    |       |   `-- admin_menu.jsp
    |       |-- index.jsp
    |       `-- WEB-INF
    |           |-- content
    |           |   |-- DisplayException.jsp
    |           |   |-- DisplayPeople.jsp
    |           |   |-- DisplayPerson.jsp
    |           |   |-- DisplayResult.jsp
    |           |   |-- ErrorPage.jsp
    |           |   |-- LoginFailure.jsp
    |           |   |-- Login.jsp
    |           |   `-- UnknownCommand.jsp
    |           |-- jboss-web.xml
    |           `-- web.xml
    `-- test
        `-- resources
            `-- log4j.xml
---
