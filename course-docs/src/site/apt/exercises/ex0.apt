Exercise 0: Development Environment Setup

* Goals

    * Establish an initial development environment suitable for use 
    in class for examples, exercises, and projects.

* Objectives

    [Note:] As a general rule, it is strongly recommended that you avoid
    the use of spaces in paths used in class. There will be specific
    issues encountered if you have spaces in your login name (e.g., use
    "JohnSmith", not "John Smith"), the root of your source tree (e.g.,
    don't use "Documents and Settings\..."), and installed applications
    (e.g., don't use "Program Files\...") that will be used to form
    classpaths.

    []

    * (Optional!) {{{Part_A}Download and install Cygwin}}
    if you are a Unix/bash developer
    and feel helpless when looking at a DOS prompt.

    * {{{Part_B}Download and install JavaSE 6 JDK}} 
    to compile and run our applications.

    * {{{Part_C} Download and install a Git Client}}
    to obtain source code for this course.

    * {{{Part_D}Download and install the Maven 3 Build System}} 
    to manage our portable build environment.

    * {{{Part_E}Download and install the JBoss Application Server}}
    to supply an application server with JavaEE containers and a 
    database for our projects.

    * {{{Part_F}Download and install Eclipse IDE}} to provide a mechanism
    for enhanced code development and debugging support.

    * {{{Part_G}Download and install Ant Build Tool}} to act as a portable 
    launching environment for interactive demos and Java SE clients turned
    in as a part of class projects.

* {Part A}: (Optional!) Download and install Cygwin

        [Note:] This really is optional and does not even apply if you are
        not using a Windows Operating System. I know of no mandatory tools
        in class that require this Unix emulator interface.  However,
        all posted shell command lines will be expressed in bash.  If you
        are comfortable with the DOS shell and can easily translate my
        bash commands into window clicks and DOS commands (e.g., how do
        you translate "find src -type f" into DOS?) feel free to skip it.
        If you are in doubt -- skip it.

    [[1]] Download the Cygwin installer from the 
    {{{http://cygwin.com/}Cygwin Site}}.

    [[1]] A full installation can take many, many hours to install a
    lot of things you will never need. My recommendation is that you
    start out with the following short list of tools for now.  If you
    find out you are missing a command/tool, you can go back to the
    installer later and download/install that specific package. Use
    {{{http://cygwin.com/packages/} Setup Package Search}} to help locate
    anything that you are missing.

        * Archive -> zip & unizip

        * Development -> git, git-completion, git-gui, git-svn, and gitk - a
        set of tools that can be used to interact with a git CM repository.

        * Development -> subversion  - 
        a command-line interface to the class code repository. 

        * Editors -> vim and gvim - a standard unix text editor
    
        * Net -> openssh - a command line interface to remotely login and 
        transfer files over the network

        * Shells -> bash - a standard unix shell, emulated to run within
        the Windows environment

        * System -> ping - helpful when debugging a failed URL

        * Utils ->util-linux - to get a larger collection of command line

    The following {{{./cygwininstall/cygwin_install.html} cygwin
    installation example snapshot trail}} may be of some assistance
    in installation.

    [[1]] Windows users; welcome to the sane world of the bash shell and vi.

* {Part B}: Download and Install JavaSE 6 JDK

    [Note:] Choose 32bit or 64bit depending on your operating system and 
    make sure that both the JDK and Eclipse match (i.e., either both 32
    or both 64bit). 

    []

    [[1]] Go to the
    {{{http://www.oracle.com/technetwork/java/javase/downloads/index.html}
    JavaSE Download Page}} and download JDK 6 (not 7). They have
    alternate packaging of the JDK to include JavaEE and NetBeans. The
    JavaEE packaging includes the Glassfish Application Server. We will
    not be using Glassfish or Netbeans as a part of class -- so please
    just take the JavaSE 6 JDK.

    [[1]] Change the installation directory so that it does not have
    a spaces in its path. On Windows XP, I changed mine to 
    C:\apps\java\jdk1.6.0_30 and C:\apps\java\jre1.6.0_30. Windows 7
    seems to have eliminated spaces in many of the default paths 
    (e.g., "Documents and Settings") so changing the path is much less
    an issue on the later operating system.

    [[1]] Go through Control Panel -> System -> Advanced -> Environment
    Variables and add ia definition for JAVA_HOME and add %JAVA_HOME%\bin 
    to your path.

    [[1]] Open up a new command shell and execute "javac -version" to
    determine you can find the JDK and verify the version.

    [[1]] Cygwin users may want to add the following to their .bashrc file to
    make sure the desired instance is used instead of what is located in 
    /usr/bin

---
export PATH=`cygpath --unix $JAVA_HOME/bin`:$PATH
---
---
$ java -version
C:\Documents and Settings\jcstaff>java -version
java version "1.6.0_30"
Java(TM) SE Runtime Environment (build 1.6.0_30-b12)
Java HotSpot(TM) Client VM (build 20.5-b03, mixed mode, sharing)
---

* {Part C}: Download and install a Git Client

        [[1]] Install a Git client. You will only be performing clones
        and pulls from the repository. This is pretty simple once you
        have access to a client and the repository URL. You can browse the 
        repository using the following URL: {{https://github.com/jcstaff/ejava-javaee/}}.

            * Linux Users: Either go to your package installer and
            select subversion or use google to find a suitable rpm for
            your system.

            * Cygwin Users: You may have already installed a git tools in
            the optional previous step (try "git --version"). If not, you can use
            the windows-based tool or go back to the cygwin setup to download
            and install the subversion client.

            * Non-Cygwin Windows Users: Git comes in a core layer and then
            OS-layer add-ons. The core layer is sufficient for class.

                [[1]] Install {{{http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.8-preview20111206.exe&can=3&q=official+Git}
                Full installer for official Git for Windows 1.7.8}}. 
                
                [[1]] You can select the default installation path since
                it will not be used for any of the build classpaths.

                [[1]] Accept the default installation option of "Use Git Bash bash 
                only". As the prompt states, it has the least risk and will
                be suitable for the minor amount of use required in class.

                [[1]] Chose your checkout style. Don't worry about commit style
                you will only be performing read-only checkouts. I chose 
                "Checkout as-is, commit Unix-style line endings" since I used
                all linux-style editors on Windows. You may want the Window
                checkout format.

                [[1]] Click on the "Git Bash" icon after the installation is complete.

                [[1]] Follow the instructions below for testing your access to the
                git repository

            * Eclipse Users: There is an git plugin for Eclipse available
            called {{{http://eclipse.org/egit/}EGit}}. You can install it
            by going to Help->Eclipse Marketplace, typing Git in the search field,
            and clicking Install for EGit.

            [Note:] You can checkout the class examples using any of the git clients
            above. 

            []

        [[1]] Test out your git installation and access to the class repository
        by performing a checkout of the ejava-javaee course files. 

            [[1]] Create a directory for class work; e.g., c:/jhu/784

            [[1]] Clone the class repository using
            {{git://github.com/jcstaff/ejava-javaee.git}}. This is located on
            {{https://github.com/}}.

---
$ mkdir -p c:/jhu/784
$ cd c:/jhu/784
$ git clone git://github.com/jcstaff/ejava-javaee.git
Cloning into 'ejava-javaee'...
remote: Counting objects: 14459, done.
remote: Compressing objects: 100% (5064/5064), done.
remote: Total 14459 (delta 6582), reused 14351 (delta 6474)
Receiving objects: 100% (14459/14459), 15.91 MiB | 805 KiB/s, done.
Resolving deltas: 100% (6582/6582), done.

$ ls
ejava-javaee

$ cd ejava-javaee
$ git branch
* master

$ git branch -a
* master
  remotes/origin/2011fall-working
  remotes/origin/2012spring-class
  remotes/origin/2012spring-working
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
---

            [Note:] The master branch and my working branch contain 
            everything in them. The class branch is tuned for what you 
            will be interested in.

            []

            [[1]] Create a local branch from the origin/2012spring-class
            branch. Don't worry, you can always get back to the previous
            content with the checkout command or you can clone a separate
            copy again.

---
$ git checkout --track origin/2012spring-class
Branch 2012spring-working set up to track remote branch 2012spring-working from origin.
Switched to a new branch '2012spring-class'

$ git branch
  master
* 2012spring-class
---

            [[1]] Repeat after me, "Cool!". This beats managing a bunch of 
            zip files any day. As the content is updated during the
            semester, just do a git "fetch" and "rebase" within the class 
            branch to see changes

---
$ git checkout 2012spring-class
Switched to branch '2012spring-class'

$ git fetch origin
remote: Counting objects: 55, done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 17 (delta 9), reused 17 (delta 9)
Unpacking objects: 100% (17/17), done.
From git://github.com/jcstaff/ejava-javaee
   16f601d..39f423d  2011fall-class -> origin/2011fall-class
   6cd872c..c36d6da  2012spring-class -> origin/2012spring-class
   c9e577f..c36d6da  master     -> origin/master

$ git rebase origin/2012spring-class
First, rewinding head to replay your work on top of it...
Fast-forwarded 2012spring-class to origin/2012spring-class.
---

* {Part D}: Download and install Maven Build System

    [[1]] Go to the 
    {{{http://maven.apache.org/}Maven Site}}  and download the latest
    version for your platform. You don't need the Tasks for Ant. Those
    are for when you want to reference Maven repositories within Ant.

    [[1]] Unzip the archive. I put mine in c:/apps/, which resulted in a
    c:/apps/apache-maven-3.0.4 directory. 

---
$ ls c:/apps/apache-maven-3.0.4
LICENSE.txt  NOTICE.txt  README.txt  bin  boot  conf  lib
---

    [[1]] Define MAVEN_HOME and add $MAVEN_HOME/bin to your PATH. My Windows
    PATH at this point looks like the following.

---
%JAVA_HOME%/bin;%MAVEN_HOME%\bin;%PATH%
---

    [[1]] Execute "mvn -version" as a test.

---
$ which mvn
/cygdrive/c/apps/apache-maven-3.0.4/bin/mvn

$ mvn -version
Apache Maven 3.0.4 (r1232337; 2012-01-17 03:44:56-0500)
Maven home: C:\apps\apache-maven-3.0.4\bin\..
Java version: 1.6.0_30, vendor: Sun Microsystems Inc.
Java home: C:\apps\java\jdk1.6.0_30\jre
Default locale: en_US, platform encoding: Cp1252
OS name: "windows xp", version: "5.1", arch: "x86", family: "windows"
---

    [Cywin Users:] You must express all PATHs in unix form. Unix PATHs use ":" as a 
    PATH separator and "/" as a directory separator. /cygdrive/c can be used to refer
    to "c:\". You can programmatically change a PATH using the cygpath command and
    issue the -windows or -unix flag.

---
$ cygpath --unix c:/
/cygdrive/c

$ cygpath --unix $MAVEN_HOME
/cygdrive/c/apps/apache-maven-3.0.4

$ cygpath --windows $MAVEN_HOME
c:\apps\apache-maven-3.0.4

$ cygpath --windows /cygdrive/c
c:\

$ export PATH=$PATH:`cygpath --unix $MAVEN_HOME/bin`
---

    []

    [[1]] Add a personal maven configuration file, called settings.xml,
    to your HOME/.m2 directory (windows and Cygwin users will put this
    in %HOME%/.m2). If your operating system home directory has spaces in
    the path this settings.xml file can be used to relocate the repository
    to a different location. If your home directory does not have a space
    in it (e.g., Windows 7, MacOS, Linux), you can turn off this option.
    Use the <<{{{../files/maven/settings.xml} following file}}>> as a
    starting point.

---
$ cd %HOME%
$ mkdir .m2

jcstaff@bullet /cygdrive/c/Documents and Settings/jcstaff/.m2
$ ls
settings.xml
---

        [Note:] The settings.xml file must be in a .m2 directory below the
        HOME directory recognized by your operating system. For Windows users,
        no matter if you are using Cygwin or DOS, this will be what Windows
        uses for you (ex. c:\Documents and Settings\jcstaff\.m2). 

    [[1]] Look at the environment-specific valies in this file and 
    modify if they are not appropriate to your system. The most common to
    edit is the localRepository and jboss.home values.

        * localRepository - this is where Maven will store local
        copies of downloaded artifacts. By default, it will be located
        in HOME/.m2/repository

        * jboss.home - this is the installation directory for 
        your unzipped JBoss installation.

---
    <!-- this overrides the default $HOME/.m2/repository location. 
    <localRepository>c:/jhu/repository</localRepository>
    -->

    ...
    <jboss.home>c:/apps/jboss-6.1.0.Final</jboss.home>
---

    [[1]] cd to the root directory you checked out from subversion and
    attempt to build the project.

---
$ cd c:/jhu/784/ejava-javaee/javase5Enhancements/

$ mvn clean install
---

    [[1]] Maven will begin downloading dependencies.

    [[1]] We'll look at and configure Maven a bit more in Exercise 1. 
    You'll be responsible for basic tasks of building and 
    testing an application. There will be plenty of examples supplied in class.

    [Note:] Later in the semester when the source tree becomes much larger -
    if you encounter Out of Memory errors. Set JVM properties of the 
    build by setting these values thru MAVEN_OPTS in your shell

---
example:
set MAVEN_OPTS="-Xms128m -Xmx512m -XX:MaxPermSize=512m"

example:
export MAVEN_OPTS="-Xms128m -Xmx512m -XX:MaxPermSize=512m"
---

    []

* {Part E}: Download and install JBoss Application Server

    [[1]] Go to the 
    {{{http://jboss.org/jbossas/downloads/}
    Download site for the JBoss Application Server}}.  Download version
    6.1.0.Final. 

    [Note:] JBoss 7.x has been relased but is too significant of a change
    for the value derived to integrate with class for this semester. The
    grader and I will be installing and supporting JBoss 6 this semester
    and all work must be submitted such that it works with the environment
    described in this exercise.

    []

    [[1]] On Windows, I unzipped mine to c:/apps to avoid having any spaces in the
    path. This produced a directory called c:/apps/jboss-6.1.0.Final.

    [Note:] If you choose a directory other than c:/apps/jboss-6.1.0.Final, make sure to 
    update the value for jboss.home in the maven HOME/.m2/settings.xml file.

    []

    [[1]] We'll be using a modification of the "standard" server. This configuration is 
    Java EE 6 compliant, but not the JBoss default. You will need to add "-c ejava-jboss6"
    to the start command to use the specific configuration for class.

    * Copy the jboss-6.1.0.Final/server/standard directory to ejava-jboss6.

    []

---
$ pwd
/cygdrive/c/apps/jboss-6.1.0.Final/server

$ cp -r standard ejava-jboss6

$ ls
all  default  ejava-jboss6  jbossweb-standalone  minimal  standard
---

    * Copy in class configuration files for the server. Be sure to use
    ejava-jboss61 as the source of the copy and ejava-jboss6 as the
    destination of the copy. This will be the only time you will need
    to reference the 61 directory. From here on out we will just refer
    to the server as ejava-jboss6.

---
c:/jhu/784/ejava-javaee/servers/ejava-jboss61/src/main/resources/ejava-jboss61/
|-- conf
|   `-- login-config.xml
`-- deploy
    |-- ejava-jdbc-ds.xml
    |-- hornetq
    |   |-- hornetq-configuration.xml
    |   `-- hornetq-jms.xml
    |-- hsqldb-ds.xml
    `-- jboss-logging.xml

$ cp -rv c:/jhu/784/ejava-javaee/servers/ejava-jboss61/src/main/resources/ejava-jboss61/* ejava-jboss6/
`c:/jhu/784/ejava-javaee/servers/ejava-jboss61/src/main/resources/ejava-jboss61/conf/login-config.xml' -> `ejava-jboss6/conf/login-config.xml'
`c:/jhu/784/ejava-javaee/servers/ejava-jboss61/src/main/resources/ejava-jboss61/deploy/ejava-jdbc-ds.xml' -> `ejava-jboss6/deploy/ejava-jdbc-ds.xml'
`c:/jhu/784/ejava-javaee/servers/ejava-jboss61/src/main/resources/ejava-jboss61/deploy/hornetq/hornetq-configuration.xml' -> `ejava-jboss6/deploy/hornetq/hornetq-configuration.xml'
`c:/jhu/784/ejava-javaee/servers/ejava-jboss61/src/main/resources/ejava-jboss61/deploy/hornetq/hornetq-jms.xml' -> `ejava-jboss6/deploy/hornetq/hornetq-jms.xml'
`c:/jhu/784/ejava-javaee/servers/ejava-jboss61/src/main/resources/ejava-jboss61/deploy/hsqldb-ds.xml' -> `ejava-jboss6/deploy/hsqldb-ds.xml'
`c:/jhu/784/ejava-javaee/servers/ejava-jboss61/src/main/resources/ejava-jboss61/deploy/jboss-logging.xml' -> `ejava-jboss6/deploy/jboss-logging.xml'
---

        []

    [[1]] Start the server

        [Note:] JBoss will open a listen port that may trigger a firewall alert. You
        will need to permit JBoss to open the listen port(s) in order to operate.

        []

---
$ c:/apps/jboss-6.1.0.Final/bin/run.sh -c ejava-jboss6

 =========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: C:\apps\jboss-6.1.0.Final

  JAVA: /cygdrive/c/apps/java/jdk1.6.0_30/bin/java

  JAVA_OPTS: -server -Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.
rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -Dprogram.name=run.sh -Dja
va.library.path=C:\apps\jboss-6.1.0.Final\bin\native\bin

  CLASSPATH: C:\apps\jboss-6.1.0.Final\bin\run.jar;C:\apps\java\jdk1.6.0_30\lib\tools.jar

 =========================================================================

02:32:19,138 INFO  [AbstractJBossASServerBase] Server Configuration:

        JBOSS_HOME URL: file:/C:/apps/jboss-6.1.0.Final/
        Bootstrap: $JBOSS_HOME\server/ejava-jboss6/conf/bootstrap.xml
        Common Base: $JBOSS_HOME\common/
        Common Library: $JBOSS_HOME\common/lib/
        Server Name: ejava-jboss6
        Server Base: $JBOSS_HOME\server/
        Server Library: $JBOSS_HOME\server/ejava-jboss6/lib/
        Server Config: $JBOSS_HOME\server/ejava-jboss6/conf/
        Server Home: $JBOSS_HOME\server/ejava-jboss6/
        Server Data: $JBOSS_HOME\server/ejava-jboss6/data
        Server Log: $JBOSS_HOME\server/ejava-jboss6/log/
        Server Temp: $JBOSS_HOME\server/ejava-jboss6/tmp

...
23:10:06,276 INFO  [org.jboss.bootstrap.impl.base.server.AbstractServer] JBossAS [6.1.0.Final "Neo"] Started in 43s:282ms
---

    [[1]] Look for the DB server information in the middle of the startup
    log. This and a lack of error stack traces is an indication that
    the class files were correctly put in place.

---
22:21:20,929 INFO  [STDOUT] [Server@1434108e]: Initiating startup sequence...
22:21:20,933 INFO  [STDOUT] [Server@1434108e]: Server socket opened successfully in 2 ms.
22:21:20,960 INFO  [ConnectionFactoryBindingService] Bound ConnectionManager 'jboss.jca:service=DataSourceBinding,name=DefaultDS' to JNDI name 'java:DefaultDS'
22:21:21,190 INFO  [STDOUT] [Server@1434108e]: Database [index=0, id=0, db=file:/opt/jboss-6.1.0.Final/server/ejava-jboss6/data/hypersonic/default, alias=] opened sucessfully in 254 ms.
22:21:21,190 INFO  [STDOUT] [Server@1434108e]: Startup sequence completed in 259 ms.
22:21:21,193 INFO  [STDOUT] [Server@1434108e]: 2011-09-04 22:21:21.193 HSQLDB server 1.8.0 is online
22:21:21,194 INFO  [STDOUT] [Server@1434108e]: To close normally, connect and execute SHUTDOWN SQL
22:21:21,194 INFO  [STDOUT] [Server@1434108e]: From command line, use [Ctrl]+[C] to abort abruptly
---

    [[1]] Start the database UI

---
$ java -classpath c:/apps/jboss-6.1.0.Final/common/lib/hsqldb.jar org.hsqldb.util.DatabaseManager
---

    [Note:] I created a startdbui.bat script that looks something like the following

---
echo off
set JBOSS_HOME=c:\apps\jboss-6.1.0.Final
java -classpath %JBOSS_HOME%/common/lib/hsqldb.jar org.hsqldb.util.DatabaseManager
---

    []

    [[1]] Select HSQL Database Engine Server from the "Type" pulldown. 
    Everything else can stay defaulted. After you hit OK, the GUI should
    connect to the database using port 9001.

        [Note:] This step will not work until we add the missing configuration 
        steps next week.

    [[1]] Shutdown your server using the shutdown.sh script.

---
$ ./bin/shutdown.sh -S
Shutdown message has been posted to the server.
Server shutdown may take a while - check logfiles for completion
---

    [Note:] You can run just the database application by executing the following.

---
> cd c:/apps/jboss-6.1.0.Final/server/ejava-jboss6/data/hypersonic
> java -classpath c:/apps/jboss-6.1.0.Final/common/lib/hsqldb.jar org.hsqldb.Server -database.0 ejava
---

    [Note:] I created a startdb.bat script that looks something like the following. -address 
    can be added to set the bind address. -port can be added to override the default listen
    port#.

---
echo off
set JBOSS_HOME=c:\apps\jboss-6.1.0.Final
set JBOSS_SERVER=ejava-jboss6
cd %JBOSS_HOME%\server\%JBOSS_SERVER%\data\hypersonic
java -classpath c:/apps/jboss-6.1.0.Final/common/lib/hsqldb.jar org.hsqldb.Server -database.0 ejava
---

    []    

    [[1]] You might want to map the run and shutdown scripts to some
    desktop launch icons since you'll be starting and stopping this server
    quite a bit over the semester.


* {Part F}: Download and install Eclipse IDE

        [Note:] An IDE, and specifically Eclipse, is <<NOT>> a requirement
        for class. However it it quite practical to do so.  The memory
        requirements for an IDE and the application server will require
        at least 1GB of memory before doing any size tweeks.

        [Note:] To stay consistent with class, try to stay clear of too
        many vendor add-ons and aids. Using the various plugins will
        be confusing when you start out and we will not be covering
        GUI-based wizards in class.  Use just the stock Eclipse IDE for
        Java EE developers.

    [[1]] Download and install
    {{{http://www.eclipse.org/}Eclipse}}. Download the Indigo (3.7.1) version
    for Java EE Developers.

        * I extracted the files to c:/apps, which resulted in a c:/apps/eclipse 
        directory.

        * I created a shortcut to c:/apps/eclipse/eclipse. Since the install
        was just an unzip, there was nothing automatically added to your
        start menu.

    [[1]] Install the Maven Integration for Eclipse (m2e) Plug-in to allow 
    Eclipse projects to stay in-sync with Maven project definitions and
    to be able to kick off Maven-based builds from within Eclipse.

        * Open Help -> Eclipse Marketplace...

        * Type "m2e" in the search bar

        * Click "Install" for "Maven Integration for Eclipse"

        * Follow instructions to complete installation.

    [[1]] Install the Maven Integration for Eclipse WTP to allow 
    JavaEE Eclipse projects to stay in-sync with Maven project definitions.

        * Open Help -> Eclipse Marketplace...

        * Type "m2e" in the search bar

        * Click "Install" for "Maven Integration for Eclipse WTP"

        * Follow instructions to complete installation.

    [Note:] The m2e initiative to get Maven and Eclipse working seemlessly 
    together has taken great strides in the last year and has taken off even more
    with Eclipse Indigo version. So much so -- that the behavior for an environment
    is hard to predict because of the rate of change and dynamic availability of
    various plugin extensions. There will be some risk here during the semester
    for people to be on different versions.

    [Note:] If something goes wrong, its pretty easy to get back to a clean slate --
    just unzip the original file to a new location.

    []

    [[1]] Register the JDK as a JRE to be used.

        * Preferences -> Java -> Installed JREs -> Add...

        * JRE home: c:\apps\java\jdk1.6.0_30

        * Finish

        * OK
        

    [[1]] Register the MAVEN_HOME as an External installation. This
    configuration is required when working with plugins that significantly
    change the classpath of the build environment.

        * Window -> Preferences -> Maven.Installations -> Add...

        * (enter MAVEN_HOME location)

        * OK

    [[1]] You may get a warning stating that Maven Integration requires
    that Eclipse run within a JDK (versus a JRE). I believe this is for
    embedded mode operation. I fixed my working by adding the following
    to my shortcut for Eclipse.

---
Target: C:\apps\eclipse\eclipse.exe -vm c:\apps\java\jdk1.6.0_30\bin
---
    
    [[1]] Feel free to experiment whether the embedded or external 
    installation works best for you during the semester. The embedded
    should be faster, but the external may be required to build projects
    the have unusual extensions.


* {Part G}: Download and install Ant Build Tool

        [Note:] I use Ant as a portable scripting tool for interactive demos. You will 
        use it to wrap setup commands and Java SE clients for projects you submit.

    [[1]] Download and install {{{http://ant.apache.org/}Ant}}. Use the 
    newer 1.8.2 version.

        * I installed mine in c:/apps, which resulted in c:/apps/apache-ant-1.8.2 
        being created and now being my ANT_HOME.

    [[1]] Add ANT_HOME/bin to your PATH.

---
Windows PATH = %JAVA_HOME%\bin;%MAVEN_HOME%\bin;%PATH%;%ANT_HOME%\bin
---
---
$ ant -version
Apache Ant(TM) version 1.8.2 compiled on December 20 2010
---

* Summary

    During this exercise, you put many of the tools in place to begin 
    obtaining and building examples. The next exercise will employ some
    of the tools that you have installed to walk you through the
    development of a simple Java application.

