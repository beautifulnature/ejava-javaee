Exercise 0: Development Environment Setup

* Goals

    * Establish an initial development environment suitable for use 
    in class for examples, exercises, and projects.

* Objectives

    [Note:] As a general rule, it is strongly recommended that you avoid
    the use of spaces in paths used in class. There will be specific
    issues encountered if you have spaces in your login name (e.g., use
    "JohnSmith", not "John Smith"), the root of your source tree (e.g.,
    don't use "Documents and Settings\..."), and installed applications
    (e.g., don't use "Program Files\...") that will be used to form
    classpaths.

    []

    * (Optional!) {{{#Part A}Download and install Cygwin}}
    if you are a Unix/bash developer
    and feel helpless when looking at a DOS prompt.

    * {{{#Part B}Download and install J2SE 1.5 JDK}} 
    to compile and run our applications.

    * {{{#Part C} Download and install Java EE 5}}
    just to get a measily javaee.jar and comply with licensing restrictions.

    * {{{#Part D} Download and install a Subversion Client}} 
    to obtain source code for this course.

    * {{{#Part E}Download and install the Maven 2 Build System}} 
    to manage our portable build environment.

    * {{{#Part F}Download and install the JBoss Application Server}}
    with EJB3 Support to supply a database and application server for our projects.

    * {{{#Part G}Download and install Eclipse IDE}} to provide a mechanism
    for enhanced code development and debugging support.

    * {{{#Part H}Download and install Ant Build Tool}}
    Ant Build Tool to act as an optional fallback for those who really cannot 
    handle the power and mystery of Maven. It will also be as a portable scripting
    environment for interactive demos.

* {Part A}: (Optional!) Download and install Cygwin

        [Note:] This really is optional; especially if you are not using
        a Windows Operating System. I know of no mandatory
        tools in class that require this Unix emulator interface. 
        However, all posted shell command lines will be expressed in bash.
        If you are comfortable with the DOS shell and can easily translate 
        my bash commands into window clicks and DOS commands (e.g., how
        do you translate "find src -type f" into DOS?) feel free to skip it.

    [[1]] Download the Cygwin installer from the 
    {{{http://cygwin.com/}Cygwin Site}}.

    [[1]] The following
    {{{./cygwininstall/cygwin_install.html}
    cygwin installation example snapshot trail}}
    may be of some assistance in installation. It has a few hints as to how
    to download enough without getting the entire application. Be sure
    to also select the subversion client.

    [[1]] Windows users; welcome to the sane world of the bash shell and vi.

* {Part B}: Download and Install J2SE 1.5 JDK

    [[1]] Go to the
    {{{http://java.sun.com/javase/downloads/index_jdk5.jsp} Sun Java SE
    5 Download Page}} and download JDK 5.0. JDK 6.0 has been released
    but we will be using JDK 5.0 for compatibility with legacy Java EE
    5 implementations.  If you download the JDK with Java EE, Java SE 
    will be hiding in Sun/AppServer/jdk/bin.

    [[1]] Change the installation directory so that it does not have
    a spaces in its path. I changed mine to C:\apps\jdk1.5.0_14\ and
    C:\apps\jre1.5.0_14\

    [[1]] Go through Control Panel -> System -> Advanced -> Environment
    Variables and add jdk/bin to your classpath.

    [[1]] Open up a new command shell and execute "javac -version" to
    determine you can find the JDK and verify the version.

* {Part C}: Download and Install Java EE 5 SDK (to get the Java EE API .jar file)

    [Note:] The Java EE API is necessary to compile Java EE source
    code. This API can both be obtained from Sun as well from
    JBoss. However, Sun packages it in a convenient, single .jar file
    and JBoss spreads it across many .jar files. We will start by using
    the one from Sun and switch to the JBoss version as necessary.

    []

    [[1]] Download and install
    {{{http://java.sun.com/javaee/downloads/index.jsp}Java EE 5}} if
    you did not already do this as a part of the JDK installation. We
    are only in search of the the javaee.jar file from this download
    and Sun licensing requires you obtain it directly from them. They
    bundle it with their application server, so you will be prompted for
    several things during the installation we don't care about. Select the 
    options that will cause it just do the software install. 

    [[1]] I installed mine in C:\apps\Sun\SDK.

    [[1]] Verify you have .../Sun/SDK/lib/javaee.jar. We'll use this during 
    {{{./Part E}Part E}}.

---
$ find c:/apps -name javaee.jar
c:/apps/Sun/SDK/lib/javaee.jar
---

* {Part D}: Download and install a Subversion Client

        [[1]] Install the subversion client. You will only be performing checkouts
        and updates from the repository. This is pretty simple once you have access
        to a client and the repository URL.

            * Linux Users: Either go to your package installer and
            select subversion or use google to find a suitable rpm for
            your system.

            * Cygwin Users: You may have already installed a subversion
            command line client (try "svn -version"). If not, you can use
            the windows-based tool or go back to the cygwin setup to download
            and install the subversion client.

            * Windows Users: I tried out the TortoiseSVN client
            and was really impressed. Feel free to use another
            client, but I'll go through some of the steps for
            {{{http://tortoisesvn.tigris.org/}TortoiseSVN}} here.

                [[1]] I chose the TortoiseSVN-1.4.7 version. 

                [[1]] The path for this tool won't be a part of any path we use to build
                or run projects, so I chose the default installation directory.

                [[2]] The install, of course, wants you to reboot your system.

                [[3]] TortoiseSVN launchers have been added to your right click
                menus and available from the explorer window as well. There was an issue
                reported by a student last semester that the ToroiseSVN processing
                took over their CPU and had to remove it. I have not encountered that
                issue. Your mileage may vary.

            * Eclipse Users: There is an subversion plugin for Eclipse available
            called {{{http://subclipse.tigris.org/}Subclipse}}. You can install it
            by following the instructions located at
            {{http://subclipse.tigris.org/install.html}} once you have Eclipse 
            installed. However, use of this plugin is of best use when you are
            commiting changes to the baseline. You will not be doing this during class.
            This the file browser options mentioned above are more pertinent for class
            use.

        [[1]] Test out your subversion installation by performing a checkout
        of the ejava-javaee course files. 

            [[1]] Create a directory for class work; e.g., c:/jhu/784

            [[1]] Browse the repository to determine the URL for the 
            project you wish to checkout. You can start at the root 
            using the following
            {{https://ejava.info:8443/repos/class/branches/2008-spring-ejava-javaee}}
            URL.

            [[1]] Check out a level of the SVN repository to your class
            work directory. You can check it out to a directory called ejava-javaee
            (c:/jhu/784/ejava-javaee) or anything you choose.
            If you mess up, you can delete it and retry.

            [[1]] You will be asked to verify the self-signed certificate for the 
            SVN repository. You must use https to access the repository.

---
$ svn checkout https://ejava.info:8443/repos/class/branches/2008-spring-ejava-javaee ejava-javaee
A  ejava-javaee/.project
A  ejava-javaee/jdbcDAO
A  ejava-javaee/jdbcDAO/.classpath
A  ejava-javaee/jdbcDAO/.project
A  ejava-javaee/jdbcDAO/src
A  ejava-javaee/jdbcDAO/src/test
A  ejava-javaee/jdbcDAO/src/test/java
A  ejava-javaee/jdbcDAO/src/test/java/ejava
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao/jdbc
A ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao/jdbc/JDBCBookDAOTest.java
---

                [Note:] It was not required that you check all files out from
                the root, but it didn't hurt either.

            [[1]] Repeat after me, "Cool!". This beats managing a bunch of 
            zip files any day. As the content is updated during the
            semester, just do an update to see changes

---
$ svn update
At revision 24.
---

* {Part E}: Download and install Maven Build System

    [[1]] Go to the 
    {{{http://maven.apache.org/}Maven Site}}  and download the latest
    version for your platform. You don't need the Tasks for Ant. Those
    are for when you want to call Maven from within Ant.

    [[1]] Unzip the archive. I put mine in c:/apps/, which resulted in a
    c:/apps/apache-maven-2.0.8 directory. 

    [[1]] Add $MAVEN_HOME/bin to your PATH

    [[1]] Add JAVA_HOME to your environment (maven will try to execute
    $JAVA_HOME/bin/java. On Windows, I set mine to c:/apps/jdk1.5.0_12

    [[1]] Execute "mvn -version" as a test.

---
> mvn --version
Maven version: 2.0.8
Java version: 1.5.0_14
OS name: "windows xp" version: "5.1" arch: "x86" Family: "windows"
---
    [Cywin Users:] You must express all PATHs in unix form. Unix PATHs use ":" as a 
    PATH separator and "/" as a directory separator. /cygdrive/c can be used to refer
    to "c:\". You can programmatically change a PATH using the cygpath command and
    issue the -windows or -unix flag.

---
$ cygpath --unix c:/
/cygdrive/c

$ cygpath --unix $MAVEN_HOME
/cygdrive/c/apps/apache-maven-2.0.8

$ cygpath --windows $MAVEN_HOME
c:\apps\apache-maven-2.0.8

$ cygpath --windows /cygdrive/c
c:\

$ export PATH=$PATH:`cygpath --unix $MAVEN_HOME/bin`
---

    []

    [[1]] Add a personal maven configuration file, called settings.xml,
    to your $HOME/.m2 directory (windows and Cygwin users will put this in
    %HOME%/.m2). This file will be used to point to a custom repository
    location (i.e., one that does have spaces in the path) and reference
    the class repositories. Use the <<{{{../files/maven/settings.xml}
    following file}}>> as a starting point.

---
jcstaff@bullet /cygdrive/c/Documents and Settings/jcstaff/.m2
$ ls
settings.xml
---

    [[1]] cd to the root directory you checked out from subversion and
    attempt to build the project.

---
$ cd c:/jhu/784/ejava-javaee/javase5Enhancements/

$ mvn install -Dmaven.test.skip=true
---

    [[1]] Maven will begin downloading dependencies, but will
    unfortunately run into several "Error transferring file" problems
    before we get all dependencies. Just grit your teeth and re-issue
    the command until it completes or you hit a real error. The transfer
    errors have to do with the fact you are downloading files from a set
    of mirror sites that is shared with the rest of the internet. Once
    these files are downloaded once, the local copies will be used
    instead.

---
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Error building POM (may not be this project's POM).


Project ID: org.apache.maven:maven-model

Reason: Error getting POM for 'org.apache.maven:maven-model' from the repository
: Error transferring file
  org.apache.maven:maven-model:pom:2.0

from the specified remote repositories:
  central (http://repo1.maven.org/maven2),
  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),
  snapshots (http://snapshots.maven.codehaus.org/maven2)
---
---
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Error building POM (may not be this project's POM).


Project ID: null:plexus-compiler-api:jar:1.5.2

Reason: Cannot find parent: org.codehaus.plexus:plexus-compiler for project: nul
l:plexus-compiler-api:jar:1.5.2
---
    [[1]] If you get to the following error, you'll need to install
    the javaee.jar file downloaded as a part of Java EE 5 from Sun to
    go any further. If you do not get this error, then you have successfully gotten 
    a copy from one of the repositories listed in the settings.xml you put in 
    place in an earlier step.

---
...
[INFO] Failed to resolve artifact.

Missing:
 ----------
1) javax.javaee:javaee:jar:5

  Try downloading the file manually from the project website.

  Then, install it using the command:
      mvn install:install-file -DgroupId=javax.javaee -DartifactId=javaee \
          -Dversion=5 -Dpackaging=jar -Dfile=/path/to/file

  Path to dependency:
...
---
---
$ mvn install:install-file -DgroupId=javax.javaee -DartifactId=javaee \
> -Dversion=5 -Dpackaging=jar -Dfile=c:/Sun/AppServer/lib/javaee.jar \
-DgeneratePom=true
...
[INFO] [install:install-file]
[INFO] Installing c:\Sun\AppServer\lib\javaee.jar to c:\jhu\repository\javax\java
ee\javaee\5\javaee-5.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
---

    [[1]] If you get an error looking for JBoss artifacts,
    don't worry. You may have attempted to build from the root or build a sub-project
    that requires further setup.

    [[1]] We'll look at and configure Maven a bit more in Exercise 1. 
    You'll be responsible for basic tasks of building and 
    testing an application. There will be plenty of examples supplied in class.

* {Part F}: Download and install JBoss Application Server

    [[1]] Go to the 
    {{{http://labs.jboss.com/portal/jbossas/download}
    Download site for the JBoss Application Server}}.  Download version
    4.2.2.GA. Burke's EJB3 with JBoss workbook shows an example of using
    the "Run Installer" that walks you through the right options to get
    JBoss <<AND>> EJB3. However, that was for 4.0.4/5. EJB3 is enabled
    by default, starting with 4.2.

    [[1]] On Windows, I unzipped mine to c:/apps to avoid having any spaces in the
    path. This produced a directory called c:/apps/jboss-4.2.2.GA.
    I renamed the directory to c:/apps/jboss to keep the name simple. 

    [Note:] If you choose a directory other than c:/apps/jboss, make sure to 
    update the value for jboss.home in the MAVEN %HOME%/.m2/settings.xml file.

    []

    [[1]] We'll be using the "default" server.

---
$ ls c:/apps/jboss/server/default
conf  deploy  lib
---

    [[1]] Add a configuration file that will define a database
    we'll be using for class. Although we can start/stop the database
    without using JBoss and won't need the server for a while, it is 
    very easy to have the all servers managed under a single set of
    run/shutdown scripts. Paste the 
    <<{{{../files/jboss/deploy/ejava-jdbc-ds.xml}
    following file}}>> into the JBOSS_HOME/servers/default/deploy directory

    [[1]] Start the server and look for the following lines towards the end
    of its output. This means that our Hypersonic "ejava" database has 
    started.

        [Note:] JBoss will open a listen port that may trigger a firewall alert. You
        will need to permit JBoss to open the listen port(s) in order to operate.

        []

---
$ c:/jboss/bin/run.sh
---
---
01:12:52,296 INFO  [STDOUT] [Server@1479ef9]: Initiating startup sequence...
01:12:55,015 INFO  [STDOUT] [Server@1479ef9]: Server socket opened successfully in 2640 ms.
01:12:55,296 INFO  [STDOUT] [Server@1479ef9]: Database [index=0, id=1, db=file:C:\jboss\server\default\data\hypersonic\ejava, alias=] opened sucessfully in 250
ms.
01:12:55,359 INFO  [STDOUT] [Server@1479ef9]: Startup sequence completed in 2984 ms.
 01:12:55,390 INFO  [STDOUT] [Server@1479ef9]: 2006-09-02 01:12:55.390 HSQLDB ser ver 1.8.0 is online
 01:12:55,609 INFO  [STDOUT] [Server@1479ef9]: To close normally, connect and exe cute SHUTDOWN SQL
 01:12:55,625 INFO  [STDOUT] [Server@1479ef9]: From command line, use [Ctrl]+[C] to abort abruptly
---

    [[1]] Start the database UI to verify that the database is up.

---
$ java -classpath c:/apps/jboss/server/default/lib/hsqldb.jar org.hsqldb.util.DatabaseManager
---

    [[1]] Select HSQL Database Engine Server from the "Type" pulldown. 
    Everything else can stay defaulted. After you hit OK, the GUI should
    connect to the database using port 9001.

    [Note:] You can run just the database application by executing the following.

---
> cd c:/apps/jboss/server/default/data/hypersonic
> java -classpath c:/apps/jboss/server/default/lib/hsqldb.jar org.hsqldb.Server -database.0 ejava
---

    []    

    [[1]] Navigate to {{http://localhost:8080/jmx-console}} with your browser. Click 
    service=ejavaDB under the "jboss" heading. Click "Invoke" under
    startDatabaseManager(). A browser version of the DB UI should appear. If it
    didn't, don't feel bad. It didn't work for me either when I first tried it with
    JBoss 4.2.1. You can use the .jar-based UI if the browser-based one does not
    work.

    [[1]] Shutdown your server using the shutdown.sh script.

---
$ ./bin/shutdown.sh -S
Shutdown message has been posted to the server.
Server shutdown may take a while - check logfiles for completion
---

    [[1]] You might want to map the run and shutdown scripts to some
    desktop launch icons since you'll be starting and stopping this server
    quite a bit over the semester.

    [[1]] Change the data source used to persist EJB Timers to be the same as the
    one used to persist your EJB application data. This helps avoid issues with
    trying to enlist 2 resources that do not support 2-phase-commit in the same
    transaction. By moving JMS to the ejavaDS data source, we avoid this issue
    by using only a single resource. In server/default/deploy/ejb-deployer.xml,
    change the jboss.jca:service=DataSourceBinding,name from DefaultDS to ejavaDS.

---
    <!-- DataSourceBinding ObjectName
    <depends optional-attribute-name="DataSource">jboss.jca:service=DataSourceBinding,name=DefaultDS</depends>
    -->
    <depends optional-attribute-name="DataSource">jboss.jca:service=DataSourceBinding,name=ejavaDS</depends>
---

    [Note:] Performing the above step triggered my anti-virus internet
    work auto-protection since JBoss is now opening up a port that is
    actively being connected to (from localhost). I had to temporarily
    disable the auto-protection in order to successfully start JBoss
    on windows at this point.


    [[1]] Add support for https protocol by following the instructions in the
    {{{./jboss-https.html} Enable JBoss HTTPS Exercise}}

* {Part G}: Download and install Eclipse IDE

            [Note:] An IDE, and specifically Eclipse, is <<NOT>> a
            requirement for class. The memory requirements for an IDE and 
            the application server may have your machine swapping quite a bit.
            I have included coverage of an IDE only as a productivity tool. 
            You may use vi and
            command line tools (I do!) or something like NetBeans from 
            Sun. I do find the ability to step through an execution
            with a graphical debugger priceless.

    [[1]] Download and install
    {{{http://www.eclipse.org/}Eclipse}}. They now have a separate download
    for Java Developers and another for Java EE Developers. It won't really matter
    which you select, but I have been using the Java EE version lately with no
    complaints.

        * I extracted the files to c:/apps, which resulted in a c:/apps/eclipse 
        directory.

    [[1]] I found that Eclipse 3.3 is no longer intelligently
    ignoring subversion directories when it builds. You may see
    complaints about duplicate resources not copied for .svn
    files checked out of the class repository. If that happens,
    go to Window->Preferences->Java->Compiler->Building->"Filtered
    Resources". Add ",.svn/" to the list.

    [[1]] Install the Maven.2x Plug-in for Eclipse as demonstrated
    with the flash demo on the following 
    {{{http://m2eclipse.codehaus.org/}page at Mergere}}. You don't need 
    to manually download the binaries. You install the plugin by 
    registering their site with the Eclipse plugin manager. Go ahead, 
    {{{http://m2eclipse.codehaus.org/Installing_Maven_2.0_plugin_for_Eclipse.html}
    watch the demo}}. In case you forgot to pause it, the URL for the 
    plugin was {{http://m2eclipse.codehaus.org/}}. 
    
        [Note:] I usually install my plugins in a personal
        directory so they live beyond Eclipse upgrades. You may want 
        to do that as well.

    [[1]] Go ahead and watch the 
    {{{http://m2eclipse.codehaus.org/Maven_2.0_Plugin_for_Eclipse.html}
    Using the plugin demo}}. It normally starts for me on the second load.
    We will be performing most of these actions as a part of Exercise 1's
    Eclipse setup.

        
* {Part H}: Download and install Ant Build Tool

        [Note:] I use Ant as a portable scripting tool for interactive demos and
        permit it to be used as an optional build tool for those that want to try to
        avoid using Maven with their projects.

    [[1]] Download and install {{{http://ant.apache.org/}Ant}}. I
    downloaded the 1.6.5 version and have seen minor porting issues with 1.7. If you
    use 1.7, you may need to implement a minor amount of porting.

    [[1]] Add ANT_HOME/bin to your classpath so you can run it whenever 
    you have the urge.

---
$ ant -version
Apache Ant version 1.6.5 compiled on June 2 2005
---

* Summary

    During this exercise, you put many of the tools in place to begin 
    obtaining and building examples. The next exercise will employ some
    of the tools that you have installed to walk you through the
    development of a simple Java application.

