Exercise 0: Development Environment Setup

* Goals

    * Establish an initial development environment suitable for use 
    in class for examples, exercises, and projects.

* Objectives

    [Note:] As a general rule, it is strongly recommended that you avoid
    the use of spaces in paths used in class. There will be specific
    issues encountered if you have spaces in your login name (e.g., use
    "JohnSmith", not "John Smith"), the root of your source tree (e.g.,
    don't use "Documents and Settings\..."), and installed applications
    (e.g., don't use "Program Files\...") that will be used to form
    classpaths.

    []

    * (Optional!) {{{Part_A}Download and install Cygwin}}
    if you are a Unix/bash developer
    and feel helpless when looking at a DOS prompt.

    * {{{Part_B}Download and install JavaSE 6 JDK}} 
    to compile and run our applications.

    * {{{Part_C} Download and install a Subversion Client}} 
    to obtain source code for this course.

    * {{{Part_D}Download and install the Maven 2 Build System}} 
    to manage our portable build environment.

    * {{{Part_E}Download and install the JBoss Application Server}}
    with EJB3 Support to supply a database and application server for our projects.

    * {{{Part_F}Download and install Eclipse IDE}} to provide a mechanism
    for enhanced code development and debugging support.

    * {{{Part_G}Download and install Ant Build Tool}} to act as a portable 
    launching environment for interactive demos and Java SE clients turned
    in as a part of class projects.

* {Part A}: (Optional!) Download and install Cygwin

        [Note:] This really is optional; especially if you are not using
        a Windows Operating System. I know of no mandatory
        tools in class that require this Unix emulator interface. 
        However, all posted shell command lines will be expressed in bash.
        If you are comfortable with the DOS shell and can easily translate 
        my bash commands into window clicks and DOS commands (e.g., how
        do you translate "find src -type f" into DOS?) feel free to skip it.

    [[1]] Download the Cygwin installer from the 
    {{{http://cygwin.com/}Cygwin Site}}.

    [[1]] The following
    {{{./cygwininstall/cygwin_install.html}
    cygwin installation example snapshot trail}}
    may be of some assistance in installation. A full installation can 
    take many, many hours. The example has a few hints as to how
    to download enough without getting the entire application. If you find
    out you are missing a command/tool, you can go back to the installer
    later and download/install that specific package. Use {{{http://cygwin.com/packages/}
    Setup Package Search}} to help locate anything that you are missing. Be sure
    to also select the following

        * Archive -> zip & unizip

        * Development -> subversion  - 
        a command-line interface to the class code repository. 

        * Editors -> vim - a standard unix text editor
    
        * Net -> openssh - a command line interface to remotely login and 
        transfer files over the network

        * Shells -> bash - a standard unix shell, emulated to run within
        the Windows environment

        * System -> ping - helpful when debugging a failed URL

        * Utils ->util-linux - to get a larger collection of command line
        utilities, including "more"

    [[1]] Windows users; welcome to the sane world of the bash shell and vi.

* {Part B}: Download and Install JavaSE 6 JDK

    [Note:] Choose 32bit or 64bit depending on your operating system and 
    make sure that both the JDK and Eclipse matchi (i.e., either both 32
    or both 64bit). 

    [[1]] Go to the
    {{{http://java.sun.com/javase/downloads/widget/jdk6.jsp} Sun JavaSE JDK
    6 Download Page}} and download JDK 6. 

    [[1]] Change the installation directory so that it does not have
    a spaces in its path. I changed mine to C:\apps\java\jdk1.6.0_21 and
    C:\apps\java\jre1.6.0_21

    [[1]] Go through Control Panel -> System -> Advanced -> Environment
    Variables and add ia definition for JAVA_HOME and add %JAVA_HOME%\bin 
    to your path.

    [[1]] Open up a new command shell and execute "javac -version" to
    determine you can find the JDK and verify the version.

    [[1]] Cygwin users may want to add the following to their .bashrc file to
    make sure the desired instance is used instead of what is located in 
    /usr/bin

---
export PATH=`cygpath --unix $JAVA_HOME/bin`:$PATH
---

* {Part C}: Download and install a Subversion Client

        [[1]] Install the subversion client. You will only be performing checkouts
        and updates from the repository. This is pretty simple once you have access
        to a client and the repository URL.

            * Linux Users: Either go to your package installer and
            select subversion or use google to find a suitable rpm for
            your system.

            * Cygwin Users: You may have already installed a subversion
            command line client (try "svn --version"). If not, you can use
            the windows-based tool or go back to the cygwin setup to download
            and install the subversion client.

            * Windows Users: I personally like TortoiseSVN. 
            Feel free to use another client, but I'll go through some of the steps for
            {{{http://tortoisesvn.tigris.org/}TortoiseSVN}} here.

                [[1]] The path for this tool won't be a part of any path we use to build
                or run projects, so I chose the default installation directory.

                [[2]] The install, of course, wants you to reboot your system.

                [[3]] TortoiseSVN launchers have been added to your right click
                menus and available from the explorer window as well. 

            * Eclipse Users: There is an subversion plugin for Eclipse available
            called {{{http://subclipse.tigris.org/}Subclipse}}. You can install it
            by following the instructions located at
            {{http://subclipse.tigris.org/servlets/ProjectProcess?pageID=p4wYuA}} 
            once you have Eclipse installed. I added the following site to my 
            Eclipse configuration {{http://subclipse.tigris.org/update_1.6.x/}}.
            Use of this plugin is of best use when you are
            commiting changes to the baseline. You will not be doing this during class.

            [Note:] You can checkout the class examples using any of the SVN clients
            above. However, if you use multiple subversion clients (e.g., mix the
            usage of ToortuiseSVN with Subclipse), you need to make sure the 
            products implement the same client version. There is no need to worry
            about the specific version of the subversion server used in class --
            just the clients you use on the same file system.

        [[1]] Test out your subversion installation by performing a checkout
        of the ejava-javaee course files. 

            [[1]] Create a directory for class work; e.g., c:/jhu/784

            [[1]] Browse the repository to determine the URL for the 
            project you wish to checkout. You can start at the root 
            using the following
            {{http://ejava.info/repos/class/branches/2011-spring-ejava-javaee}}
            URL.

            [[1]] Check out a level of the SVN repository to your class
            work directory. You can check it out to a directory called ejava-javaee
            (c:/jhu/784/ejava-javaee) or anything you choose.
            If you mess up, you can delete it and retry.

            [[1]] You will be asked to verify the self-signed certificate for the 
            SVN repository. You must use https to access the repository.

---
$ svn checkout http://ejava.info/repos/class/branches/2011-spring-ejava-javaee ejava-javaee
A  ejava-javaee/.project
A  ejava-javaee/jdbcDAO
A  ejava-javaee/jdbcDAO/.classpath
A  ejava-javaee/jdbcDAO/.project
A  ejava-javaee/jdbcDAO/src
A  ejava-javaee/jdbcDAO/src/test
A  ejava-javaee/jdbcDAO/src/test/java
A  ejava-javaee/jdbcDAO/src/test/java/ejava
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao/jdbc
A ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao/jdbc/JDBCBookDAOTest.java
---

                [Note:] It was not required that you check all files out from
                the root, but it didn't hurt either.

            [[1]] Repeat after me, "Cool!". This beats managing a bunch of 
            zip files any day. As the content is updated during the
            semester, just do an update to see changes

---
$ svn update
At revision 24.
---

* {Part D}: Download and install Maven Build System

    [[1]] Go to the 
    {{{http://maven.apache.org/}Maven Site}}  and download the latest
    version for your platform. You don't need the Tasks for Ant. Those
    are for when you want to reference Maven repositories within Ant.

    [[1]] Unzip the archive. I put mine in c:/apps/, which resulted in a
    c:/apps/apache-maven-3.0.2 directory. 

---
$ ls c:/apps/apache-maven-3.0.2
LICENSE.txt  NOTICE.txt  README.txt  bin  boot  conf  lib
---

    [[1]] Define MAVEN_HOME and add $MAVEN_HOME/bin to your PATH. My Windows
    PATH at this point looks like the following.

---
%JAVA_HOME%/bin;%MAVEN_HOME%\bin;%PATH%
---

    [[1]] Execute "mvn -version" as a test.

---
$ which mvn
/cygdrive/c/apps/apache-maven-3.0.2/bin/mvn

$ mvn -version
Apache Maven 3.0.2 (r1056850; 2011-01-08 19:58:10-0500)
Java version: 1.6.0_21, vendor: Sun Microsystems Inc.
Java home: C:\apps\java\jdk1.6.0_21\jre
Default locale: en_US, platform encoding: Cp1252
OS name: "windows xp", version: "5.1", arch: "x86", family: "windows"
---

    [Cywin Users:] You must express all PATHs in unix form. Unix PATHs use ":" as a 
    PATH separator and "/" as a directory separator. /cygdrive/c can be used to refer
    to "c:\". You can programmatically change a PATH using the cygpath command and
    issue the -windows or -unix flag.

---
$ cygpath --unix c:/
/cygdrive/c

$ cygpath --unix $MAVEN_HOME
/cygdrive/c/apps/apache-maven-3.0.2

$ cygpath --windows $MAVEN_HOME
c:\apps\apache-maven-3.0.2

$ cygpath --windows /cygdrive/c
c:\

$ export PATH=$PATH:`cygpath --unix $MAVEN_HOME/bin`
---

    []

    [[1]] Add a personal maven configuration file, called settings.xml,
    to your $HOME/.m2 directory (windows and Cygwin users will put this in
    %HOME%/.m2). This file will be used to point to a custom repository
    location (i.e., one that does have spaces in the path) and reference
    the class repositories. Use the <<{{{../files/maven/settings.xml}
    following file}}>> as a starting point.

---
$ mkdir %HOME%/.m2

jcstaff@bullet /cygdrive/c/Documents and Settings/jcstaff/.m2
$ ls
settings.xml
---

        [Note:] The settings.xml file must be in a .m2 directory below the
        HOME directory recognized by your operating system. For Windows users,
        no matter if you are using Cygwin or DOS, this will be what Windows
        uses for you (ex. c:\Documents and Settings\jcstaff\.m2). 

        [Note:] If you place the settings.xml file in the correct location,
        Windows users will end up with a new c:/jhu/repository directory
        created when they issue the mvn command in the following steps.

    [[1]] cd to the root directory you checked out from subversion and
    attempt to build the project.

---
$ cd c:/jhu/784/ejava-javaee/javase5Enhancements/

$ mvn install -Dmaven.test.skip=true
---

    [[1]] Maven will begin downloading dependencies.

    [[1]] We'll look at and configure Maven a bit more in Exercise 1. 
    You'll be responsible for basic tasks of building and 
    testing an application. There will be plenty of examples supplied in class.

* {Part E}: Download and install JBoss Application Server

    [[1]] Go to the 
    {{{http://jboss.org/jbossas/downloads/}
    Download site for the JBoss Application Server}}.  Download version
    6.0.0.Final. 

    [[1]] On Windows, I unzipped mine to c:/apps to avoid having any spaces in the
    path. This produced a directory called c:/apps/jboss-6.0.0.Final.

    [Note:] If you choose a directory other than c:/apps/jboss-6.0.0.Final, make sure to 
    update the value for jboss.home in the MAVEN %HOME%/.m2/settings.xml file.

    []

    [[1]] We'll be using a modification of the "standard" server. This configuration is 
    Java EE 6 compliant, but not the JBoss default. You will need to add "-c ejava-jboss6"
    to the start command to use the specific configuration for class.

    * Copy the jboss-6.0.0.Final/server/standard directory to ejava-jboss6.

    * Overwrite several of the files in the new directory with the following

    []

---
$ pwd
/cygdrive/c/apps/jboss-6.0.0.Final/server

$ cp -r standard ejava-jboss6

$ ls
all  default  ejava-jboss6  jbossweb-standalone  minimal  standard

$ svn export --force http://ejava.info/repos/class/branches/jboss6/servers/ejava-jboss6/src/main/re
sources/ejava-jboss6
A    ejava-jboss6
A    ejava-jboss6/deploy
A    ejava-jboss6/deploy/hornetq
A    ejava-jboss6/deploy/hornetq/hornetq-configuration.xml
A    ejava-jboss6/deploy/hornetq/hornetq-jms.xml
A    ejava-jboss6/deploy/jboss-logging.xml
A    ejava-jboss6/deploy/ejava-jdbc-ds.xml
A    ejava-jboss6/deploy/ejb2-timer-service.xml
Exported revision 1149.
---

    [[1]] Start the server and look for the following lines towards the end
    of its output. This means that our Hypersonic "ejava" database has 
    started.

        [Note:] JBoss will open a listen port that may trigger a firewall alert. You
        will need to permit JBoss to open the listen port(s) in order to operate.

        []

---
$ c:/apps/jboss-6.0.0.Final/bin/run.sh -c ejava-jboss6

 =========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: C:\apps\jboss-6.0.0.Final

  JAVA: /cygdrive/c/apps/java/jdk1.6.0_21/bin/java

  JAVA_OPTS: -server -Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.
rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -Dprogram.name=run.sh -Dja
va.library.path=C:\apps\jboss-6.0.0.Final\bin\native\bin

  CLASSPATH: C:\apps\jboss-6.0.0.Final\bin\run.jar;C:\apps\java\jdk1.6.0_21\lib\tools.jar

 =========================================================================

02:32:19,138 INFO  [AbstractJBossASServerBase] Server Configuration:

        JBOSS_HOME URL: file:/C:/apps/jboss-6.0.0.Final/
        Bootstrap: $JBOSS_HOME\server/ejava-jboss6/conf/bootstrap.xml
        Common Base: $JBOSS_HOME\common/
        Common Library: $JBOSS_HOME\common/lib/
        Server Name: ejava-jboss6
        Server Base: $JBOSS_HOME\server/
        Server Library: $JBOSS_HOME\server/ejava-jboss6/lib/
        Server Config: $JBOSS_HOME\server/ejava-jboss6/conf/
        Server Home: $JBOSS_HOME\server/ejava-jboss6/
        Server Data: $JBOSS_HOME\server/ejava-jboss6/data
        Server Log: $JBOSS_HOME\server/ejava-jboss6/log/
        Server Temp: $JBOSS_HOME\server/ejava-jboss6/tmp

02:32:19,153 INFO  [AbstractServer] Starting: JBossAS [6.0.0.Final "Neo"]
...
02:33:23,231 INFO  [org.apache.coyote.http11.Http11Protocol] Starting Coyote HTTP/1.1 on http-127.0.
0.1-8080
02:33:23,231 INFO  [org.apache.coyote.ajp.AjpProtocol] Starting Coyote AJP/1.3 on ajp-127.0.0.1-8009

02:33:23,231 INFO  [org.jboss.bootstrap.impl.base.server.AbstractServer] JBossAS [6.0.0.Final "Neo"]
 Started in 1m:4s:62ms
---

    [[1]] Start the database UI to verify that the database is up.

---
$ java -classpath c:/apps/jboss-6.0.0.Final/common/lib/hsqldb.jar org.hsqldb.util.DatabaseManager
---

    [Note:] I created a startdbui.bat script that looks something like the following

---
echo off
set JBOSS_HOME=c:\apps\jboss-6.0.0.Final
java -classpath %JBOSS_HOME%/common/lib/hsqldb.jar org.hsqldb.util.DatabaseManager
---

    []

    [[1]] Select HSQL Database Engine Server from the "Type" pulldown. 
    Everything else can stay defaulted. After you hit OK, the GUI should
    connect to the database using port 9001.

    [[1]] Shutdown your server using the shutdown.sh script.

---
$ ./bin/shutdown.sh -S
Shutdown message has been posted to the server.
Server shutdown may take a while - check logfiles for completion
---

    [Note:] You can run just the database application by executing the following.

---
> cd c:/apps/jboss-6.0.0.Final/server/ejava-jboss6/data/hypersonic
> java -classpath c:/apps/jboss-6.0.0.GA/common/lib/hsqldb.jar org.hsqldb.Server -database.0 ejava
---

    [Note:] I created a startdb.bat script that looks something like the following.

---
echo off
set JBOSS_HOME=c:\apps\jboss-6.0.0.Final
set JBOSS_SERVER=ejava-jboss6
cd %JBOSS_HOME%\server\%JBOSS_SERVER%\data\hypersonic
java -classpath c:/apps/jboss-6.0.0.Final/common/lib/hsqldb.jar org.hsqldb.Server -database.0 ejava
---

    []    

    [[1]] You might want to map the run and shutdown scripts to some
    desktop launch icons since you'll be starting and stopping this server
    quite a bit over the semester.


* {Part F}: Download and install Eclipse IDE

        [Note:] An IDE, and specifically Eclipse, is <<NOT>> a requirement
        for class. However it it quite practical to do so.  The memory
        requirements for an IDE and the application server will require
        at least 1GB of memory before doing any size tweeks.

        [Note:] Some products, including MyEclipse, provide a full download
        of Eclipse as a part of their installation. Try to avoid these
        platform specific packaging as a first choice and go with the 
        stock Eclipse for JavaEE developers from Eclipse.

    [[1]] Download and install
    {{{http://www.eclipse.org/}Eclipse}}. They now have a separate download
    for Java Developers and another for Java EE Developers. Most of the 
    features for Java EE Developers is centered around DB and web tier 
    development. It also contains support for working with XML.  Choose 
    the "Java EE" version.

        * I extracted the files to c:/apps, which resulted in a c:/apps/eclipse 
        directory.

        * I created a shortcut to c:/apps/eclipse/eclipse. Since the install
        was just an unzip, there was nothing automatically added to your
        start menu.

    [[1]] Install the Maven Integration for Eclipse Plug-in to allow maven
    builds to be kicked off within Eclipse. Core documentation is located 
    at {{{http://m2eclipse.codehaus.org/} the Codehaus site}}. You don't
    manually download any artifacts. All downloads and installation are
    handled within the Eclipse software updates mechanism.

        * Open Help -> Install New Software

        * Click "Add ..." and enter "http://m2eclipse.sonatype.org/sites/m2e"

        * Check "Maven Integration" and click "Install..."

        * Follow instructions to complete installation.

    [Note:] Ignore any optional packages if present and only install the
    Maven Integration for Eclipse.  Remember...if something goes wrong, 
    its pretty easy to get back to a clean slate.

    []

    [[1]] Register the JDK as a JRE to be used.

        * Preferences -> Java -> Installed JREs -> Add...

        * JRE home: c:\apps\java\jdk1.6.0_21

        * Finish

        * OK
        

    [[1]] Register the MAVEN_HOME as an External installation. This
    configuration is required when working with plugins that significantly
    change the classpath of the build environment.

        * Window -> Preferences -> Maven.Installations -> Add...

        * (enter MAVEN_HOME location)

        * OK

    [[1]] You may get a warning stating that Maven Integration requires
    that Eclipse run within a JDK (versus a JRE). I believe this is for
    embedded mode operation. I fixed my working by adding the following
    to my shortcut for Eclipse.

---
Target: C:\apps\eclipse\eclipse.exe -vm c:\apps\java\jdk1.6.0_21\bin
---
    
    [[1]] Feel free to experiment whether the embedded or external 
    installation works best for you during the semester. The embedded
    should be faster, but the external may be required to build projects
    the have unusual extensions.


* {Part G}: Download and install Ant Build Tool

        [Note:] I use Ant as a portable scripting tool for interactive demos. You will 
        use it to wrap setup commands and Java SE clients for projects you submit.

    [[1]] Download and install {{{http://ant.apache.org/}Ant}}. Use the 
    newer 1.8.2 version.

        * I installed mine in c:/apps, which resulted in c:/apps/apache-ant-1.8.2 
        being created and now being my ANT_HOME.

    [[1]] Add ANT_HOME/bin to your PATH.

---
Windows PATH = %JAVA_HOME%\bin;%MAVEN_HOME%\bin;%PATH%;%ANT_HOME%\bin
---
---
$ ant -version
Apache Ant(TM) version 1.8.2 compiled on December 20 2010
---

* Summary

    During this exercise, you put many of the tools in place to begin 
    obtaining and building examples. The next exercise will employ some
    of the tools that you have installed to walk you through the
    development of a simple Java application.

