Exercise 0: Development Environment Setup

* Goals

    * Establish an initial development environment suitable for use 
    in class for examples, exercises, and projects.

* Objectives

    [Note:] As a general rule, it is strongly recommended that you avoid
    the use of spaces in paths used in class. There will be specific
    issues encountered if you have spaces in your login name (e.g., use
    "JohnSmith", not "John Smith"), the root of your source tree (e.g.,
    don't use "Documents and Settings\..."), and installed applications
    (e.g., don't use "Program Files\...") that will be used to form
    classpaths.

    []

    * (Optional!) {{{Part_A}Download and install Cygwin}}
    if you are a Unix/bash developer
    and feel helpless when looking at a DOS prompt.

    * {{{Part_B}Download and install JavaSE 6 JDK}} 
    to compile and run our applications.

    * {{{Part_C} Download and install a Subversion Client}} 
    to obtain source code for this course.

    * {{{Part_D}Download and install the Maven 2 Build System}} 
    to manage our portable build environment.

    * {{{Part_E}Download and install the JBoss Application Server}}
    with EJB3 Support to supply a database and application server for our projects.

    * {{{Part_F}Download and install Eclipse IDE}} to provide a mechanism
    for enhanced code development and debugging support.

    * {{{Part_G}Download and install Ant Build Tool}} to act as a portable 
    launching environment for interactive demos and Java SE clients turned
    in as a part of class projects.

* {Part A}: (Optional!) Download and install Cygwin

        [Note:] This really is optional; especially if you are not using
        a Windows Operating System. I know of no mandatory
        tools in class that require this Unix emulator interface. 
        However, all posted shell command lines will be expressed in bash.
        If you are comfortable with the DOS shell and can easily translate 
        my bash commands into window clicks and DOS commands (e.g., how
        do you translate "find src -type f" into DOS?) feel free to skip it.

    [[1]] Download the Cygwin installer from the 
    {{{http://cygwin.com/}Cygwin Site}}.

    [[1]] The following
    {{{./cygwininstall/cygwin_install.html}
    cygwin installation example snapshot trail}}
    may be of some assistance in installation. A full installation can 
    take many, many hours. The example has a few hints as to how
    to download enough without getting the entire application. If you find
    out you are missing a command/tool, you can go back to the installer
    later and download/install that specific package. Use {{{http://cygwin.com/packages/}
    Setup Package Search}} to help locate anything that you are missing. Be sure
    to also select the following

        * Archive -> zip & unizip

        * Development -> subversion  - 
        a command-line interface to the class code repository. 

        * Editors -> vim - a standard unix text editor
    
        * Net -> openssh - a command line interface to remotely login and 
        transfer files over the network

        * Shells -> bash - a standard unix shell, emulated to run within
        the Windows environment

        * System -> ping - helpful when debugging a failed URL

        * Utils ->util-linux - to get a larger collection of command line
        utilities, including "more"

    [[1]] Windows users; welcome to the sane world of the bash shell and vi.

* {Part B}: Download and Install JavaSE 6 JDK

    [[1]] Go to the
    {{{http://java.sun.com/javase/downloads/widget/jdk6.jsp} Sun JavaSE JDK
    6 Download Page}} and download JDK 6. 

    [[1]] Change the installation directory so that it does not have
    a spaces in its path. I changed mine to C:\apps\java\jdk1.6.0_18 and
    C:\apps\java\jre1.6.0_18

    [[1]] Go through Control Panel -> System -> Advanced -> Environment
    Variables and add ia definition for JAVA_HOME and add %JAVA_HOME%\bin 
    to your path.

    [[1]] Open up a new command shell and execute "javac -version" to
    determine you can find the JDK and verify the version.

    [[1]] Cygwin users may want to add the following to their .bashrc file to
    make sure the desired instance is used instead of what is located in 
    /usr/bin

---
PATH=`cygpath --unix $JAVA_HOME/bin`:$PATH
---

* {Part C}: Download and install a Subversion Client

        [[1]] Install the subversion client. You will only be performing checkouts
        and updates from the repository. This is pretty simple once you have access
        to a client and the repository URL.

            * Linux Users: Either go to your package installer and
            select subversion or use google to find a suitable rpm for
            your system.

            * Cygwin Users: You may have already installed a subversion
            command line client (try "svn --version"). If not, you can use
            the windows-based tool or go back to the cygwin setup to download
            and install the subversion client.

            * Windows Users: I tried out the TortoiseSVN client
            and was really impressed. Feel free to use another
            client, but I'll go through some of the steps for
            {{{http://tortoisesvn.tigris.org/}TortoiseSVN}} here.

                [[1]] I chose the latest, TortoiseSVN-1.6.7, version. 

                [[1]] The path for this tool won't be a part of any path we use to build
                or run projects, so I chose the default installation directory.

                [[2]] The install, of course, wants you to reboot your system.

                [[3]] TortoiseSVN launchers have been added to your right click
                menus and available from the explorer window as well. There was an issue
                reported by a student last semester that the ToroiseSVN processing
                took over their CPU and had to remove it. I have not encountered that
                issue. Your mileage may vary.

            * Eclipse Users: There is an subversion plugin for Eclipse available
            called {{{http://subclipse.tigris.org/}Subclipse}}. You can install it
            by following the instructions located at
            {{http://subclipse.tigris.org/servlets/ProjectProcess?pageID=p4wYuA}} 
            once you have Eclipse installed. I added the following site to my 
            Eclipse configuration {{http://subclipse.tigris.org/update_1.6.x/}}.
            Use of this plugin is of best use when you are
            commiting changes to the baseline. You will not be doing this during class.

            [Note:] You can checkout the class examples using any of the SVN clients
            above. However, if you use multiple subversion clients (e.g., mix the
            usage of ToortuiseSVN with Subclipse), you need to make sure the 
            products implement the same client version. I have found that TortoiseSVN
            tends to have a baseline release ahead of many of the other clients.

        [[1]] Test out your subversion installation by performing a checkout
        of the ejava-javaee course files. 

            [[1]] Create a directory for class work; e.g., c:/jhu/784

            [[1]] Browse the repository to determine the URL for the 
            project you wish to checkout. You can start at the root 
            using the following
            {{https://ejava.info:8443/repos/class/branches/2009-fall-ejava-javaee}}
            URL.

            [[1]] Check out a level of the SVN repository to your class
            work directory. You can check it out to a directory called ejava-javaee
            (c:/jhu/784/ejava-javaee) or anything you choose.
            If you mess up, you can delete it and retry.

            [[1]] You will be asked to verify the self-signed certificate for the 
            SVN repository. You must use https to access the repository.

---
$ svn checkout https://ejava.info:8443/repos/class/branches/2010-spring-ejava-javaee ejava-javaee
A  ejava-javaee/.project
A  ejava-javaee/jdbcDAO
A  ejava-javaee/jdbcDAO/.classpath
A  ejava-javaee/jdbcDAO/.project
A  ejava-javaee/jdbcDAO/src
A  ejava-javaee/jdbcDAO/src/test
A  ejava-javaee/jdbcDAO/src/test/java
A  ejava-javaee/jdbcDAO/src/test/java/ejava
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao
A  ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao/jdbc
A ejava-javaee/jdbcDAO/src/test/java/ejava/examples/dao/jdbc/JDBCBookDAOTest.java
---

                [Note:] It was not required that you check all files out from
                the root, but it didn't hurt either.

            [[1]] Repeat after me, "Cool!". This beats managing a bunch of 
            zip files any day. As the content is updated during the
            semester, just do an update to see changes

---
$ svn update
At revision 24.
---

* {Part D}: Download and install Maven Build System

    [[1]] Go to the 
    {{{http://maven.apache.org/}Maven Site}}  and download the latest
    version for your platform. You don't need the Tasks for Ant. Those
    are for when you want to call Maven from within Ant.

    [[1]] Unzip the archive. I put mine in c:/apps/, which resulted in a
    c:/apps/apache-maven-2.2.1-bin directory. I then moved the single sub-directory
    up to the c:/apps level and removed the empty parent. That left me with
    c:/apps/apache-maven-2.2.1

---
$ ls c:/apps/apache-maven-2.2.1
LICENSE.txt  NOTICE.txt  README.txt  bin  boot  conf  lib
---

    [[1]] Define MAVEN_HOME and add $MAVEN_HOME/bin to your PATH. My Windows
    PATH at this point looks like the following.

---
%JAVA_HOME%/bin;%MAVEN_HOME%\bin;%PATH%
---

    [[1]] Execute "mvn -version" as a test.

---
$ which mvn
/cygdrive/c/apps/apache-maven-2.2.1/bin/mvn

$ mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 15:16:01-0400)
Java version: 1.6.0_18
Java home: c:\apps\java\jdk1.6.0_18\jre
Default locale: en_US, platform encoding: Cp1252
OS name: "windows xp" version: "5.1" arch: "x86" Family: "windows"
---

    [Cywin Users:] You must express all PATHs in unix form. Unix PATHs use ":" as a 
    PATH separator and "/" as a directory separator. /cygdrive/c can be used to refer
    to "c:\". You can programmatically change a PATH using the cygpath command and
    issue the -windows or -unix flag.

---
$ cygpath --unix c:/
/cygdrive/c

$ cygpath --unix $MAVEN_HOME
/cygdrive/c/apps/apache-maven-2.2.1

$ cygpath --windows $MAVEN_HOME
c:\apps\apache-maven-2.2.1

$ cygpath --windows /cygdrive/c
c:\

$ export PATH=$PATH:`cygpath --unix $MAVEN_HOME/bin`
---

    []

    [[1]] Add a personal maven configuration file, called settings.xml,
    to your $HOME/.m2 directory (windows and Cygwin users will put this in
    %HOME%/.m2). This file will be used to point to a custom repository
    location (i.e., one that does have spaces in the path) and reference
    the class repositories. Use the <<{{{../files/maven/settings.xml}
    following file}}>> as a starting point.

---
$ mkdir %HOME%/.m2

jcstaff@bullet /cygdrive/c/Documents and Settings/jcstaff/.m2
$ ls
settings.xml
---

        [Note:] The settings.xml file must be in a .m2 directory below the
        HOME directory recognized by your operating system. For Windows users,
        no matter if you are using Cygwin or DOS, this will be what Windows
        uses for you (ex. c:\Documents and Settings\jcstaff\.m2). 

        [Note:] If you place the settings.xml file in the correct location,
        Windows users will end up with a new c:/jhu/repository directory
        created when they issue the mvn command in the following steps.

    [[1]] cd to the root directory you checked out from subversion and
    attempt to build the project.

---
$ cd c:/jhu/784/ejava-javaee/javase5Enhancements/

$ mvn install -Dmaven.test.skip=true
---

    [[1]] Maven will begin downloading dependencies, but will
    unfortunately run into several "Error transferring file" problems
    before we get all dependencies. Just grit your teeth and re-issue
    the command until it completes or you hit a real error. The transfer
    errors have to do with the fact you are downloading files from a set
    of mirror sites that is shared with the rest of the internet. Once
    these files are downloaded once, the local copies will be used
    instead.

---
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Error building POM (may not be this project's POM).


Project ID: org.apache.maven:maven-model

Reason: Error getting POM for 'org.apache.maven:maven-model' from the repository
: Error transferring file
  org.apache.maven:maven-model:pom:2.0

from the specified remote repositories:
  central (http://repo1.maven.org/maven2),
  apache.snapshots (http://svn.apache.org/maven-snapshot-repository),
  snapshots (http://snapshots.maven.codehaus.org/maven2)
---
---
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Error building POM (may not be this project's POM).


Project ID: null:plexus-compiler-api:jar:1.5.2

Reason: Cannot find parent: org.codehaus.plexus:plexus-compiler for project: nul
l:plexus-compiler-api:jar:1.5.2
---

    [[1]] If you get an error looking for JBoss artifacts,
    don't worry. You may have attempted to build from the root or build a sub-project
    that requires further setup.

    [[1]] We'll look at and configure Maven a bit more in Exercise 1. 
    You'll be responsible for basic tasks of building and 
    testing an application. There will be plenty of examples supplied in class.

* {Part E}: Download and install JBoss Application Server

    [[1]] Go to the 
    {{{http://jboss.org/jbossas/downloads/}
    Download site for the JBoss Application Server}}.  Download version
    5.1.0.GA for jdk6. Burke's EJB3 with JBoss workbook shows an example of using
    the "Run Installer" that walks you through the right options to get
    JBoss <<AND>> EJB3. However, that was for 4.0.4/5. EJB3 is enabled
    by default, starting with 4.2. Please download the jdk6 version towards the
    bottom of the list.

    [[1]] On Windows, I unzipped mine to c:/apps to avoid having any spaces in the
    path. This produced a directory called c:/apps/jboss-5.1.0.GA.

    [Note:] If you choose a directory other than c:/apps/jboss-5.1.0.GA, make sure to 
    update the value for jboss.home in the MAVEN %HOME%/.m2/settings.xml file.

    []

    [[1]] We'll be using the "standard" server. This configuration is Java EE 5
    compliant, but not the JBoss default. You will need to add "-c standard"
    to the start command.

---
$ ls c:/apps/jboss-5.1.0.GA/server/standard/
conf  deploy  deployers  lib
---

    [[1]] Add a configuration file that will define a database
    we'll be using for class. Although we can start/stop the database
    without using JBoss and won't need the server for a while, it is 
    very easy to have the all servers managed under a single set of
    run/shutdown scripts. Paste the 
    <<{{{../files/jboss/deploy/ejava-jdbc-ds.xml}
    following file}}>> into the JBOSS_HOME/servers/standard/deploy directory

    [[1]] Start the server and look for the following lines towards the end
    of its output. This means that our Hypersonic "ejava" database has 
    started.

        [Note:] JBoss will open a listen port that may trigger a firewall alert. You
        will need to permit JBoss to open the listen port(s) in order to operate.

        []

---
$ c:/apps/jboss-5.1.0.GA/bin/run.sh -c standard
 =========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: c:\apps\jboss-5.1.0.GA

  JAVA: /cygdrive/c/apps/java/jdk1.6.0_18/bin/java

  JAVA_OPTS: -Dprogram.name=run.sh -server -Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsu
n.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000

  CLASSPATH: c:\apps\jboss-5.1.0.GA\bin\run.jar;c:\apps\java\jdk1.6.0_18\lib\tools.jar

 =========================================================================

15:48:25,484 INFO  [ServerImpl] Starting JBoss (Microcontainer)...
15:48:25,499 INFO  [ServerImpl] Release ID: JBoss [The Oracle] 5.1.0.GA (build: SVNTag=JBoss_5_1_0_GA date=200905221053)

15:48:25,499 INFO  [ServerImpl] Bootstrap URL: null
15:48:25,499 INFO  [ServerImpl] Home Dir: C:\apps\jboss-5.1.0.GA
15:48:25,499 INFO  [ServerImpl] Home URL: file:/C:/apps/jboss-5.1.0.GA/
15:48:25,499 INFO  [ServerImpl] Library URL: file:/C:/apps/jboss-5.1.0.GA/lib/
15:48:25,530 INFO  [ServerImpl] Patch URL: null
15:48:25,530 INFO  [ServerImpl] Common Base URL: file:/C:/apps/jboss-5.1.0.GA/common/
15:48:25,530 INFO  [ServerImpl] Common Library URL: file:/C:/apps/jboss-5.1.0.GA/common/lib/
15:48:25,530 INFO  [ServerImpl] Server Name: standard
15:48:25,530 INFO  [ServerImpl] Server Base Dir: C:\apps\jboss-5.1.0.GA\server
15:48:25,530 INFO  [ServerImpl] Server Base URL: file:/C:/apps/jboss-5.1.0.GA/server/
15:48:25,530 INFO  [ServerImpl] Server Config URL: file:/C:/apps/jboss-5.1.0.GA/server/standard/conf/
15:48:25,530 INFO  [ServerImpl] Server Home Dir: C:\apps\jboss-5.1.0.GA\server\standard
15:48:25,530 INFO  [ServerImpl] Server Home URL: file:/C:/apps/jboss-5.1.0.GA/server/standard/
15:48:25,530 INFO  [ServerImpl] Server Data Dir: C:\apps\jboss-5.1.0.GA\server\standard\data
15:48:25,530 INFO  [ServerImpl] Server Library URL: file:/C:/apps/jboss-5.1.0.GA/server/standard/lib/
15:48:25,530 INFO  [ServerImpl] Server Log Dir: C:\apps\jboss-5.1.0.GA\server\standard\log
15:48:25,530 INFO  [ServerImpl] Server Native Dir: C:\apps\jboss-5.1.0.GA\server\standard\tmp\native
15:48:25,530 INFO  [ServerImpl] Server Temp Dir: C:\apps\jboss-5.1.0.GA\server\standard\tmp
15:48:25,530 INFO  [ServerImpl] Server Temp Deploy Dir: C:\apps\jboss-5.1.0.GA\server\standard\tmp\deploy

...

15:49:42,734 INFO  [STDOUT] [Server@1f25d83]: Initiating startup sequence...
15:49:42,734 INFO  [STDOUT] [Server@1f25d83]: Server socket opened successfully in 0 ms.
15:49:43,109 INFO  [STDOUT] [Server@1f25d83]: Database [index=0, id=0, db=file:C:\apps\jboss-5.1.0.GA\server\standard\da
ta\hypersonic\ejava, alias=] opened sucessfully in 375 ms.
15:49:43,140 INFO  [STDOUT] [Server@1f25d83]: Startup sequence completed in 406 ms.

...

15:49:52,280 INFO  [Http11Protocol] Starting Coyote HTTP/1.1 on http-127.0.0.1-8080
15:49:52,296 INFO  [AjpProtocol] Starting Coyote AJP/1.3 on ajp-127.0.0.1-8009
15:49:52,296 INFO  [ServerImpl] JBoss (Microcontainer) [5.1.0.GA (build: SVNTag=JBoss_5_1_0_GA date=200905221053)] Start
ed in 1m:7s:62ms
---

    [[1]] Start the database UI to verify that the database is up.

---
$ java -classpath c:/apps/jboss-5.1.0.GA/common/lib/hsqldb.jar org.hsqldb.util.DatabaseManager
---

    [Note:] I created a startdbui.bat script that looks something like the following

---
echo off
set JBOSS_HOME=c:\apps\jboss-5.1.0.GA
java -classpath %JBOSS_HOME%/common/lib/hsqldb.jar org.hsqldb.util.DatabaseManager
---

    []

    [[1]] Select HSQL Database Engine Server from the "Type" pulldown. 
    Everything else can stay defaulted. After you hit OK, the GUI should
    connect to the database using port 9001.

    [[1]] Shutdown your server using the shutdown.sh script.

---
$ ./bin/shutdown.sh -S
Shutdown message has been posted to the server.
Server shutdown may take a while - check logfiles for completion
---

    [Note:] You can run just the database application by executing the following.

---
> cd c:/apps/jboss-5.1.0.GA/server/standard/data/hypersonic
> java -classpath c:/apps/jboss-5.1.0.GA/common/lib/hsqldb.jar org.hsqldb.Server -database.0 ejava
---

    [Note:] I created a startdb.bat script that looks something like the following.

---
echo off
set JBOSS_HOME=c:\apps\jboss-5.1.0.GA
set JBOSS_SERVER=standard
cd %JBOSS_HOME%\server\%JBOSS_SERVER%\data\hypersonic
java -classpath c:/apps/jboss-5.1.0.GA/common/lib/hsqldb.jar org.hsqldb.Server -database.0 ejava
---

    []    

    [[1]] You might want to map the run and shutdown scripts to some
    desktop launch icons since you'll be starting and stopping this server
    quite a bit over the semester.

    [[1]] Change the data source used to persist EJB Timers to be the same as the
    one used to persist your EJB application data. This helps avoid issues with
    trying to enlist 2 resources that do not support 2-phase-commit in the same
    transaction. By moving JMS to the ejavaDS data source, we avoid this issue
    by using only a single resource. In server/standard/deploy/ejb2-timer-service.xml,
    change the jboss.jca:service=DataSourceBinding,name from DefaultDS to ejavaDS.

---
//FROM
    <!-- DataSourceBinding ObjectName -->
    <depends optional-attribute-name="DataSource">jboss.jca:service=DataSourceBinding,name=DefaultDS</depends>

    <!-- The timers table name -->
    <attribute name="TimersTable">TIMERS</attribute>
    <depends>jboss.jdbc:datasource=DefaultDS,service=metadata</depends>
  </mbean>
---
---
//CHANGE TO
    <!-- DataSourceBinding ObjectName -->
    <depends optional-attribute-name="DataSource">jboss.jca:service=DataSourceBinding,name=ejavaDS</depends>

    <!-- The timers table name -->
    <attribute name="TimersTable">TIMERS</attribute>
    <depends>jboss.jdbc:datasource=ejavaDS,service=metadata</depends>
  </mbean>
---

    [[1]] Add support for https protocol by following the instructions in the
    {{{./jboss-https.html} Enable JBoss HTTPS Exercise}}

* {Part F}: Download and install Eclipse IDE

        [Note:] An IDE, and specifically Eclipse, is <<NOT>> a
        requirement for class. The memory requirements for an IDE and the
        application server may have your machine swapping quite a bit.
        I have included coverage of an IDE only as a productivity tool.
        You may use vi and command line tools (I do!) or something like
        NetBeans from Sun. I do find the ability to step through an
        execution with a graphical debugger priceless.

        [Note:] Some products, including MyEclipse, provide a full download
        of Eclipse as a part of their installation. Feel free to try those 
        installations and fall back to a bare install if you encounter 
        problems that cannot be worked around. For example, one student 
        experienced issues integrating the Maven m2eclipse into their
        MyEclipse environment and dropped back to a pure Eclipse instance
        to get that optional piece running.

    [[1]] Download and install
    {{{http://www.eclipse.org/}Eclipse}}. They now have a separate download
    for Java Developers and another for Java EE Developers. Most of the 
    features for Java EE Developers is centered around DB and web tier 
    development. It also contains support for working with XML.  Choose 
    the "Java EE" version.

        * I extracted the files to c:/apps, which resulted in a c:/apps/eclipse 
        directory.

        * I created a shortcut to c:/apps/eclipse/eclipse. Since the install
        was just an unzip, there was nothing automatically added to your
        start menu.

    [[1]] Install the Maven Integration for Eclipse Plug-in to allow maven
    builds to be kicked off within Eclipse. Core documentation is located 
    at {{{http://m2eclipse.codehaus.org/} the Codehaus site}}. You don't
    manually download any artifacts. All downloads and installation are
    handled within the Eclipse software updates mechanism.

        * Open Help -> Install New Software

        * Click "Add ..." and enter "http://m2eclipse.sonatype.org/update/"

        * Check "Maven Integration" and click "Install..."

        * Follow instructions to complete installation.

    [Note:] You will notice other packages that are available for update.
    I had a lot of issues with the Eclipse Web Dev Tools and m2eclipse
    integrating with one another when these were selected. Leaving only
    the Maven Integration selected seemed to improve the situation.
    Remember...if something goes wrong, its pretty easy to get back to a 
    clean slate.

    []

    [[1]] Register the JDK as a JRE to be used.

        * Preferences -> Java -> Installed JREs -> Add...

        * JRE home: c:\apps\java\jdk1.6.0_18

        * Finish

        * OK
        

    [[1]] Register the MAVEN_HOME as an External installation. This
    configuration is required when working with plugins that significantly
    change the classpath of the build environment.

        * Window -> Preferences -> Maven.Installations -> Add...

        * (enter MAVEN_HOME location)

        * OK

    [[1]] You may get a warning stating that Maven Integration requires
    that Eclipse run within a JDK (versus a JRE). I believe this is for
    embedded mode operation. I fixed my working by adding the following
    to my shortcut for Eclipse.

---
Target: C:\apps\eclipse\eclipse.exe -vm c:\apps\java\jdk1.6.0_18\bin
---
    
    [[1]] Feel free to experiment whether the embedded or external 
    installation works best for you during the semester. The embedded
    should be faster, but the external may be required to build projects
    the have unusual extensions.


* {Part G}: Download and install Ant Build Tool

        [Note:] I use Ant as a portable scripting tool for interactive demos. You will 
        use it to wrap setup commands and Java SE clients for projects you submit.

    [[1]] Download and install {{{http://ant.apache.org/}Ant}}. Please use
    the older 1.7.1 version. I have not tested yet with the 1.8 version. You can 
    fine the older releases at {{http://archive.apache.org/dist/ant/binaries/}}.
    The file is called apache-ant-1.7.1-bin.zip.

        * I installed mine in c:/apps, which resulted in c:/apps/apache-ant-1.7.1 
        being created and now being my ANT_HOME.

    [[1]] Add ANT_HOME/bin to your PATH.

---
Windows PATH = %JAVA_HOME%\bin;%MAVEN_HOME%\bin;%PATH%;%ANT_HOME%\bin
---
---
> ant -version
Apache Ant version 1.7.1 compiled on June 27 2008
---

* Summary

    During this exercise, you put many of the tools in place to begin 
    obtaining and building examples. The next exercise will employ some
    of the tools that you have installed to walk you through the
    development of a simple Java application.

