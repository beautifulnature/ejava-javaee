Java EE Exercise 

Part E: Create WAR Project Shell

    This exercise will add a user interface for our application using 
    a Web UI. The Web UI will demonstrate how to leverage MVC architecture
    with Servlets, JSPs, and integration with the EJB Tieri and EAR. The
    development environment will also be a focus of this exercise.

* Objectives

    * Create and deploy a bare bones WAR within our application.

        * {{{Create_the_WAR_Maven_project}
            Create the WAR Maven project
            }}

        * {{{Configure_and_Test_WAR_using_Jetty}
            Configure and Test WAR using Jetty
            }}

        * {{{Configure_the_WAR_into_your_EAR_and_test_within_JBoss}
            Configure the WAR into your EAR and test within JBoss
            }}

        * {{{Add_Servlet}
            Add Servlet
            }}

    * Integrate your WAR with and end-to-end call to the EJB.

        * {{{Add_JNDI_InitialContext_to_Servlet}
            Add JNDI InitialContext to Servlet
            }}

        * {{{Add_EJB_to_Servlet}
            Add EJB to Servlet
            }}

        * {{{Add_Controller_Servlet_to_invoke_EJB}
            Add Controller Servlet to invoke EJB
            }}



* {Create the WAR Maven project}

    The WAR project will be used to develop one WAR within our application.

    [[1]] Add a WAR project directory to your project tree.

---
$ pwd
/cygdrive/c/proj/javaeeEx

$ ls
javaeeExEAR  javaeeExEJB  javaeeExImpl  javaeeExTest  pom.xml

$ mkdir javaeeExWAR
---

    [[1]] Add a minimal version of the required web.xml descriptor 
    for the WAR.

---
$ pwd
/cygdrive/c/proj/javaeeEx/javaeeExWAR

$ mkdir -p src/main/webapp/WEB-INF
---
---
$ cat src/main/webapp/WEB-INF/web.xml
<web-app
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5">

  <display-name>Web Tier Exercise Web Application</display-name>

</web-app>
---

    [[1]] Add a minimal version of the maven pom.xml to the WAR
    project.

---
$ cat pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <parent>
        <artifactId>javaeeEx</artifactId>
        <groupId>myorg.javaee</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <groupId>myorg.javaee</groupId>
    <artifactId>javaeeExWAR</artifactId>
    <packaging>war</packaging>
    <name>Java EE Exercise WAR</name>

    <dependencies>
    </dependencies>

    <build>
    </build>

    <profiles>
    </profiles>
</project>
---

    [[1]] Build your minimal version of a WAR.

---
$ mvn clean install
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Java EE Exercise WAR
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] Deleting directory c:\proj\javaeeEx\javaeeExWAR\target
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] No sources to compile
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] No sources to compile
[INFO] [surefire:test]
[INFO] No tests to run.
[INFO] [war:war]
[INFO] Packaging webapp
[INFO] Assembling webapp[javaeeExWAR] in [c:\proj\javaeeEx\javaeeExWAR\target\javaeeExWAR-1.0-SNAPSHOT]
[INFO] Processing war project
[INFO] Webapp assembled in[31 msecs]
[INFO] Building war: c:\proj\javaeeEx\javaeeExWAR\target\javaeeExWAR-1.0-SNAPSHOT.war
[INFO] [install:install]
[INFO] Installing c:\proj\javaeeEx\javaeeExWAR\target\javaeeExWAR-1.0-SNAPSHOT.war to c:\proj\repository\myorg\javaee\ja
vaeeExWAR\1.0-SNAPSHOT\javaeeExWAR-1.0-SNAPSHOT.war
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2 seconds
[INFO] Finished at: Sun Mar 29 10:01:22 EDT 2009
[INFO] Final Memory: 7M/14M
[INFO] ------------------------------------------------------------------------
---
---
javaeeExWAR/
|-- pom.xml
|-- src
|   `-- main
|       `-- webapp
|           `-- WEB-INF
|               `-- web.xml
`-- target
    |-- javaeeExWAR-1.0-SNAPSHOT
    |   |-- META-INF
    |   `-- WEB-INF
    |       |-- classes
    |       `-- web.xml
    |-- javaeeExWAR-1.0-SNAPSHOT.war
    `-- war
        `-- work
            `-- webapp-cache.xml
---

    
* {Configure and Test WAR using Jetty}

    Web UI development requires a great deal of change, save, view,
    and repeat. We will want to cut the time it takes to complete that
    cycle as much as possible and use the lightweight Jetty Servlet
    engine and maven plugin to help do that for us and saving some of
    the significant build and deploy time to server.

    [[1]] Add the Jetty maven plugin configuration to your pom.xml. 

        * Do this within a profile so that the configuration is only
        active during special development scenarios.

        * Assign a unique port number (9080) that does not conflict with
        the JBoss server (8080).

        * Specify the number of seconds (10) that it will sleep 
        before re-checking for changes to the Java classes. The newly
        compiled classes within Eclipse will be seen and reloaded by
        Jetty within a 10 second delay. The JSP saves will be seen 
        by the next refresh (without a delay).

---
<profile>
    <id>jetty</id>
    <build>
        <plugins>
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>maven-jetty-plugin</artifactId>
                <version>6.1.19</version>
                <configuration>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <connectors>
                        <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector"
                            <port>9080</port>
                            <maxIdleTime>60000</maxIdleTime>
                        </connector>
                    </connectors>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <dependencies>
    </dependencies>
</profile>
---

    [[1]] Activate the application using the Jetty maven plugin.

---
$ mvn jetty:run -Pjetty
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'jetty'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Java EE Exercise WAR
[INFO]    task-segment: [jetty:run]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing jetty:run
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] No sources to compile
[INFO] [jetty:run]
[INFO] Configuring Jetty for project: Java EE Exercise WAR
[INFO] Webapp source directory = C:\proj\javaeeEx\javaeeExWAR\src\main\webapp
[INFO] web.xml file = C:\proj\javaeeEx\javaeeExWAR\src\main\webapp\WEB-INF\web.xml
[INFO] Classes directory C:\proj\javaeeEx\javaeeExWAR\target\classes does not exist
2009-03-29 10:19:53.625::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /javaeeExWAR
[INFO] Tmp directory = c:\proj\javaeeEx\javaeeExWAR\target\work
[INFO] Web defaults =  jetty default
[INFO] Webapp directory = C:\proj\javaeeEx\javaeeExWAR\src\main\webapp
[INFO] Starting jetty 6.1.10 ...
2009-03-29 10:19:53.671::INFO:  jetty-6.1.10
[INFO] Classpath = [file:/C:/proj/javaeeEx/javaeeExWAR/target/classes]
2009-03-29 10:19:53.921::INFO:  Started SelectChannelConnector @ 0.0.0.0:9080
[INFO] Started Jetty Server
[INFO] Starting scanner at interval of 10 seconds.
---

    [[1]] Navigate to the root URL within the Jetty server. Use the 
    Jetty provided link to locate the root of our application.

---
http://localhost:9080/


Error 404 - Not Found.
No context on this server matched or handled this request.
Contexts known to this server are:

    * /javaeeExWAR ---> ContextHandler@10ca208{/javaeeExWAR,file:/C:/proj/javaeeEx/javaeeExWAR/src/main/webapp/}

The links above may not work if a virtual host is configured
---
---
http://localhost:9080/javaeeExWAR/


Directory: /javaeeExWAR/
WEB-INF/        0 bytes         Mar 29, 2009 9:55:59 AM
---

    [[1]] Add the following index.jsp to the root of your 
    application. Place this in javaeeExWAR/src/main/webapp/index.jsp

---
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <title>JavaEE Exercise Main Page</title>
</head>
<body>
    <h2>Hello</h2>
</body>
</html>
---

    [[1]] Hit refresh on the browser to see your new index.jsp.

---
http://localhost:9080/javaeeExWAR/


Hello
---

* {Configure the WAR into your EAR and test within JBoss}

    [[1]] Add the WAR module to the parent pom.

---
    <modules>
        <module>javaeeExImpl</module>
        <module>javaeeExEJB</module>
        <module>javaeeExWAR</module>
        <module>javaeeExEAR</module>
    </modules>
---

    [[1]] Add a dependency from the EAR project to the WAR.

---
    <dependencies>
        <dependency>
            <groupId>${pom.groupId}</groupId>
            <artifactId>javaeeExEJB</artifactId>
            <version>${pom.version}</version>
            <type>ejb</type>
            <exclusions>
                <!-- jboss doesn't want to see already provided jars -->
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>${pom.groupId}</groupId>
            <artifactId>javaeeExWAR</artifactId>
            <version>${pom.version}</version>
            <type>war</type>
        </dependency>
    </dependencies>
---

    [[1]] Add an optional configuration to supply a custom context
    root for the WAR when deployed to the application server.

---
    <build>
        <finalName>javaeeEx</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-ear-plugin</artifactId>
                <configuration>
                    <modules>
                        <webModule>
                            <groupId>${pom.groupId}</groupId>
                            <artifactId>javaeeExWAR</artifactId>
                            <contextRoot>javaeeEx</contextRoot>
                        </webModule>
                    </modules>
                </configuration>
            </plugin>
        </plugins>
    </build>
---

    [[1]] Build and deploy the EAR from the parent project.

---
$ mvn clean install
[INFO] Scanning for projects...
[INFO] Reactor build order:
[INFO]   Java EE Exercise
[INFO]   Java EE Exercise Impl
[INFO]   Java EE Exercise EJB
[INFO]   Java EE Exercise WAR
[INFO]   Java EE Exercise EAR
[INFO]   Java EE Exercise Remote Test
[INFO] ------------------------------------------------------------------------
[INFO] Building Java EE Exercise

...

[INFO] Building Java EE Exercise Remote Test
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] Deleting directory C:\proj\javaeeEx\javaeeExTest\target
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] No sources to compile
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Compiling 1 source file to C:\proj\javaeeEx\javaeeExTest\target\test-classes
[INFO] [cargo:undeploy {execution: deploy-component}]
[INFO] [cargo:deploy {execution: deploy-component}]

...

[INFO] Reactor Summary:
[INFO] ------------------------------------------------------------------------
[INFO] Java EE Exercise ...................................... SUCCESS [2.485s]
[INFO] Java EE Exercise Impl ................................. SUCCESS [7.640s]
[INFO] Java EE Exercise EJB .................................. SUCCESS [0.860s]
[INFO] Java EE Exercise WAR .................................. SUCCESS [0.531s]
[INFO] Java EE Exercise EAR .................................. SUCCESS [0.344s]
[INFO] Java EE Exercise Remote Test .......................... SUCCESS [5.406s]
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
---
---
//SERVER LOG


10:45:52,296 INFO  [EARDeployer] Init J2EE application: file:/C:/proj/javaeeEx/javaeeExEAR/target/javaeeEx.ear
...
10:45:53,843 INFO  [EJB3Deployer] Deployed: file:/C:/apps/jboss-4.2.3.GA/server/default/tmp/deploy/tmp6527179662365794541javaeeEx.ear-contents/javaeeExEJB-1.0-SNAPSHOT.jar
10:45:53,859 INFO  [TomcatDeployer] deploy, ctxPath=/javaeeEx, warUrl=.../tmp/deploy/tmp6527179662365794541javaeeEx.ear-contents/javaeeExWAR-1.0-SNAPSHOT-exp.war/
10:45:53,968 DEBUG [config] ConfigureListener.contextInitialized(/javaeeEx)
---

    [[1]] Test the deployment of the application by using the assigned
    URL and context root.

---
http://localhost:8080/javaeeEx/


Hello
---

* {Add Servlet}

    [[1]] Add a dependency on the Servlet API and commons logging
    to support the code written specifically for the servlet class.
    Define the scope to be scope=provided so they are not included
    in the WEB-INF/lib at deployment.

---
    <dependencies>
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
          <version>2.5</version>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
          <version>1.0.4</version>
          <scope>provided</scope>
        </dependency>
    </dependencies>
---

    [[1]] Repeat the dependency configuration for the commons logging
    within the Jetty profile, except make it scope=compile in that
    section. We will be maintaining a global and a Jetty profile-specific
    configuration within the pom.xml. Jetty will provide the necessary
    Servlet classes so we don't have to repeat the servlet-api 
    dependency. However, we will have to provide a dependency on
    log4j to leverage this logging framework.

---
<profile>
    <id>jetty</id>
...
    <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
          <version>1.0.4</version>
          <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.13</version>
          <scope>compile</scope>
        </dependency>
    </dependencies>
</profile>
---


    [[1]] Configure the maven compiler plugin to use Java 5 when
    building the WAR Java classes.

---
    <build>
        <plugins>
              <!-- make sure we are building java5 -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <source>1.5</source>
              <target>1.5</target>
            </configuration>
          </plugin>
        </plugins>
    </build>
---

    [[1]] Add the following shell of a Servlet class to the WAR.

---
$ pwd
/cygdrive/c/proj/javaeeEx/javaeeExWAR

$ mkdir -p src/main/java/myorg/javaeeex/web
---
---
package myorg.javaeeex.web;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

@SuppressWarnings("serial")
public class RegistrarHandlerServlet extends HttpServlet {
    private static Log log = LogFactory.getLog(RegistrarHandlerServlet.class);

    public void init() throws ServletException {
        log.debug("init() called ");
    }

    protected void doGet(HttpServletRequest request,
                         HttpServletResponse response)
        throws ServletException, IOException {
        log.debug("doGet() called");    
    }

    protected void doPost(HttpServletRequest request,
                          HttpServletResponse response)
        throws ServletException, IOException {
        log.debug("doPost() called, calling doGet()");
        doGet(request, response);
    }

    public void destroy() {
        log.debug("destroy() called");
    }
}
---

    [[1]] Register the servlet within the WEB-INF/web.xml. Map the
    servlet to the "/model/admin/handler" url-pattern.

---
<web-app
   ...


    <servlet>
        <servlet-name>AdminHandler</servlet-name>
        <servlet-class>myorg.javaeeex.web.RegistrarHandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>AdminHandler</servlet-name>
        <url-pattern>/model/admin/handler</url-pattern>
    </servlet-mapping>
</web-app>
---

    [[1]] Add a list of menu entries to the root index.jsp and 
    a menu entry to invoke the servlet.

---
<body>
   ...

    <ul>
        <li><a href="model/admin/handler">invoke servlet</a></li>
    </ul>
</body>
</html>
---

    [[1]] Add a log4j.xml to be used for local debugging.

---
$ mkdir -p src/test/resources
---
---
$ cat src/test/resources/log4j.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">

   <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
         <param name="Target" value="System.out"/>

         <layout class="org.apache.log4j.PatternLayout">
            <!-- The default pattern: Date Priority [Category] Messagen -->
            <!--
            <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/>
            -->
            <param name="ConversionPattern" value=" -%m%n"/>
         </layout>
   </appender>

   <appender name="logfile" class="org.apache.log4j.RollingFileAppender">
      <param name="File" value="/tmp/log4j-out.txt"/>
      <param name="Append" value="false"/>
      <param name="MaxFileSize" value="100KB"/>
      <param name="MaxBackupIndex" value="1"/>
      <layout class="org.apache.log4j.PatternLayout">
         <param name="ConversionPattern" value="%-5p %d{dd-MM HH:mm:ss,SSS} [%c] (%F:%M:%L)  -%m%n"/>
      </layout>
   </appender>

   <logger name="myorg">
      <level value="debug"/>
   </logger>
   <root>
      <priority value="info"/>
      <appender-ref ref="CONSOLE"/>
   </root>

</log4j:configuration>
---

    [[1]] Test your new artifacts using Jetty first. However, when you
    launch it, you will need to specifically tell Jetty to use
    log4j and a configuration you provide.

---
mvn -Dslf4j=true -Dlog4j.configuration=file:./src/test/resources/log4j.xml jetty:run -Pjetty
---

    [[1]] Access your servlet hosted within Jetty

        * http://localhost:9080/javaeeExWAR/

        * click on "invoke servlet"

        []

---
//CONSOLE

[INFO] Starting scanner at interval of 10 seconds.
 -init() called
 -doGet() called
---

    [[1]] Access your servlet hosted within the application server. You will need to rebuild and -re-deploy your application to do so.
    
        * http://localhost:8080/javaeeEx/

        * click on "invoke servlet"

        []

---
$ pwd
/cygdrive/c/proj/javaeeEx

$mvn clean install
...
[INFO] [cargo:undeploy {execution: deploy-component}]
[INFO] [cargo:deploy {execution: deploy-component}]
...
---
---
//SERVER LOG

[INFO] Starting scanner at interval of 10 seconds.
 -init() called
 -doGet() called
---

* {Add JNDI InitialContext to Servlet}

    [[1]] Add the dependences within the Jetty profile dependencies
    required to be a JBoss client.

---
//jetty profile dependencies

    <repositories>
        <repository>
            <id>jboss-repo</id>
            <name>JBoss Maven Repository</name>
            <url>http://repository.jboss.org/maven2</url>
        </repository>
    </repositories>
...
        <dependency>
            <groupId>org.jboss.jbossas</groupId>
            <artifactId>jboss-as-client</artifactId>
            <version>5.1.0.GA</version>            
            <type>pom</type>
            <scope>compile</scope>
        </dependency>
---

    [[1]] Define the properties required to access the JNDI tree within 
    JBoss. A jndi.properties file will not work in this case. We will
    have to provide the properties manually -- mostly for the Jetty case.
    Add the following to your web.xml servlet config

---
    <context-param>
        <param-name>java.naming.factory.initial</param-name>
        <param-value>org.jnp.interfaces.NamingContextFactory</param-value>
    </context-param>
    <context-param>
        <param-name>java.naming.provider.url</param-name>
        <param-value>jnp://localhost:1099</param-value>
    </context-param>
    <context-param>
        <param-name>java.naming.factory.url.pkgs</param-name> 
        <param-value>org.jboss.naming:org.jnp.interfaces</param-value>
    </context-param>

    <servlet>
        <servlet-name>AdminHandler</servlet-name>
        <servlet-class>myorg.javaeeex.web.RegistrarHandlerServlet</servlet-class>
    </servlet>
---

    [[1]] Add a helper method to the servlet that will resolve the
    Registrar; starting with the JNDI tree.

---
import java.util.Enumeration;
import java.util.Properties;

import javax.naming.InitialContext;
...
import javax.servlet.ServletConfig;
...
    private void initRegistrar(ServletConfig config) throws Exception {        

            //build an InitialContext from Servlet.init properties in web.xml
            Properties jndiProperties = new Properties();
            for(Enumeration<?> e=config.getServletContext().getInitParameterNames();
                e.hasMoreElements(); ) {
                String key = (String)e.nextElement();
                String value=(String)config.getServletContext().getInitParameter(key);
                if (key.startsWith("java.naming")) {
                    jndiProperties.put(key, value);
                }                    
            }
            log.debug("jndiProperties=" + jndiProperties);
            InitialContext jndi = new InitialContext(jndiProperties);
            jndi.lookup("/");  //do a quick sanity check
            
    }
---

    [[1]] Call the helper method from the Servlet.init() method.

---
    public void init() throws ServletException {
        log.debug("init() called ");
        try {
            ServletConfig config = getServletConfig();
            initRegistrar(config);
        }
        catch (Exception ex) {
            log.fatal("error initializing handler", ex);
            throw new ServletException("error initializing handler", ex);
        }
    }
---

    [[1]] Test your implementation from Jetty.

        * http://localhost:9080/javaeeExWAR/

        * click on "invoke servlet"

---
$ mvn -Dslf4j=true -Dlog4j.configuration=file:./src/test/resources/log4j.xml jetty:run -Pjetty

...
[INFO] Starting scanner at interval of 10 seconds.
 -init() called
 -initTeller()
 -jndiProperties={java.naming.provider.url=jnp://localhost:1099, java.naming.factory.initial=org.jnp.interfaces.NamingCo
ntextFactory, java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces}
 -doGet() called
---

    [[1]] Test your implementation from the application server. You will 
    need to rebuild and redeploy the application.

        * http://localhost:8080/javaeeEx/

        * click on "invoke servlet"

---
$  pwd
/cygdrive/c/proj/javaeeEx

$ mvn clean install
...
---
---
//SERVER LOG

13:47:35,203 DEBUG [RegistrarHandlerServlet] init() called
13:47:35,203 DEBUG [RegistrarHandlerServlet] initTeller()
13:47:35,203 DEBUG [RegistrarHandlerServlet] jndiProperties={java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory, java.naming.provider.url=jnp://localhost:1099, java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces}
13:47:35,218 DEBUG [RegistrarHandlerServlet] doGet() called
---

* {Add EJB to Servlet}

    [[1]] Add a dependency on the EJB API to define @EJB annotation
    classes used for injection.

---
    <dependencies>
        <!-- used for @EJB injection -->
        <dependency>
          <groupId>javax.ejb</groupId>
          <artifactId>ejb-api</artifactId>
          <version>3.0</version>
          <scope>provided</scope>
        </dependency>
---

    [[1]] Add a dependency on the EJB within the WAR/pom.xml. The root
    level dependency will be on the EJB itself (scope=provided) since they
    will be sitting side by side in the same EAR.  The Jetty configuration
    will be depenent on the ejb-client; same as the external RMI clients.

---
//root level dependency

        <dependency>
            <groupId>${pom.groupId}</groupId>
            <artifactId>javaeeExEJB</artifactId>
            <version>${pom.version}</version>
            <scope>provided</scope>
        </dependency>
---
---
//jetty profile dependency

        <dependency>
            <groupId>${pom.groupId}</groupId>
            <artifactId>javaeeExEJB</artifactId>
            <version>${pom.version}</version>
            <type>ejb-client</type>
            <scope>compile</scope>
        </dependency>
---

    [[1]] Add the JNDI names for the Registrar interfaces to 
    the ServletConfig within web.xml. This will be used to support
    the Jetty configuration and will not be needed for the EAR-based
    configuration.

---
    <context-param>
            <param-name>registrar.local</param-name> 
            <param-value>/myorg/javaeeEx/RegistrarEJB/local</param-value>
    </context-param>
    <context-param>
            <param-name>registrar.remote</param-name> 
            <param-value>/myorg/javaeeEx/RegistrarEJB/remote</param-value>
    </context-param>
---

    [[1]] Add an object-level reference for the Registrar. Start
    off by using the remote interface for both Jetty and the 
    EAR deployment.

---
import javax.ejb.EJB;
...
import myorg.javaeeex.ejb.RegistrarRemote;
...
public class RegistrarHandlerServlet extends HttpServlet {
...
    @EJB
    private RegistrarRemote registrar;
---

    [[1]] Update the helper method to also lookup the Registrar
    EJB in the JNDI tree using the remote interface.

---
    private void initRegistrar(ServletConfig config) throws Exception {        
        log.debug("initTeller(), registrar=" + registrar);
        if (registrar == null) {
            //build an InitialContext from Servlet.init properties in web.xml
            ...
            jndi.lookup("/");  //do a quick sanity check
            
            String jndiName = config.getServletContext().getInitParameter("registrar.remote");
            registrar = (RegistrarRemote)jndi.lookup(jndiName);
            log.debug("registrar initialized:" + registrar);
        }        
    }
---

    [[1]] Test your lookup of the EJB using your Jetty configuration.

        * http://localhost:9080/javaeeExWAR/

        * click on "invoke servlet"

---
mvn -Dslf4j=true -Dlog4j.configuration=file:./src/test/resources/log4j.xml jetty:run -Pjetty
---
---
 -init() called
 -initTeller(), registrar=null
 -jndiProperties={java.naming.provider.url=jnp://localhost:1099, java.naming.factory.initial=org.jnp.interfaces.NamingCo
ntextFactory, java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces}
 -registrar initialized:jboss.j2ee:ear=javaeeEx.ear,jar=javaeeExEJB-1.0-SNAPSHOT.jar,name=RegistrarEJB,service=EJB3
 -doGet() called
---

    [[1]] Test your lookup of of the EJB using your deployed EAR. You will
    need to rebuild and redeploy first.

        * http://localhost:8080/javaeeEx/

        * click on "invoke servlet"

---
$ pwd
/cygdrive/c/proj/javaeeEx

StaffordJ@takedown /cygdrive/c/proj/javaeeEx
$ mvn clean install
...
---
---
06:30,562 DEBUG [RegistrarHandlerServlet] init() called
06:30,562 DEBUG [RegistrarHandlerServlet] initTeller(), registrar=null
06:30,562 DEBUG [RegistrarHandlerServlet] jndiProperties={java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory, java.naming.provider.url=jnp://localhost:1099, java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces}
06:30,609 DEBUG [RegistrarHandlerServlet] registrar initialized:jboss.j2ee:ear=javaeeEx.ear,jar=javaeeExEJB-1.0-SNAPSHOT.jar,name=RegistrarEJB,service=EJB3
06:30,609 DEBUG [RegistrarHandlerServlet] doGet() called
---

* {Add Controller Servlet to invoke EJB}

    In this step we are going to add some structure to the Web Tier. The
    structure will be consistent with the ideas of Model View Controller 
    (MVC), but we will make a few shortcuts to keep this simple. We are
    going to deploy two instances of the Controller Servlet; one for 
    anonymous users and another for admin users. We can leverage this
    separation later when security is added.

    [[1]] Add a type=admin to the current servlet specification within
    web.xml. This will be used by the Servlet to determine which actions
    are allowed within each context.

---
    <servlet>
        <servlet-name>AdminHandler</servlet-name>
        <servlet-class>myorg.javaeeex.web.RegistrarHandlerServlet</servlet-class>
        <init-param>
            <param-name>type</param-name>
            <param-value>admin</param-value>
        </init-param>
...
    </servlet>
    <servlet-mapping>
        <servlet-name>AdminHandler</servlet-name>
        <url-pattern>/model/admin/handler</url-pattern>
    </servlet-mapping>
---

    [[1]] Create a duplicate of the existing servlet entry except
    this time, change the type=admin to type=anonymous. Also make 
    this servlet-mapping be url-pattern=/model/handler.

---
    <servlet>
        <servlet-name>AnonymousHandler</servlet-name>
        <servlet-class>myorg.javaeeex.web.RegistrarHandlerServlet</servlet-class>
        <init-param>
            <param-name>type</param-name>
            <param-value>anonymous</param-value>
        </init-param>
...
    </servlet>
    <servlet-mapping>
        <servlet-name>AnonymousHandler</servlet-name>
        <url-pattern>/model/handler</url-pattern>
    </servlet-mapping>
---

    [[1]] Add an abstract Handler class within the web tier. This can
    be a sparate, public Java class or a private class as shown in
    the example solution. This class will be used to implement 
    common behavior of an action/handler class. It will use a 
    RequestDispatcher to forward any exceptions thrown to a JSP/View
    to display the error.

---
import javax.servlet.RequestDispatcher;
...

    private abstract class Handler {
        protected static final String RESULT_PARAM = "result";
        protected static final String EXCEPTION_PARAM = "exception";
        protected static final String DISPLAY_EXCEPTION_URL = 
            "/WEB-INF/content/ErrorPage.jsp";
        protected static final String DISPLAY_RESULT_URL = 
            "/WEB-INF/content/DisplayResult.jsp";
        protected String action;
        public void handle(HttpServletRequest request, 
                HttpServletResponse response) 
                throws ServletException, IOException {
            try {
                doHandle(request, response);
            }
            catch (Exception ex) {
                log.error("error in " + action, ex);
                request.setAttribute(EXCEPTION_PARAM, ex);                
                RequestDispatcher rd = getServletContext().getRequestDispatcher(
                    DISPLAY_EXCEPTION_URL);
                rd.forward(request, response);
            }
        }
        
        public abstract void doHandle(HttpServletRequest request, 
                HttpServletResponse response) 
                throws ServletException, IOException;
    }
---

    [[1]] Create the JSP that will display a generic exception.
    Since this JSP requires a specific contract from the Controller,
    it should not be placed in a public area. Place any protected
    resource within WEB-INF. In this case, we will place it within
    WEB-INF/content.

---
$ pwd
/cygdrive/c/proj/javaeeEx/javaeeExWAR

$ mkdir -p src/main/webapp/WEB-INF/content
---
---
$ cat src/main/webapp/WEB-INF/content/DisplayException.jsp
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">

<html>
<header>
   <title>General Exception Page</title>
</header>
<body>
   <center><h1>General Exception Page</h1></center>
   <p>An error was reported by the application. More detailed information
   may follow.</p>.

   <p>
   <jsp:scriptlet>
      Exception ex = (Exception)request.getAttribute("exception");
      if (ex != null) {
          java.io.PrintWriter writer = new java.io.PrintWriter(out);
          ex.printStackTrace(writer);
      }
   </jsp:scriptlet>
   </p>

   <p/><a href="<%=request.getContextPath()%>/index.jsp">Go to Main Page</a>
</body>
</html>
---


    [[1]] Add a Ping action that extands Handler. Have the handler
    invoke ping() on the EJB and rse a RequestDispatcher to report
    the results to a JSP/View for display. 

---
    private class Ping extends Handler {
        public void doHandle(HttpServletRequest request, 
                HttpServletResponse response) 
                throws ServletException, IOException {
            action = "EJB.ping"; //describe action in case of exception
            registrar.ping();
                
            request.setAttribute(RESULT_PARAM, "ping() complete");                
            RequestDispatcher rd = 
              getServletContext().getRequestDispatcher(DISPLAY_RESULT_URL);
            rd.forward(request, response);                
        }
    }
---

    [[1]] Add an ErrorPage.jsp to handle any unhandled exceptions with
    JSPs.

---
$ cat src/main/webapp/WEB-INF/content/ErrorPage.jsp
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">

<%-- ErrorPage.jsp
     This page is registered to handle errors in JSP files.
     --%>
<%@ page isErrorPage="true" %>
<html>
<header>
   <title>General Exception Page</title>
</header>
<body>
   <center><h1>General Exception Page</h1></center>
   <p>An error was reported by the application. More detailed information
   may follow.</p>.

   <p><%
      java.io.PrintWriter writer = new java.io.PrintWriter(out);
      exception.printStackTrace(writer);
   %></p>

   <p/><a href="<%=request.getContextPath()%>/index.jsp">Go to Main Page</a>
</body>
</html>
---

    [[1]] Create the JSP that will display a generic result. This also
    has a specific contract with the Controller and should not be allowed
    to be publically invoked.

---
$ cat src/main/webapp/WEB-INF/content/DisplayResult.jsp     kWA
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">

<jsp:directive.page errorPage="/WEB-INF/content/ErrorPage.jsp"/>
<jsp:directive.page import="myorg.javaeeex.bo.*"/>
<html>
    <title>Result</title>
    <body>

        <jsp:scriptlet>
            Object result = request.getAttribute("result");
        </jsp:scriptlet>
        Result: <%= result %>

        <p/><a href="<%=request.getContextPath()%>/index.jsp">Go to Main Page</a>
    </body>
</html>
---


    [[1]] Add admin and annonymous handlers to the Controller, depending
    on which instance we are. This should go in the Controller's init()
    method. Place the Ping command within the commands allowed for 
    anonymous.

---
import java.util.HashMap;
import java.util.Map;
...
    private Map<String, Handler> handlers = new HashMap<String, Handler>();
...
    public static final String ADMIN_TYPE = "admin";
    public static final String ANONYMOUS_TYPE = "anonymous";
    public static final String PING_COMMAND = "Ping";

    public void init() throws ServletException {
        log.debug("init() called ");
        try {
            ServletConfig config = getServletConfig();
            initRegistrar(config);
            
            //build a list of handlers for individual commands
            String handlerType = config.getInitParameter(HANDLER_TYPE_KEY);
            if (ADMIN_TYPE.equals(handlerType)) {               
                //adminHandlers.put(XXX_COMMAND, new XXX());    
            } 
            else if (ANONYMOUS_TYPE.equals(handlerType)) {
                handlers.put(PING_COMMAND, new Ping());    
            }
            log.debug("configured handler type:" + handlerType +
                    " with " + handlers);
        }
        catch (Exception ex) {
            log.fatal("error initializing handler", ex);
            throw new ServletException("error initializing handler", ex);
        }
    }
---

    [[1]] Add usage of the handlers with the doGet() of the 
    Controller.

---
    public static final String EXCEPTION_PARAM = "exception";
    private static final String UNKNOWN_COMMAND_URL = 
        "/WEB-INF/content/UnknownCommand.jsp";

...

    protected void doGet(HttpServletRequest request, 
                         HttpServletResponse response) 
        throws ServletException, IOException {
        log.debug("doGet() called");
        String command = request.getParameter(COMMAND_PARAM);
        log.debug("command=" + command);
        try {
            if (command != null) {
                Handler handler = handlers.get(command);
                if (handler != null) {
                    handler.handle(request, response);
                }
                else {
                    RequestDispatcher rd = 
                        getServletContext().getRequestDispatcher(
                            UNKNOWN_COMMAND_URL);
                            rd.forward(request, response);
                }
            }
            else {
                throw new Exception("no " + COMMAND_PARAM + " supplied"); 
            }
        }
        catch (Exception ex) {
            log.error("error within GET", ex);
            request.setAttribute(EXCEPTION_PARAM, ex);
            RequestDispatcher rd = getServletContext().getRequestDispatcher(
                    UNKNOWN_COMMAND_URL);
                    rd.forward(request, response);
        }
    }
---

    [[1]] Create the JSP/View that will handle the case where
    the command is unknown. This also has a contract with the Controller
    and should not be publically accessible.

---
$ cat src/main/webapp/WEB-INF/content/UnknownCommand.jsp
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">
<jsp:directive.page errorPage="/WEB-INF/content/ErrorPage.jsp"/>
<html>
   <header>
      <title>Unknown Command</title>
   </header>
<body>
   <center><h1>Command Error</h1></center>
   A request was made, but the command was not recognized</p>.
   command=<%=request.getParameter("command")%>
   <p/><a href="<%=request.getContextPath()%>/index.jsp">Go to Main Page</a>
</body>
</html>
---

    [[1]] Add a menu entry to the main main. Leave the former 
    "invoke servlet" in place to test our error handling.

---
$ cat src/main/webapp/index.jsp
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <title>JavaEE Exercise Main Page</title>
</head>
<body>
    <h2>Hello JavaEE Controller</h2>

    <ul>
        <li><a href="model/admin/handler">invoke servlet</a></li>
        <li><a href="model/admin/handler?command=Ping">invoke admin EJB.ping()</a></li>
        <li><a href="model/handler?command=Ping">invoke anonymous EJB.ping()</a></li>
    </ul>
</body>
</html>
---

    [[1]] Test the configuration with Jetty.

        * http://localhost:9080/javaeeExWAR/

        * click "invoke anonymous EJB.ping"

        []

---
mvn -Dslf4j=true -Dlog4j.configuration=file:./src/test/resources/log4j.xml jetty:run -Pjetty

...

[INFO] Starting scanner at interval of 10 seconds.
 -init() called
 -initTeller(), registrar=null
 -jndiProperties={java.naming.provider.url=jnp://localhost:1099, java.naming.factory.initial=org.jnp.interfaces.NamingCo
ntextFactory, java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces}
 -registrar initialized:jboss.j2ee:ear=javaeeEx.ear,jar=javaeeExEJB-1.0-SNAPSHOT.jar,name=RegistrarEJB,service=EJB3
 -configured handler type:anonymous with {Ping=myorg.javaeeex.web.RegistrarHandlerServlet$Ping@1ad0839}
 -doGet() called
 -command=Ping
---
---
//http://localhost:9080/javaeeExWAR/model/handler?command=Ping


Result: ping() complete

Go to Main Page 
---
---
//SERVER LOG

17:07:01,375 DEBUG [RegistrarEJB] **** init ****
17:07:01,375 DEBUG [RegistrarEJB] em=org.jboss.ejb3.entity.TransactionScopedEntityManager@527849
17:07:01,375 DEBUG [RegistrarEJB] ping called
---

        * click "invoke admin EJB.ping()" and note the errors

        []

---
//http://localhost:9080/javaeeExWAR/model/admin/handler?command=Ping

Command Error
A request was made, but the command was not recognized. command=Ping

Go to Main Page 
---

        * click "invoke servlet" and note the errors

        []

---
//http://localhost:9080/javaeeExWAR/model/admin/handler


Command Error
A request was made, but the command was not recognized. command=null

Go to Main Page 
---

    [[1]] Test the configuration within the application server. You
    will need to rebuild and redeploy the application.

---
$ mvn clean install

...
---
---
//http://localhost:8080/javaeeEx/model/handler?command=Ping

Result: ping() complete

Go to Main Page 
---
---
//SERVER LOG

17:18:09,031 DEBUG [RegistrarEJB] **** init ****
17:18:09,031 DEBUG [RegistrarEJB] em=org.jboss.ejb3.entity.TransactionScopedEntityManager@b2b9ec
17:18:09,031 DEBUG [RegistrarEJB] ping called
---
---
//http://localhost:8080/javaeeEx/model/admin/handler?command=Ping

Command Error
A request was made, but the command was not recognized. command=Ping

Go to Main Page 
---
---
//http://localhost:8080/javaeeEx/model/admin/handler

Command Error
A request was made, but the command was not recognized. command=null

Go to Main Page 
---

* Final configuration

    This is what your configuration should look like when complete.

---
javaeeEx                                                                                                                     
|-- javaeeExEAR                                                                                                              
|-- javaeeExEJB                                                                                                              
|-- javaeeExImpl                                                                                                             
|-- javaeeExTest
|-- javaeeExWAR
|   |-- pom.xml
|   `-- src
|       |-- main
|       |   |-- java
|       |   |   `-- myorg
|       |   |       `-- javaeeex
|       |   |           `-- web
|       |   |               `-- RegistrarHandlerServlet.java
|       |   `-- webapp
|       |       |-- WEB-INF
|       |       |   |-- content
|       |       |   |   |-- DisplayException.jsp
|       |       |   |   |-- DisplayResult.jsp
|       |       |   |   |-- ErrorPage.jsp
|       |       |   |   `-- UnknownCommand.jsp
|       |       |   `-- web.xml
|       |       `-- index.jsp
|       `-- test
|           `-- resources
|               `-- log4j.xml
`-- pom.xml
---

    The built WAR looks as follows.

---
javaeeExWAR/target/javaeeExWAR-1.0-SNAPSHOT
|-- META-INF
|-- WEB-INF
|   |-- classes
|   |   `-- myorg
|   |       `-- javaeeex
|   |           `-- web
|   |               |-- RegistrarHandlerServlet$1.class
|   |               |-- RegistrarHandlerServlet$Handler.class
|   |               |-- RegistrarHandlerServlet$Ping.class
|   |               `-- RegistrarHandlerServlet.class
|   |-- content
|   |   |-- DisplayException.jsp
|   |   |-- DisplayResult.jsp
|   |   |-- ErrorPage.jsp
|   |   `-- UnknownCommand.jsp
|   `-- web.xml
`-- index.jsp

---


    []

* Summary

    * In this exercise, we created the shell of a Web UI. Our 
    implementation started out with a simple WAR. We then added
    JNDI, and EJB lookup, an MVC approach, and an end-to-end
    call to the EJB's ping() method.

    * We used the @Remote interface that was developed for 
    an earlier exercise. Next we will add the @Local interface
    and a few more complex uses of the Web UI and EJB.
