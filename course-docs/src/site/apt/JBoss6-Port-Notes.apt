Porting from JBoss 5.1.0.GA to 6.0.0.Final

These are the issues encountered and steps taken to port the ejava example
source tree from JBoss 5.1.0.GA to 6.0.0.Final version. 

    []


* Key Issues


* Issues

    [[1]] There seems to be 3 versions of slf4j being used.
    
    * JBoss 5.1.0.GA and Hibernate 3.4.0.GA seem to use 1.5.2

    * Hibernate 3.6.0.Final seems to use 1.6.1

    * JBoss 6.0.0.Final seems to use 1.5.6
    
    There is a major hiccup with slf4j when you mix implementation versions from
    what API was used and that seems to be especially true between 1.5.2 and 
    1.5.6 or 1.5.8. We need to specify an implementation order to route 
    slf4j calls to log4j. Therefore, the following is being added to the 
    pom defintions.

    * declare values for JBoss5/Hibernate 3.4.0.GA
---
                <slf4j.hibernate.version>1.5.2</slf4j.hibernate.version>
                <slf4j.jboss.version>1.5.2</slf4j.jboss.version>
---

    * declare values for JBoss6/Hibernate 3.6.0.Final
---
                <slf4j.hibernate.version>1.6.1</slf4j.hibernate.version>
                <slf4j.jboss.version>1.5.6</slf4j.jboss.version>
---

    Use the hibernate.version on DAO and Impl projects to stay in lockstep
    with hibernate. Use the jboss.version in RMI Test projects to be in 
    sync with the jboss-as-client version.


    * Remove the dependency on persistence-api:1.0. This is getting in the way of the 
    JPA 2.0 implementation.

    [[1]] The DAO and Impl modules mostly require access to the EntityManager
    and can live with just the Persistence classes. However, it is wise to 
    use APIs from the implementation vendor that will be used at runtime for
    testing to leverage the bootstrap information they profile within their
    version of the API.jar file.

    * Create a profile for JBoss 5 and place all the JPA 1.0-specific artifacts
    there.

---
        <profile>
            <id>jboss5</id>
            <dependencies>
                <dependency>
                    <groupId>javax.persistence</groupId>
                    <artifactId>persistence-api</artifactId>
                    <version>1.0</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
        </profile>
---

    * Create a profile for JBoss 6 and place all the JPA 2.0-specific artifacts
    there.

---
        <profile>
            <id>jboss6</id>
            <dependencies>
                <dependency>
                    <groupId>org.hibernate.javax.persistence</groupId>
                    <artifactId>hibernate-jpa-2.0-api</artifactId>
                    <version>1.0.0.Final</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
---

    [[1]] The EJB modules currently have no runtime tests so they can work
    with just the API definitions. 

    * Build a JBoss 5 profile for the EJB module. Move all the EJB3-specific
    definitions into that profile.
---
        <profile>
            <id>jboss5</id>
           <!-- this repositories holds many of the javaee5 jar files -->
            <repositories>
                <repository>
                    <id>jboss-repo</id>
                    <name>JBoss Maven Repository</name>
                    <url>http://repository.jboss.org/maven2</url>
                </repository>
            </repositories>
            <dependencies>
                <dependency>
                    <groupId>javax.annotation</groupId>
                    <artifactId>jsr250-api</artifactId>
                    <version>1.0</version>
                  <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>javax.persistence</groupId>
                    <artifactId>persistence-api</artifactId>
                    <version>1.0</version>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>javax.ejb</groupId>
                    <artifactId>ejb-api</artifactId>
                    <version>3.0</version>
                  <scope>provided</scope>
                </dependency>
            </dependencies>
        </profile>
---

    * Build a JBoss 6 profile for the EJB module. Place all the EJB3.1-specific
    artifacts within that profile. Note that we can use a single javaee-api
    artifact directly form Sun's maven site now. Note that this API.jar file
    will cause issues if it is used in a module that performs runtime testing.
    In that case it is better to use the API from the implementation 
    vendor since that version will have bootstrap information in it.
---
        <profile>
            <id>jboss6</id>
            <repositories>
                <repository>
                    <id>java.net-repo</id>
                    <name>Java.net Maven Repository</name>
                    <url>http://download.java.net/maven/2</url>
                </repository>
            </repositories>
            <dependencies>
                <!-- this is fine to compile with -->
                <dependency>
                    <groupId>javax</groupId>
                    <artifactId>javaee-api</artifactId>
                    <version>6.0</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
        </profile>
---



